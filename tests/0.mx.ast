-CompilationNode (void)			// voidprint(stringstr){}voidprintln(stringstr){}stringgetString(){return"abracadabra";}intgetInt(){return0;}stringtoString(inti){return"abracadabra";}int[][]c;intans;int[]visit=newint[110];int[]pre=newint[110];int[]f=newint[110];inti;intj;intopen;intclosed;voidorigin(intN){c=newint[N][];for(i=0;i<N;i=i++){c[i]=newint[N];for(j=0;j<N;j=j++)c[i][j]=0;}}intbuild(intstart,intending){for(i=1;i<=49;i++){for(j=50;j<=98-i+1;j++){c[i][j]=1;}}for(i=1;i<=49;i++)c[start][i]=1;for(i=50;i<=98;i++)c[i][ending]=1;return0;}intfind(intending,intstart,intflag){open=0;closed=1;for(i=1;i<=ending;i++){visit[i]=0;}f[1]=start;visit[start]=1;pre[start]=0;flag=0;while(open<closed&&flag==0){open++;i=f[open];for(j=1;j<=ending;j++)if(c[i][j]>0&&visit[j]==0){visit[j]=1;closed++;f[closed]=j;pre[j]=i;if(closed==ending)flag=1;}}returnflag;}intimprove(intending){i=ending;ans++;while(pre[i]>0){j=pre[i];c[j][i]--;c[i][j]++;i=j;}return0;}intmain(){origin(110);intk;intstart;intending;intflag;inti1;k=0;start=99;ending=100;flag=0;build(start,ending);while(find(ending,start,flag)>0){improve(ending);}println(toString(ans));return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprint(stringstr){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// voidprintln(stringstr){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"abracadabra";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"abracadabra";}
            -ReturnNode (void)			// return"abracadabra";
                -StringLiteralNode (string)			// "abracadabra"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"abracadabra";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"abracadabra";}
            -ReturnNode (void)			// return"abracadabra";
                -StringLiteralNode (string)			// "abracadabra"
    -DeclarationNode (void)			// int[][]c;
        -TypeNode (void)			// int[][]
            -TypeAttributeNode (void)			// int[][]
        -DeclaratorListNode (void)			// c
            -InitDeclaratorNode (void)			// c
                -DeclaratorNode (void)			// c
    -DeclarationNode (void)			// intans;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// ans
            -InitDeclaratorNode (void)			// ans
                -DeclaratorNode (void)			// ans
    -DeclarationNode (void)			// int[]visit=newint[110];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
        -DeclaratorListNode (void)			// visit=newint[110]
            -InitDeclaratorNode (void)			// visit=newint[110]
                -DeclaratorNode (void)			// visit
                -NewNode (int[])			// newint[110]
                    -TypeNode (void)			// int[110]
                        -TypeAttributeNode (void)			// int[110]
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[]pre=newint[110];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
        -DeclaratorListNode (void)			// pre=newint[110]
            -InitDeclaratorNode (void)			// pre=newint[110]
                -DeclaratorNode (void)			// pre
                -NewNode (int[])			// newint[110]
                    -TypeNode (void)			// int[110]
                        -TypeAttributeNode (void)			// int[110]
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[]f=newint[110];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
        -DeclaratorListNode (void)			// f=newint[110]
            -InitDeclaratorNode (void)			// f=newint[110]
                -DeclaratorNode (void)			// f
                -NewNode (int[])			// newint[110]
                    -TypeNode (void)			// int[110]
                        -TypeAttributeNode (void)			// int[110]
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// inti;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i
            -InitDeclaratorNode (void)			// i
                -DeclaratorNode (void)			// i
    -DeclarationNode (void)			// intj;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// j
            -InitDeclaratorNode (void)			// j
                -DeclaratorNode (void)			// j
    -DeclarationNode (void)			// intopen;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// open
            -InitDeclaratorNode (void)			// open
                -DeclaratorNode (void)			// open
    -DeclarationNode (void)			// intclosed;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// closed
            -InitDeclaratorNode (void)			// closed
                -DeclaratorNode (void)			// closed
    -FuncDefinitionNode (void)			// voidorigin(intN){c=newint[N][];for(i=0;i<N;i=i++){c[i]=newint[N];for(j=0;j<N;j=j++)c[i][j]=0;}}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// origin(intN)
            -DeclaratorNode (void)			// origin
            -ArgumentTypeListNode (void)			// intN
                -ArgumentDeclarationNode (void)			// intN
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// N
        -BlockNode (void)			// {c=newint[N][];for(i=0;i<N;i=i++){c[i]=newint[N];for(j=0;j<N;j=j++)c[i][j]=0;}}
            -StatementNode (void)			// c=newint[N][];
                -AssignNode (void)			// c=newint[N][]
                    -IdentifierNode (int[][])			// c
                    -NewNode (int[][])			// newint[N][]
                        -TypeNode (void)			// int[N][]
                            -TypeAttributeNode (void)			// int[N][]
                        -ArgumentTypeListNode (void)
            -ForNode (void)			// for(i=0;i<N;i=i++){c[i]=newint[N];for(j=0;j<N;j=j++)c[i][j]=0;}
                -ForConditionNode (void)			// i=0;i<N;i=i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<N
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// N
                    -AssignNode (void)			// i=i++
                        -IdentifierNode (int)			// i
                        -PostfixAddNode (int)			// i++
                            -IdentifierNode (int)			// i
                -BlockNode (void)			// {c[i]=newint[N];for(j=0;j<N;j=j++)c[i][j]=0;}
                    -StatementNode (void)			// c[i]=newint[N];
                        -AssignNode (void)			// c[i]=newint[N]
                            -SubscriptOpNode (int[])			// c[i]
                                -IdentifierNode (int[][])			// c
                                -IdentifierNode (int)			// i
                            -NewNode (int[])			// newint[N]
                                -TypeNode (void)			// int[N]
                                    -TypeAttributeNode (void)			// int[N]
                                -ArgumentTypeListNode (void)
                    -ForNode (void)			// for(j=0;j<N;j=j++)c[i][j]=0;
                        -ForConditionNode (void)			// j=0;j<N;j=j++
                            -AssignNode (void)			// j=0
                                -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 0
                            -LessThanNode (bool)			// j<N
                                -IdentifierNode (int)			// j
                                -IdentifierNode (int)			// N
                            -AssignNode (void)			// j=j++
                                -IdentifierNode (int)			// j
                                -PostfixAddNode (int)			// j++
                                    -IdentifierNode (int)			// j
                        -StatementNode (void)			// c[i][j]=0;
                            -AssignNode (void)			// c[i][j]=0
                                -SubscriptOpNode (int)			// c[i][j]
                                    -SubscriptOpNode (int[])			// c[i]
                                        -IdentifierNode (int[][])			// c
                                        -IdentifierNode (int)			// i
                                    -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// intbuild(intstart,intending){for(i=1;i<=49;i++){for(j=50;j<=98-i+1;j++){c[i][j]=1;}}for(i=1;i<=49;i++)c[start][i]=1;for(i=50;i<=98;i++)c[i][ending]=1;return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// build(intstart,intending)
            -DeclaratorNode (void)			// build
            -ArgumentTypeListNode (void)			// intstart,intending
                -ArgumentDeclarationNode (void)			// intstart
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// start
                -ArgumentDeclarationNode (void)			// intending
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// ending
        -BlockNode (void)			// {for(i=1;i<=49;i++){for(j=50;j<=98-i+1;j++){c[i][j]=1;}}for(i=1;i<=49;i++)c[start][i]=1;for(i=50;i<=98;i++)c[i][ending]=1;return0;}
            -ForNode (void)			// for(i=1;i<=49;i++){for(j=50;j<=98-i+1;j++){c[i][j]=1;}}
                -ForConditionNode (void)			// i=1;i<=49;i++
                    -AssignNode (void)			// i=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// i<=49
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 49
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {for(j=50;j<=98-i+1;j++){c[i][j]=1;}}
                    -ForNode (void)			// for(j=50;j<=98-i+1;j++){c[i][j]=1;}
                        -ForConditionNode (void)			// j=50;j<=98-i+1;j++
                            -AssignNode (void)			// j=50
                                -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 50
                            -LessOrEqualThanNode (bool)			// j<=98-i+1
                                -IdentifierNode (int)			// j
                                -AddNode (int)			// 98-i+1
                                    -SubNode (int)			// 98-i
                                        -ConstantNode (int)			// 98
                                        -IdentifierNode (int)			// i
                                    -ConstantNode (int)			// 1
                            -PostfixAddNode (int)			// j++
                                -IdentifierNode (int)			// j
                        -BlockNode (void)			// {c[i][j]=1;}
                            -StatementNode (void)			// c[i][j]=1;
                                -AssignNode (void)			// c[i][j]=1
                                    -SubscriptOpNode (int)			// c[i][j]
                                        -SubscriptOpNode (int[])			// c[i]
                                            -IdentifierNode (int[][])			// c
                                            -IdentifierNode (int)			// i
                                        -IdentifierNode (int)			// j
                                    -ConstantNode (int)			// 1
            -ForNode (void)			// for(i=1;i<=49;i++)c[start][i]=1;
                -ForConditionNode (void)			// i=1;i<=49;i++
                    -AssignNode (void)			// i=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// i<=49
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 49
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// c[start][i]=1;
                    -AssignNode (void)			// c[start][i]=1
                        -SubscriptOpNode (int)			// c[start][i]
                            -SubscriptOpNode (int[])			// c[start]
                                -IdentifierNode (int[][])			// c
                                -IdentifierNode (int)			// start
                            -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
            -ForNode (void)			// for(i=50;i<=98;i++)c[i][ending]=1;
                -ForConditionNode (void)			// i=50;i<=98;i++
                    -AssignNode (void)			// i=50
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 50
                    -LessOrEqualThanNode (bool)			// i<=98
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 98
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// c[i][ending]=1;
                    -AssignNode (void)			// c[i][ending]=1
                        -SubscriptOpNode (int)			// c[i][ending]
                            -SubscriptOpNode (int[])			// c[i]
                                -IdentifierNode (int[][])			// c
                                -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// ending
                        -ConstantNode (int)			// 1
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// intfind(intending,intstart,intflag){open=0;closed=1;for(i=1;i<=ending;i++){visit[i]=0;}f[1]=start;visit[start]=1;pre[start]=0;flag=0;while(open<closed&&flag==0){open++;i=f[open];for(j=1;j<=ending;j++)if(c[i][j]>0&&visit[j]==0){visit[j]=1;closed++;f[closed]=j;pre[j]=i;if(closed==ending)flag=1;}}returnflag;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// find(intending,intstart,intflag)
            -DeclaratorNode (void)			// find
            -ArgumentTypeListNode (void)			// intending,intstart,intflag
                -ArgumentDeclarationNode (void)			// intending
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// ending
                -ArgumentDeclarationNode (void)			// intstart
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// start
                -ArgumentDeclarationNode (void)			// intflag
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// flag
        -BlockNode (void)			// {open=0;closed=1;for(i=1;i<=ending;i++){visit[i]=0;}f[1]=start;visit[start]=1;pre[start]=0;flag=0;while(open<closed&&flag==0){open++;i=f[open];for(j=1;j<=ending;j++)if(c[i][j]>0&&visit[j]==0){visit[j]=1;closed++;f[closed]=j;pre[j]=i;if(closed==ending)flag=1;}}returnflag;}
            -StatementNode (void)			// open=0;
                -AssignNode (void)			// open=0
                    -IdentifierNode (int)			// open
                    -ConstantNode (int)			// 0
            -StatementNode (void)			// closed=1;
                -AssignNode (void)			// closed=1
                    -IdentifierNode (int)			// closed
                    -ConstantNode (int)			// 1
            -ForNode (void)			// for(i=1;i<=ending;i++){visit[i]=0;}
                -ForConditionNode (void)			// i=1;i<=ending;i++
                    -AssignNode (void)			// i=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// i<=ending
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// ending
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {visit[i]=0;}
                    -StatementNode (void)			// visit[i]=0;
                        -AssignNode (void)			// visit[i]=0
                            -SubscriptOpNode (int)			// visit[i]
                                -IdentifierNode (int[])			// visit
                                -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 0
            -StatementNode (void)			// f[1]=start;
                -AssignNode (void)			// f[1]=start
                    -SubscriptOpNode (int)			// f[1]
                        -IdentifierNode (int[])			// f
                        -ConstantNode (int)			// 1
                    -IdentifierNode (int)			// start
            -StatementNode (void)			// visit[start]=1;
                -AssignNode (void)			// visit[start]=1
                    -SubscriptOpNode (int)			// visit[start]
                        -IdentifierNode (int[])			// visit
                        -IdentifierNode (int)			// start
                    -ConstantNode (int)			// 1
            -StatementNode (void)			// pre[start]=0;
                -AssignNode (void)			// pre[start]=0
                    -SubscriptOpNode (int)			// pre[start]
                        -IdentifierNode (int[])			// pre
                        -IdentifierNode (int)			// start
                    -ConstantNode (int)			// 0
            -StatementNode (void)			// flag=0;
                -AssignNode (void)			// flag=0
                    -IdentifierNode (int)			// flag
                    -ConstantNode (int)			// 0
            -WhileNode (void)			// while(open<closed&&flag==0){open++;i=f[open];for(j=1;j<=ending;j++)if(c[i][j]>0&&visit[j]==0){visit[j]=1;closed++;f[closed]=j;pre[j]=i;if(closed==ending)flag=1;}}
                -LogicalAndNode (bool)			// open<closed&&flag==0
                    -LessThanNode (bool)			// open<closed
                        -IdentifierNode (int)			// open
                        -IdentifierNode (int)			// closed
                    -EqualNode (bool)			// flag==0
                        -IdentifierNode (int)			// flag
                        -ConstantNode (int)			// 0
                -BlockNode (void)			// {open++;i=f[open];for(j=1;j<=ending;j++)if(c[i][j]>0&&visit[j]==0){visit[j]=1;closed++;f[closed]=j;pre[j]=i;if(closed==ending)flag=1;}}
                    -StatementNode (void)			// open++;
                        -PostfixAddNode (int)			// open++
                            -IdentifierNode (int)			// open
                    -StatementNode (void)			// i=f[open];
                        -AssignNode (void)			// i=f[open]
                            -IdentifierNode (int)			// i
                            -SubscriptOpNode (int)			// f[open]
                                -IdentifierNode (int[])			// f
                                -IdentifierNode (int)			// open
                    -ForNode (void)			// for(j=1;j<=ending;j++)if(c[i][j]>0&&visit[j]==0){visit[j]=1;closed++;f[closed]=j;pre[j]=i;if(closed==ending)flag=1;}
                        -ForConditionNode (void)			// j=1;j<=ending;j++
                            -AssignNode (void)			// j=1
                                -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 1
                            -LessOrEqualThanNode (bool)			// j<=ending
                                -IdentifierNode (int)			// j
                                -IdentifierNode (int)			// ending
                            -PostfixAddNode (int)			// j++
                                -IdentifierNode (int)			// j
                        -IfNode (void)			// if(c[i][j]>0&&visit[j]==0){visit[j]=1;closed++;f[closed]=j;pre[j]=i;if(closed==ending)flag=1;}
                            -LogicalAndNode (bool)			// c[i][j]>0&&visit[j]==0
                                -GreaterThanNode (bool)			// c[i][j]>0
                                    -SubscriptOpNode (int)			// c[i][j]
                                        -SubscriptOpNode (int[])			// c[i]
                                            -IdentifierNode (int[][])			// c
                                            -IdentifierNode (int)			// i
                                        -IdentifierNode (int)			// j
                                    -ConstantNode (int)			// 0
                                -EqualNode (bool)			// visit[j]==0
                                    -SubscriptOpNode (int)			// visit[j]
                                        -IdentifierNode (int[])			// visit
                                        -IdentifierNode (int)			// j
                                    -ConstantNode (int)			// 0
                            -BlockNode (void)			// {visit[j]=1;closed++;f[closed]=j;pre[j]=i;if(closed==ending)flag=1;}
                                -StatementNode (void)			// visit[j]=1;
                                    -AssignNode (void)			// visit[j]=1
                                        -SubscriptOpNode (int)			// visit[j]
                                            -IdentifierNode (int[])			// visit
                                            -IdentifierNode (int)			// j
                                        -ConstantNode (int)			// 1
                                -StatementNode (void)			// closed++;
                                    -PostfixAddNode (int)			// closed++
                                        -IdentifierNode (int)			// closed
                                -StatementNode (void)			// f[closed]=j;
                                    -AssignNode (void)			// f[closed]=j
                                        -SubscriptOpNode (int)			// f[closed]
                                            -IdentifierNode (int[])			// f
                                            -IdentifierNode (int)			// closed
                                        -IdentifierNode (int)			// j
                                -StatementNode (void)			// pre[j]=i;
                                    -AssignNode (void)			// pre[j]=i
                                        -SubscriptOpNode (int)			// pre[j]
                                            -IdentifierNode (int[])			// pre
                                            -IdentifierNode (int)			// j
                                        -IdentifierNode (int)			// i
                                -IfNode (void)			// if(closed==ending)flag=1;
                                    -EqualNode (bool)			// closed==ending
                                        -IdentifierNode (int)			// closed
                                        -IdentifierNode (int)			// ending
                                    -StatementNode (void)			// flag=1;
                                        -AssignNode (void)			// flag=1
                                            -IdentifierNode (int)			// flag
                                            -ConstantNode (int)			// 1
            -ReturnNode (void)			// returnflag;
                -IdentifierNode (int)			// flag
    -FuncDefinitionNode (void)			// intimprove(intending){i=ending;ans++;while(pre[i]>0){j=pre[i];c[j][i]--;c[i][j]++;i=j;}return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// improve(intending)
            -DeclaratorNode (void)			// improve
            -ArgumentTypeListNode (void)			// intending
                -ArgumentDeclarationNode (void)			// intending
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// ending
        -BlockNode (void)			// {i=ending;ans++;while(pre[i]>0){j=pre[i];c[j][i]--;c[i][j]++;i=j;}return0;}
            -StatementNode (void)			// i=ending;
                -AssignNode (void)			// i=ending
                    -IdentifierNode (int)			// i
                    -IdentifierNode (int)			// ending
            -StatementNode (void)			// ans++;
                -PostfixAddNode (int)			// ans++
                    -IdentifierNode (int)			// ans
            -WhileNode (void)			// while(pre[i]>0){j=pre[i];c[j][i]--;c[i][j]++;i=j;}
                -GreaterThanNode (bool)			// pre[i]>0
                    -SubscriptOpNode (int)			// pre[i]
                        -IdentifierNode (int[])			// pre
                        -IdentifierNode (int)			// i
                    -ConstantNode (int)			// 0
                -BlockNode (void)			// {j=pre[i];c[j][i]--;c[i][j]++;i=j;}
                    -StatementNode (void)			// j=pre[i];
                        -AssignNode (void)			// j=pre[i]
                            -IdentifierNode (int)			// j
                            -SubscriptOpNode (int)			// pre[i]
                                -IdentifierNode (int[])			// pre
                                -IdentifierNode (int)			// i
                    -StatementNode (void)			// c[j][i]--;
                        -PostfixSubNode (int)			// c[j][i]--
                            -SubscriptOpNode (int)			// c[j][i]
                                -SubscriptOpNode (int[])			// c[j]
                                    -IdentifierNode (int[][])			// c
                                    -IdentifierNode (int)			// j
                                -IdentifierNode (int)			// i
                    -StatementNode (void)			// c[i][j]++;
                        -PostfixAddNode (int)			// c[i][j]++
                            -SubscriptOpNode (int)			// c[i][j]
                                -SubscriptOpNode (int[])			// c[i]
                                    -IdentifierNode (int[][])			// c
                                    -IdentifierNode (int)			// i
                                -IdentifierNode (int)			// j
                    -StatementNode (void)			// i=j;
                        -AssignNode (void)			// i=j
                            -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// j
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// intmain(){origin(110);intk;intstart;intending;intflag;inti1;k=0;start=99;ending=100;flag=0;build(start,ending);while(find(ending,start,flag)>0){improve(ending);}println(toString(ans));return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {origin(110);intk;intstart;intending;intflag;inti1;k=0;start=99;ending=100;flag=0;build(start,ending);while(find(ending,start,flag)>0){improve(ending);}println(toString(ans));return0;}
            -StatementNode (void)			// origin(110);
                -ParenthesisOpNode (void)			// origin(110)
                    -IdentifierNode (BaseType)			// origin
                    -ArgumentListNode (void)			// 110
                        -ConstantNode (int)			// 110
            -DeclarationNode (void)			// intk;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// k
                    -InitDeclaratorNode (void)			// k
                        -DeclaratorNode (void)			// k
            -DeclarationNode (void)			// intstart;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// start
                    -InitDeclaratorNode (void)			// start
                        -DeclaratorNode (void)			// start
            -DeclarationNode (void)			// intending;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// ending
                    -InitDeclaratorNode (void)			// ending
                        -DeclaratorNode (void)			// ending
            -DeclarationNode (void)			// intflag;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// flag
                    -InitDeclaratorNode (void)			// flag
                        -DeclaratorNode (void)			// flag
            -DeclarationNode (void)			// inti1;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i1
                    -InitDeclaratorNode (void)			// i1
                        -DeclaratorNode (void)			// i1
            -StatementNode (void)			// k=0;
                -AssignNode (void)			// k=0
                    -IdentifierNode (int)			// k
                    -ConstantNode (int)			// 0
            -StatementNode (void)			// start=99;
                -AssignNode (void)			// start=99
                    -IdentifierNode (int)			// start
                    -ConstantNode (int)			// 99
            -StatementNode (void)			// ending=100;
                -AssignNode (void)			// ending=100
                    -IdentifierNode (int)			// ending
                    -ConstantNode (int)			// 100
            -StatementNode (void)			// flag=0;
                -AssignNode (void)			// flag=0
                    -IdentifierNode (int)			// flag
                    -ConstantNode (int)			// 0
            -StatementNode (void)			// build(start,ending);
                -ParenthesisOpNode (int)			// build(start,ending)
                    -IdentifierNode (BaseType)			// build
                    -ArgumentListNode (void)			// start,ending
                        -IdentifierNode (int)			// start
                        -IdentifierNode (int)			// ending
            -WhileNode (void)			// while(find(ending,start,flag)>0){improve(ending);}
                -GreaterThanNode (bool)			// find(ending,start,flag)>0
                    -ParenthesisOpNode (int)			// find(ending,start,flag)
                        -IdentifierNode (BaseType)			// find
                        -ArgumentListNode (void)			// ending,start,flag
                            -IdentifierNode (int)			// ending
                            -IdentifierNode (int)			// start
                            -IdentifierNode (int)			// flag
                    -ConstantNode (int)			// 0
                -BlockNode (void)			// {improve(ending);}
                    -StatementNode (void)			// improve(ending);
                        -ParenthesisOpNode (int)			// improve(ending)
                            -IdentifierNode (BaseType)			// improve
                            -ArgumentListNode (void)			// ending
                                -IdentifierNode (int)			// ending
            -StatementNode (void)			// println(toString(ans));
                -ParenthesisOpNode (void)			// println(toString(ans))
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// toString(ans)
                        -ParenthesisOpNode (string)			// toString(ans)
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// ans
                                -IdentifierNode (int)			// ans
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
