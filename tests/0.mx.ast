-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprint(stringstr){}voidprintln(stringstr){}stringgetString(){return"abracadabra";}intgetInt(){return0;}stringtoString(inti){return"abracadabra";}classMo{intang;intsec;stringworld;}classRedBoy{intnum;}intage=1000000;stringeng="Four score and seven years ago";inttravel(){inta=10000000;returna;}voidjournalists(stringlocation){if(location=="HongKong"){print("naive!\n");print("fast!\n");println("too young\\too simple.");}}Moxu(Mom0,RedBoyboys){inti;for(i=0;i<boys.num;++i){m0.sec++;}returnm0;}intmain(){inta;intb;intc;intyear=2016;stringtell="wukefengggao\n";;boolzici=true;boolnozici=false;RedBoyboy=newRedBoy;RedBoy[]boys=newRedBoy[3];RedBoy[][][]boyss=newRedBoy[1][2][3];Mohaha=newMo;false;true;null;123;"Four score and seven years ago\n\\\"";a=1;b=2;a+b;a-b;a*b;a/b;a%b;a<1;a>2;a==b;a!=b;a<=b;a>=b;boolg;boolh;g&&h;g||h;!g;a<<1;a>>2;~a;a|b;a^b;a&b;++a;b++;boy.num;boys[2].num;boyss[1][2][3].num;xu(newMo,null);inti=0;for(i=0;i<3;++i){xu(haha,boys[i]);}for(i=0;i<3;++i)xu(haha,boys[i]);for(;;);i=0;while(i<year)print(toString(i));while(true);if(i<year){print(toString(travel()));}else{print("naive!\n");}if(i<year)print(toString(travel()));elseif(i==year)print("naive!\n");elseprint("too young!\\");i=0;while(true){if(i==year)break;++i;}i=0;while(true){if(i<year){++i;continue;}break;}stringtmpstr="test";print(toString(tmpstr.length()));print(tmpstr.substring(1,2));return0;}<EOF>
    -ClassDefinitionNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}
        -FuncDefinitionNode (void)			// intlength(){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// length()
                -DeclaratorNode (void)			// length
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
        -FuncDefinitionNode (void)			// stringsubstring(intleft,intright){return"";}
            -TypeNode (void)			// string
                -TypeAttributeNode (void)			// string
            -FuncDeclaratorNode (void)			// substring(intleft,intright)
                -DeclaratorNode (void)			// substring
                -ArgumentTypeListNode (void)			// intleft,intright
                    -ArgumentDeclarationNode (void)			// intleft
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// left
                    -ArgumentDeclarationNode (void)			// intright
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// right
            -BlockNode (void)			// {return"";}
                -ReturnNode (void)			// return"";
                    -StringLiteralNode (string)			// ""
        -FuncDefinitionNode (void)			// intparseInt(){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// parseInt()
                -DeclaratorNode (void)			// parseInt
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
        -FuncDefinitionNode (void)			// intord(intpos){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// ord(intpos)
                -DeclaratorNode (void)			// ord
                -ArgumentTypeListNode (void)			// intpos
                    -ArgumentDeclarationNode (void)			// intpos
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// pos
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
    -ClassDefinitionNode (void)			// classbuilt_in_array{intsize(){return0;}}
        -FuncDefinitionNode (void)			// intsize(){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// size()
                -DeclaratorNode (void)			// size
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// voidprint(stringstr){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// voidprintln(stringstr){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"abracadabra";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"abracadabra";}
            -ReturnNode (void)			// return"abracadabra";
                -StringLiteralNode (string)			// "abracadabra"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"abracadabra";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"abracadabra";}
            -ReturnNode (void)			// return"abracadabra";
                -StringLiteralNode (string)			// "abracadabra"
    -ClassDefinitionNode (void)			// classMo{intang;intsec;stringworld;}
        -DeclarationNode (void)			// intang;
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -DeclaratorListNode (void)			// ang
                -InitDeclaratorNode (void)			// ang
                    -DeclaratorNode (void)			// ang
        -DeclarationNode (void)			// intsec;
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -DeclaratorListNode (void)			// sec
                -InitDeclaratorNode (void)			// sec
                    -DeclaratorNode (void)			// sec
        -DeclarationNode (void)			// stringworld;
            -TypeNode (void)			// string
                -TypeAttributeNode (void)			// string
            -DeclaratorListNode (void)			// world
                -InitDeclaratorNode (void)			// world
                    -DeclaratorNode (void)			// world
    -ClassDefinitionNode (void)			// classRedBoy{intnum;}
        -DeclarationNode (void)			// intnum;
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -DeclaratorListNode (void)			// num
                -InitDeclaratorNode (void)			// num
                    -DeclaratorNode (void)			// num
    -DeclarationNode (void)			// intage=1000000;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// age=1000000
            -InitDeclaratorNode (void)			// age=1000000
                -DeclaratorNode (void)			// age
                -ConstantNode (int)			// 1000000
    -DeclarationNode (void)			// stringeng="Four score and seven years ago";
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -DeclaratorListNode (void)			// eng="Four score and seven years ago"
            -InitDeclaratorNode (void)			// eng="Four score and seven years ago"
                -DeclaratorNode (void)			// eng
                -StringLiteralNode (string)			// "Four score and seven years ago"
    -FuncDefinitionNode (void)			// inttravel(){inta=10000000;returna;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// travel()
            -DeclaratorNode (void)			// travel
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inta=10000000;returna;}
            -DeclarationNode (void)			// inta=10000000;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// a=10000000
                    -InitDeclaratorNode (void)			// a=10000000
                        -DeclaratorNode (void)			// a
                        -ConstantNode (int)			// 10000000
            -ReturnNode (void)			// returna;
                -IdentifierNode (int)			// a
    -FuncDefinitionNode (void)			// voidjournalists(stringlocation){if(location=="HongKong"){print("naive!\n");print("fast!\n");println("too young\\too simple.");}}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// journalists(stringlocation)
            -DeclaratorNode (void)			// journalists
            -ArgumentTypeListNode (void)			// stringlocation
                -ArgumentDeclarationNode (void)			// stringlocation
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// location
        -BlockNode (void)			// {if(location=="HongKong"){print("naive!\n");print("fast!\n");println("too young\\too simple.");}}
            -IfNode (void)			// if(location=="HongKong"){print("naive!\n");print("fast!\n");println("too young\\too simple.");}
                -EqualNode (bool)			// location=="HongKong"
                    -IdentifierNode (string)			// location
                    -StringLiteralNode (string)			// "HongKong"
                -BlockNode (void)			// {print("naive!\n");print("fast!\n");println("too young\\too simple.");}
                    -StatementNode (void)			// print("naive!\n");
                        -ParenthesisOpNode (void)			// print("naive!\n")
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// "naive!\n"
                                -StringLiteralNode (string)			// "naive!\n"
                    -StatementNode (void)			// print("fast!\n");
                        -ParenthesisOpNode (void)			// print("fast!\n")
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// "fast!\n"
                                -StringLiteralNode (string)			// "fast!\n"
                    -StatementNode (void)			// println("too young\\too simple.");
                        -ParenthesisOpNode (void)			// println("too young\\too simple.")
                            -IdentifierNode (BaseType)			// println
                            -ArgumentListNode (void)			// "too young\\too simple."
                                -StringLiteralNode (string)			// "too young\\too simple."
    -FuncDefinitionNode (void)			// Moxu(Mom0,RedBoyboys){inti;for(i=0;i<boys.num;++i){m0.sec++;}returnm0;}
        -TypeNode (void)			// Mo
            -TypeAttributeNode (void)			// Mo
        -FuncDeclaratorNode (void)			// xu(Mom0,RedBoyboys)
            -DeclaratorNode (void)			// xu
            -ArgumentTypeListNode (void)			// Mom0,RedBoyboys
                -ArgumentDeclarationNode (void)			// Mom0
                    -TypeNode (void)			// Mo
                        -TypeAttributeNode (void)			// Mo
                    -DeclaratorNode (void)			// m0
                -ArgumentDeclarationNode (void)			// RedBoyboys
                    -TypeNode (void)			// RedBoy
                        -TypeAttributeNode (void)			// RedBoy
                    -DeclaratorNode (void)			// boys
        -BlockNode (void)			// {inti;for(i=0;i<boys.num;++i){m0.sec++;}returnm0;}
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=0;i<boys.num;++i){m0.sec++;}
                -ForConditionNode (void)			// i=0;i<boys.num;++i
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<boys.num
                        -IdentifierNode (int)			// i
                        -DotOpNode (int)			// boys.num
                            -IdentifierNode (RedBoy)			// boys
                    -PrefixAddNode (int)			// ++i
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {m0.sec++;}
                    -StatementNode (void)			// m0.sec++;
                        -PostfixAddNode (int)			// m0.sec++
                            -DotOpNode (int)			// m0.sec
                                -IdentifierNode (Mo)			// m0
            -ReturnNode (void)			// returnm0;
                -IdentifierNode (Mo)			// m0
    -FuncDefinitionNode (void)			// intmain(){inta;intb;intc;intyear=2016;stringtell="wukefengggao\n";;boolzici=true;boolnozici=false;RedBoyboy=newRedBoy;RedBoy[]boys=newRedBoy[3];RedBoy[][][]boyss=newRedBoy[1][2][3];Mohaha=newMo;false;true;null;123;"Four score and seven years ago\n\\\"";a=1;b=2;a+b;a-b;a*b;a/b;a%b;a<1;a>2;a==b;a!=b;a<=b;a>=b;boolg;boolh;g&&h;g||h;!g;a<<1;a>>2;~a;a|b;a^b;a&b;++a;b++;boy.num;boys[2].num;boyss[1][2][3].num;xu(newMo,null);inti=0;for(i=0;i<3;++i){xu(haha,boys[i]);}for(i=0;i<3;++i)xu(haha,boys[i]);for(;;);i=0;while(i<year)print(toString(i));while(true);if(i<year){print(toString(travel()));}else{print("naive!\n");}if(i<year)print(toString(travel()));elseif(i==year)print("naive!\n");elseprint("too young!\\");i=0;while(true){if(i==year)break;++i;}i=0;while(true){if(i<year){++i;continue;}break;}stringtmpstr="test";print(toString(tmpstr.length()));print(tmpstr.substring(1,2));return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inta;intb;intc;intyear=2016;stringtell="wukefengggao\n";;boolzici=true;boolnozici=false;RedBoyboy=newRedBoy;RedBoy[]boys=newRedBoy[3];RedBoy[][][]boyss=newRedBoy[1][2][3];Mohaha=newMo;false;true;null;123;"Four score and seven years ago\n\\\"";a=1;b=2;a+b;a-b;a*b;a/b;a%b;a<1;a>2;a==b;a!=b;a<=b;a>=b;boolg;boolh;g&&h;g||h;!g;a<<1;a>>2;~a;a|b;a^b;a&b;++a;b++;boy.num;boys[2].num;boyss[1][2][3].num;xu(newMo,null);inti=0;for(i=0;i<3;++i){xu(haha,boys[i]);}for(i=0;i<3;++i)xu(haha,boys[i]);for(;;);i=0;while(i<year)print(toString(i));while(true);if(i<year){print(toString(travel()));}else{print("naive!\n");}if(i<year)print(toString(travel()));elseif(i==year)print("naive!\n");elseprint("too young!\\");i=0;while(true){if(i==year)break;++i;}i=0;while(true){if(i<year){++i;continue;}break;}stringtmpstr="test";print(toString(tmpstr.length()));print(tmpstr.substring(1,2));return0;}
            -DeclarationNode (void)			// inta;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// a
                    -InitDeclaratorNode (void)			// a
                        -DeclaratorNode (void)			// a
            -DeclarationNode (void)			// intb;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// b
                    -InitDeclaratorNode (void)			// b
                        -DeclaratorNode (void)			// b
            -DeclarationNode (void)			// intc;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// c
                    -InitDeclaratorNode (void)			// c
                        -DeclaratorNode (void)			// c
            -DeclarationNode (void)			// intyear=2016;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// year=2016
                    -InitDeclaratorNode (void)			// year=2016
                        -DeclaratorNode (void)			// year
                        -ConstantNode (int)			// 2016
            -DeclarationNode (void)			// stringtell="wukefengggao\n";
                -TypeNode (void)			// string
                    -TypeAttributeNode (void)			// string
                -DeclaratorListNode (void)			// tell="wukefengggao\n"
                    -InitDeclaratorNode (void)			// tell="wukefengggao\n"
                        -DeclaratorNode (void)			// tell
                        -StringLiteralNode (string)			// "wukefengggao\n"
            -StatementNode (void)			// ;
            -DeclarationNode (void)			// boolzici=true;
                -TypeNode (void)			// bool
                    -TypeAttributeNode (void)			// bool
                -DeclaratorListNode (void)			// zici=true
                    -InitDeclaratorNode (void)			// zici=true
                        -DeclaratorNode (void)			// zici
                        -ConstantNode (bool)			// true
            -DeclarationNode (void)			// boolnozici=false;
                -TypeNode (void)			// bool
                    -TypeAttributeNode (void)			// bool
                -DeclaratorListNode (void)			// nozici=false
                    -InitDeclaratorNode (void)			// nozici=false
                        -DeclaratorNode (void)			// nozici
                        -ConstantNode (bool)			// false
            -DeclarationNode (void)			// RedBoyboy=newRedBoy;
                -TypeNode (void)			// RedBoy
                    -TypeAttributeNode (void)			// RedBoy
                -DeclaratorListNode (void)			// boy=newRedBoy
                    -InitDeclaratorNode (void)			// boy=newRedBoy
                        -DeclaratorNode (void)			// boy
                        -NewNode (RedBoy)			// newRedBoy
                            -TypeNode (void)			// RedBoy
                                -TypeAttributeNode (void)			// RedBoy
                            -ArgumentTypeListNode (void)
            -DeclarationNode (void)			// RedBoy[]boys=newRedBoy[3];
                -TypeNode (void)			// RedBoy[]
                    -TypeAttributeNode (void)			// RedBoy[]
                -DeclaratorListNode (void)			// boys=newRedBoy[3]
                    -InitDeclaratorNode (void)			// boys=newRedBoy[3]
                        -DeclaratorNode (void)			// boys
                        -NewNode (RedBoy[])			// newRedBoy[3]
                            -TypeNode (void)			// RedBoy[3]
                                -TypeAttributeNode (void)			// RedBoy[3]
                            -ArgumentTypeListNode (void)
            -DeclarationNode (void)			// RedBoy[][][]boyss=newRedBoy[1][2][3];
                -TypeNode (void)			// RedBoy[][][]
                    -TypeAttributeNode (void)			// RedBoy[][][]
                -DeclaratorListNode (void)			// boyss=newRedBoy[1][2][3]
                    -InitDeclaratorNode (void)			// boyss=newRedBoy[1][2][3]
                        -DeclaratorNode (void)			// boyss
                        -NewNode (RedBoy[][][])			// newRedBoy[1][2][3]
                            -TypeNode (void)			// RedBoy[1][2][3]
                                -TypeAttributeNode (void)			// RedBoy[1][2][3]
                            -ArgumentTypeListNode (void)
            -DeclarationNode (void)			// Mohaha=newMo;
                -TypeNode (void)			// Mo
                    -TypeAttributeNode (void)			// Mo
                -DeclaratorListNode (void)			// haha=newMo
                    -InitDeclaratorNode (void)			// haha=newMo
                        -DeclaratorNode (void)			// haha
                        -NewNode (Mo)			// newMo
                            -TypeNode (void)			// Mo
                                -TypeAttributeNode (void)			// Mo
                            -ArgumentTypeListNode (void)
            -StatementNode (void)			// false;
                -ConstantNode (bool)			// false
            -StatementNode (void)			// true;
                -ConstantNode (bool)			// true
            -StatementNode (void)			// null;
                -ConstantNode (null)			// null
            -StatementNode (void)			// 123;
                -ConstantNode (int)			// 123
            -StatementNode (void)			// "Four score and seven years ago\n\\\"";
                -StringLiteralNode (string)			// "Four score and seven years ago\n\\\""
            -StatementNode (void)			// a=1;
                -AssignNode (void)			// a=1
                    -IdentifierNode (int)			// a
                    -ConstantNode (int)			// 1
            -StatementNode (void)			// b=2;
                -AssignNode (void)			// b=2
                    -IdentifierNode (int)			// b
                    -ConstantNode (int)			// 2
            -StatementNode (void)			// a+b;
                -AddNode (int)			// a+b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// a-b;
                -SubNode (int)			// a-b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// a*b;
                -MultiplyNode (int)			// a*b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// a/b;
                -DivideNode (int)			// a/b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// a%b;
                -ModuloNode (int)			// a%b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// a<1;
                -LessThanNode (bool)			// a<1
                    -IdentifierNode (int)			// a
                    -ConstantNode (int)			// 1
            -StatementNode (void)			// a>2;
                -GreaterThanNode (bool)			// a>2
                    -IdentifierNode (int)			// a
                    -ConstantNode (int)			// 2
            -StatementNode (void)			// a==b;
                -EqualNode (bool)			// a==b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// a!=b;
                -InequalNode (bool)			// a!=b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// a<=b;
                -LessOrEqualThanNode (bool)			// a<=b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// a>=b;
                -GreaterOrEqualThanNode (bool)			// a>=b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -DeclarationNode (void)			// boolg;
                -TypeNode (void)			// bool
                    -TypeAttributeNode (void)			// bool
                -DeclaratorListNode (void)			// g
                    -InitDeclaratorNode (void)			// g
                        -DeclaratorNode (void)			// g
            -DeclarationNode (void)			// boolh;
                -TypeNode (void)			// bool
                    -TypeAttributeNode (void)			// bool
                -DeclaratorListNode (void)			// h
                    -InitDeclaratorNode (void)			// h
                        -DeclaratorNode (void)			// h
            -StatementNode (void)			// g&&h;
                -LogicalAndNode (bool)			// g&&h
                    -IdentifierNode (bool)			// g
                    -IdentifierNode (bool)			// h
            -StatementNode (void)			// g||h;
                -LogicalOrNode (bool)			// g||h
                    -IdentifierNode (bool)			// g
                    -IdentifierNode (bool)			// h
            -StatementNode (void)			// !g;
                -NotNode (bool)			// !g
                    -IdentifierNode (bool)			// g
            -StatementNode (void)			// a<<1;
                -ShiftLeftNode (int)			// a<<1
                    -IdentifierNode (int)			// a
                    -ConstantNode (int)			// 1
            -StatementNode (void)			// a>>2;
                -ShiftRightNode (int)			// a>>2
                    -IdentifierNode (int)			// a
                    -ConstantNode (int)			// 2
            -StatementNode (void)			// ~a;
                -BitwiseNotNode (int)			// ~a
                    -IdentifierNode (int)			// a
            -StatementNode (void)			// a|b;
                -OrNode (int)			// a|b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// a^b;
                -XorNode (int)			// a^b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// a&b;
                -AndNode (int)			// a&b
                    -IdentifierNode (int)			// a
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// ++a;
                -PrefixAddNode (int)			// ++a
                    -IdentifierNode (int)			// a
            -StatementNode (void)			// b++;
                -PostfixAddNode (int)			// b++
                    -IdentifierNode (int)			// b
            -StatementNode (void)			// boy.num;
                -DotOpNode (int)			// boy.num
                    -IdentifierNode (RedBoy)			// boy
            -StatementNode (void)			// boys[2].num;
                -DotOpNode (int)			// boys[2].num
                    -SubscriptOpNode (RedBoy)			// boys[2]
                        -IdentifierNode (RedBoy[])			// boys
                        -ConstantNode (int)			// 2
            -StatementNode (void)			// boyss[1][2][3].num;
                -DotOpNode (int)			// boyss[1][2][3].num
                    -SubscriptOpNode (RedBoy)			// boyss[1][2][3]
                        -SubscriptOpNode (RedBoy[])			// boyss[1][2]
                            -SubscriptOpNode (RedBoy[][])			// boyss[1]
                                -IdentifierNode (RedBoy[][][])			// boyss
                                -ConstantNode (int)			// 1
                            -ConstantNode (int)			// 2
                        -ConstantNode (int)			// 3
            -StatementNode (void)			// xu(newMo,null);
                -ParenthesisOpNode (Mo)			// xu(newMo,null)
                    -IdentifierNode (BaseType)			// xu
                    -ArgumentListNode (void)			// newMo,null
                        -NewNode (Mo)			// newMo
                            -TypeNode (void)			// Mo
                                -TypeAttributeNode (void)			// Mo
                            -ArgumentTypeListNode (void)
                        -ConstantNode (null)			// null
            -DeclarationNode (void)			// inti=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i=0
                    -InitDeclaratorNode (void)			// i=0
                        -DeclaratorNode (void)			// i
                        -ConstantNode (int)			// 0
            -ForNode (void)			// for(i=0;i<3;++i){xu(haha,boys[i]);}
                -ForConditionNode (void)			// i=0;i<3;++i
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<3
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 3
                    -PrefixAddNode (int)			// ++i
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {xu(haha,boys[i]);}
                    -StatementNode (void)			// xu(haha,boys[i]);
                        -ParenthesisOpNode (Mo)			// xu(haha,boys[i])
                            -IdentifierNode (BaseType)			// xu
                            -ArgumentListNode (void)			// haha,boys[i]
                                -IdentifierNode (Mo)			// haha
                                -SubscriptOpNode (RedBoy)			// boys[i]
                                    -IdentifierNode (RedBoy[])			// boys
                                    -IdentifierNode (int)			// i
            -ForNode (void)			// for(i=0;i<3;++i)xu(haha,boys[i]);
                -ForConditionNode (void)			// i=0;i<3;++i
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<3
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 3
                    -PrefixAddNode (int)			// ++i
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// xu(haha,boys[i]);
                    -ParenthesisOpNode (Mo)			// xu(haha,boys[i])
                        -IdentifierNode (BaseType)			// xu
                        -ArgumentListNode (void)			// haha,boys[i]
                            -IdentifierNode (Mo)			// haha
                            -SubscriptOpNode (RedBoy)			// boys[i]
                                -IdentifierNode (RedBoy[])			// boys
                                -IdentifierNode (int)			// i
            -ForNode (void)			// for(;;);
                -ForConditionNode (void)			// ;;
                    -ExpressionNode (void)
                    -ConstantNode (bool)
                    -ExpressionNode (void)
                -StatementNode (void)			// ;
            -StatementNode (void)			// i=0;
                -AssignNode (void)			// i=0
                    -IdentifierNode (int)			// i
                    -ConstantNode (int)			// 0
            -WhileNode (void)			// while(i<year)print(toString(i));
                -LessThanNode (bool)			// i<year
                    -IdentifierNode (int)			// i
                    -IdentifierNode (int)			// year
                -StatementNode (void)			// print(toString(i));
                    -ParenthesisOpNode (void)			// print(toString(i))
                        -IdentifierNode (BaseType)			// print
                        -ArgumentListNode (void)			// toString(i)
                            -ParenthesisOpNode (string)			// toString(i)
                                -IdentifierNode (BaseType)			// toString
                                -ArgumentListNode (void)			// i
                                    -IdentifierNode (int)			// i
            -WhileNode (void)			// while(true);
                -ConstantNode (bool)			// true
                -StatementNode (void)			// ;
            -IfNode (void)			// if(i<year){print(toString(travel()));}else{print("naive!\n");}
                -LessThanNode (bool)			// i<year
                    -IdentifierNode (int)			// i
                    -IdentifierNode (int)			// year
                -BlockNode (void)			// {print(toString(travel()));}
                    -StatementNode (void)			// print(toString(travel()));
                        -ParenthesisOpNode (void)			// print(toString(travel()))
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// toString(travel())
                                -ParenthesisOpNode (string)			// toString(travel())
                                    -IdentifierNode (BaseType)			// toString
                                    -ArgumentListNode (void)			// travel()
                                        -ParenthesisOpNode (int)			// travel()
                                            -IdentifierNode (BaseType)			// travel
                                            -ArgumentListNode (void)
                -BlockNode (void)			// {print("naive!\n");}
                    -StatementNode (void)			// print("naive!\n");
                        -ParenthesisOpNode (void)			// print("naive!\n")
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// "naive!\n"
                                -StringLiteralNode (string)			// "naive!\n"
            -IfNode (void)			// if(i<year)print(toString(travel()));elseif(i==year)print("naive!\n");elseprint("too young!\\");
                -LessThanNode (bool)			// i<year
                    -IdentifierNode (int)			// i
                    -IdentifierNode (int)			// year
                -StatementNode (void)			// print(toString(travel()));
                    -ParenthesisOpNode (void)			// print(toString(travel()))
                        -IdentifierNode (BaseType)			// print
                        -ArgumentListNode (void)			// toString(travel())
                            -ParenthesisOpNode (string)			// toString(travel())
                                -IdentifierNode (BaseType)			// toString
                                -ArgumentListNode (void)			// travel()
                                    -ParenthesisOpNode (int)			// travel()
                                        -IdentifierNode (BaseType)			// travel
                                        -ArgumentListNode (void)
                -IfNode (void)			// if(i==year)print("naive!\n");elseprint("too young!\\");
                    -EqualNode (bool)			// i==year
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// year
                    -StatementNode (void)			// print("naive!\n");
                        -ParenthesisOpNode (void)			// print("naive!\n")
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// "naive!\n"
                                -StringLiteralNode (string)			// "naive!\n"
                    -StatementNode (void)			// print("too young!\\");
                        -ParenthesisOpNode (void)			// print("too young!\\")
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// "too young!\\"
                                -StringLiteralNode (string)			// "too young!\\"
            -StatementNode (void)			// i=0;
                -AssignNode (void)			// i=0
                    -IdentifierNode (int)			// i
                    -ConstantNode (int)			// 0
            -WhileNode (void)			// while(true){if(i==year)break;++i;}
                -ConstantNode (bool)			// true
                -BlockNode (void)			// {if(i==year)break;++i;}
                    -IfNode (void)			// if(i==year)break;
                        -EqualNode (bool)			// i==year
                            -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// year
                        -BreakNode (void)			// break;
                    -StatementNode (void)			// ++i;
                        -PrefixAddNode (int)			// ++i
                            -IdentifierNode (int)			// i
            -StatementNode (void)			// i=0;
                -AssignNode (void)			// i=0
                    -IdentifierNode (int)			// i
                    -ConstantNode (int)			// 0
            -WhileNode (void)			// while(true){if(i<year){++i;continue;}break;}
                -ConstantNode (bool)			// true
                -BlockNode (void)			// {if(i<year){++i;continue;}break;}
                    -IfNode (void)			// if(i<year){++i;continue;}
                        -LessThanNode (bool)			// i<year
                            -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// year
                        -BlockNode (void)			// {++i;continue;}
                            -StatementNode (void)			// ++i;
                                -PrefixAddNode (int)			// ++i
                                    -IdentifierNode (int)			// i
                            -ContinueNode (void)			// continue;
                    -BreakNode (void)			// break;
            -DeclarationNode (void)			// stringtmpstr="test";
                -TypeNode (void)			// string
                    -TypeAttributeNode (void)			// string
                -DeclaratorListNode (void)			// tmpstr="test"
                    -InitDeclaratorNode (void)			// tmpstr="test"
                        -DeclaratorNode (void)			// tmpstr
                        -StringLiteralNode (string)			// "test"
            -StatementNode (void)			// print(toString(tmpstr.length()));
                -ParenthesisOpNode (void)			// print(toString(tmpstr.length()))
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// toString(tmpstr.length())
                        -ParenthesisOpNode (string)			// toString(tmpstr.length())
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// tmpstr.length()
                                -ParenthesisOpNode (int)			// tmpstr.length()
                                    -DotOpNode (BaseType)			// tmpstr.length
                                        -IdentifierNode (string)			// tmpstr
                                    -ArgumentListNode (void)
            -StatementNode (void)			// print(tmpstr.substring(1,2));
                -ParenthesisOpNode (void)			// print(tmpstr.substring(1,2))
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// tmpstr.substring(1,2)
                        -ParenthesisOpNode (string)			// tmpstr.substring(1,2)
                            -DotOpNode (BaseType)			// tmpstr.substring
                                -IdentifierNode (string)			// tmpstr
                            -ArgumentListNode (void)			// 1,2
                                -ConstantNode (int)			// 1
                                -ConstantNode (int)			// 2
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
