-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}intN;intM=0;bool[]check;intmain(){N=getInt();check=newbool[N+5];inti=0;while(i<=N)check[i++]=true;int[]phi=newint[N+5];int[]P=newint[N+5];phi[1]=1;for(i=2;;++i){if(i>N)break;if(check[i]){P[++M]=i;phi[i]=i-1;}intk=i;inti;for(i=1;i<=M&&(k*P[i]<=N);i++){inttmp=k*P[i];if(tmp>N)continue;check[tmp]=false;if(k%P[i]==0){phi[tmp]=phi[k]*P[i];break;}else{phi[k*P[i]]=phi[k]*(P[i]-1);}}println(toString(phi[k]));}return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -DeclarationNode (void)			// intN;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// N
            -InitDeclaratorNode (void)			// N
                -DeclaratorNode (void)			// N
    -DeclarationNode (void)			// intM=0;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// M=0
            -InitDeclaratorNode (void)			// M=0
                -DeclaratorNode (void)			// M
                -ConstantNode (int)			// 0
    -DeclarationNode (void)			// bool[]check;
        -TypeNode (void)			// bool[]
            -TypeAttributeNode (void)			// bool[]
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// check
            -InitDeclaratorNode (void)			// check
                -DeclaratorNode (void)			// check
    -FuncDefinitionNode (void)			// intmain(){N=getInt();check=newbool[N+5];inti=0;while(i<=N)check[i++]=true;int[]phi=newint[N+5];int[]P=newint[N+5];phi[1]=1;for(i=2;;++i){if(i>N)break;if(check[i]){P[++M]=i;phi[i]=i-1;}intk=i;inti;for(i=1;i<=M&&(k*P[i]<=N);i++){inttmp=k*P[i];if(tmp>N)continue;check[tmp]=false;if(k%P[i]==0){phi[tmp]=phi[k]*P[i];break;}else{phi[k*P[i]]=phi[k]*(P[i]-1);}}println(toString(phi[k]));}return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {N=getInt();check=newbool[N+5];inti=0;while(i<=N)check[i++]=true;int[]phi=newint[N+5];int[]P=newint[N+5];phi[1]=1;for(i=2;;++i){if(i>N)break;if(check[i]){P[++M]=i;phi[i]=i-1;}intk=i;inti;for(i=1;i<=M&&(k*P[i]<=N);i++){inttmp=k*P[i];if(tmp>N)continue;check[tmp]=false;if(k%P[i]==0){phi[tmp]=phi[k]*P[i];break;}else{phi[k*P[i]]=phi[k]*(P[i]-1);}}println(toString(phi[k]));}return0;}
            -StatementNode (void)			// N=getInt();
                -AssignNode (void)			// N=getInt()
                    -IdentifierNode (int)			// N
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
            -StatementNode (void)			// check=newbool[N+5];
                -AssignNode (void)			// check=newbool[N+5]
                    -IdentifierNode (bool[])			// check
                    -NewNode (bool[])			// newbool[N+5]
                        -TypeNode (void)			// bool[N+5]
                            -TypeAttributeNode (void)			// bool[N+5]
                                -AddNode (int)			// N+5
                                    -IdentifierNode (int)			// N
                                    -ConstantNode (int)			// 5
                        -ArgumentTypeListNode (void)
            -DeclarationNode (void)			// inti=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i=0
                    -InitDeclaratorNode (void)			// i=0
                        -DeclaratorNode (void)			// i
                        -ConstantNode (int)			// 0
            -WhileNode (void)			// while(i<=N)check[i++]=true;
                -LessOrEqualThanNode (bool)			// i<=N
                    -IdentifierNode (int)			// i
                    -IdentifierNode (int)			// N
                -StatementNode (void)			// check[i++]=true;
                    -AssignNode (void)			// check[i++]=true
                        -SubscriptOpNode (bool)			// check[i++]
                            -IdentifierNode (bool[])			// check
                            -PostfixAddNode (int)			// i++
                                -IdentifierNode (int)			// i
                        -ConstantNode (bool)			// true
            -DeclarationNode (void)			// int[]phi=newint[N+5];
                -TypeNode (void)			// int[]
                    -TypeAttributeNode (void)			// int[]
                        -EmptyExpressionNode (void)
                -DeclaratorListNode (void)			// phi=newint[N+5]
                    -InitDeclaratorNode (void)			// phi=newint[N+5]
                        -DeclaratorNode (void)			// phi
                        -NewNode (int[])			// newint[N+5]
                            -TypeNode (void)			// int[N+5]
                                -TypeAttributeNode (void)			// int[N+5]
                                    -AddNode (int)			// N+5
                                        -IdentifierNode (int)			// N
                                        -ConstantNode (int)			// 5
                            -ArgumentTypeListNode (void)
            -DeclarationNode (void)			// int[]P=newint[N+5];
                -TypeNode (void)			// int[]
                    -TypeAttributeNode (void)			// int[]
                        -EmptyExpressionNode (void)
                -DeclaratorListNode (void)			// P=newint[N+5]
                    -InitDeclaratorNode (void)			// P=newint[N+5]
                        -DeclaratorNode (void)			// P
                        -NewNode (int[])			// newint[N+5]
                            -TypeNode (void)			// int[N+5]
                                -TypeAttributeNode (void)			// int[N+5]
                                    -AddNode (int)			// N+5
                                        -IdentifierNode (int)			// N
                                        -ConstantNode (int)			// 5
                            -ArgumentTypeListNode (void)
            -StatementNode (void)			// phi[1]=1;
                -AssignNode (void)			// phi[1]=1
                    -SubscriptOpNode (int)			// phi[1]
                        -IdentifierNode (int[])			// phi
                        -ConstantNode (int)			// 1
                    -ConstantNode (int)			// 1
            -ForNode (void)			// for(i=2;;++i){if(i>N)break;if(check[i]){P[++M]=i;phi[i]=i-1;}intk=i;inti;for(i=1;i<=M&&(k*P[i]<=N);i++){inttmp=k*P[i];if(tmp>N)continue;check[tmp]=false;if(k%P[i]==0){phi[tmp]=phi[k]*P[i];break;}else{phi[k*P[i]]=phi[k]*(P[i]-1);}}println(toString(phi[k]));}
                -ForConditionNode (void)			// i=2;;++i
                    -AssignNode (void)			// i=2
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 2
                    -ConstantNode (bool)
                    -PrefixAddNode (int)			// ++i
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {if(i>N)break;if(check[i]){P[++M]=i;phi[i]=i-1;}intk=i;inti;for(i=1;i<=M&&(k*P[i]<=N);i++){inttmp=k*P[i];if(tmp>N)continue;check[tmp]=false;if(k%P[i]==0){phi[tmp]=phi[k]*P[i];break;}else{phi[k*P[i]]=phi[k]*(P[i]-1);}}println(toString(phi[k]));}
                    -IfNode (void)			// if(i>N)break;
                        -GreaterThanNode (bool)			// i>N
                            -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// N
                        -BreakNode (void)			// break;
                    -IfNode (void)			// if(check[i]){P[++M]=i;phi[i]=i-1;}
                        -SubscriptOpNode (bool)			// check[i]
                            -IdentifierNode (bool[])			// check
                            -IdentifierNode (int)			// i
                        -BlockNode (void)			// {P[++M]=i;phi[i]=i-1;}
                            -StatementNode (void)			// P[++M]=i;
                                -AssignNode (void)			// P[++M]=i
                                    -SubscriptOpNode (int)			// P[++M]
                                        -IdentifierNode (int[])			// P
                                        -PrefixAddNode (int)			// ++M
                                            -IdentifierNode (int)			// M
                                    -IdentifierNode (int)			// i
                            -StatementNode (void)			// phi[i]=i-1;
                                -AssignNode (void)			// phi[i]=i-1
                                    -SubscriptOpNode (int)			// phi[i]
                                        -IdentifierNode (int[])			// phi
                                        -IdentifierNode (int)			// i
                                    -SubNode (int)			// i-1
                                        -IdentifierNode (int)			// i
                                        -ConstantNode (int)			// 1
                    -DeclarationNode (void)			// intk=i;
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// k=i
                            -InitDeclaratorNode (void)			// k=i
                                -DeclaratorNode (void)			// k
                                -IdentifierNode (int)			// i
                    -DeclarationNode (void)			// inti;
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// i
                            -InitDeclaratorNode (void)			// i
                                -DeclaratorNode (void)			// i
                    -ForNode (void)			// for(i=1;i<=M&&(k*P[i]<=N);i++){inttmp=k*P[i];if(tmp>N)continue;check[tmp]=false;if(k%P[i]==0){phi[tmp]=phi[k]*P[i];break;}else{phi[k*P[i]]=phi[k]*(P[i]-1);}}
                        -ForConditionNode (void)			// i=1;i<=M&&(k*P[i]<=N);i++
                            -AssignNode (void)			// i=1
                                -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 1
                            -LogicalAndNode (bool)			// i<=M&&(k*P[i]<=N)
                                -LessOrEqualThanNode (bool)			// i<=M
                                    -IdentifierNode (int)			// i
                                    -IdentifierNode (int)			// M
                                -LessOrEqualThanNode (bool)			// (k*P[i]<=N)
                                    -MultiplyNode (int)			// k*P[i]
                                        -IdentifierNode (int)			// k
                                        -SubscriptOpNode (int)			// P[i]
                                            -IdentifierNode (int[])			// P
                                            -IdentifierNode (int)			// i
                                    -IdentifierNode (int)			// N
                            -PostfixAddNode (int)			// i++
                                -IdentifierNode (int)			// i
                        -BlockNode (void)			// {inttmp=k*P[i];if(tmp>N)continue;check[tmp]=false;if(k%P[i]==0){phi[tmp]=phi[k]*P[i];break;}else{phi[k*P[i]]=phi[k]*(P[i]-1);}}
                            -DeclarationNode (void)			// inttmp=k*P[i];
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// tmp=k*P[i]
                                    -InitDeclaratorNode (void)			// tmp=k*P[i]
                                        -DeclaratorNode (void)			// tmp
                                        -MultiplyNode (int)			// k*P[i]
                                            -IdentifierNode (int)			// k
                                            -SubscriptOpNode (int)			// P[i]
                                                -IdentifierNode (int[])			// P
                                                -IdentifierNode (int)			// i
                            -IfNode (void)			// if(tmp>N)continue;
                                -GreaterThanNode (bool)			// tmp>N
                                    -IdentifierNode (int)			// tmp
                                    -IdentifierNode (int)			// N
                                -ContinueNode (void)			// continue;
                            -StatementNode (void)			// check[tmp]=false;
                                -AssignNode (void)			// check[tmp]=false
                                    -SubscriptOpNode (bool)			// check[tmp]
                                        -IdentifierNode (bool[])			// check
                                        -IdentifierNode (int)			// tmp
                                    -ConstantNode (bool)			// false
                            -IfNode (void)			// if(k%P[i]==0){phi[tmp]=phi[k]*P[i];break;}else{phi[k*P[i]]=phi[k]*(P[i]-1);}
                                -EqualNode (bool)			// k%P[i]==0
                                    -ModuloNode (int)			// k%P[i]
                                        -IdentifierNode (int)			// k
                                        -SubscriptOpNode (int)			// P[i]
                                            -IdentifierNode (int[])			// P
                                            -IdentifierNode (int)			// i
                                    -ConstantNode (int)			// 0
                                -BlockNode (void)			// {phi[tmp]=phi[k]*P[i];break;}
                                    -StatementNode (void)			// phi[tmp]=phi[k]*P[i];
                                        -AssignNode (void)			// phi[tmp]=phi[k]*P[i]
                                            -SubscriptOpNode (int)			// phi[tmp]
                                                -IdentifierNode (int[])			// phi
                                                -IdentifierNode (int)			// tmp
                                            -MultiplyNode (int)			// phi[k]*P[i]
                                                -SubscriptOpNode (int)			// phi[k]
                                                    -IdentifierNode (int[])			// phi
                                                    -IdentifierNode (int)			// k
                                                -SubscriptOpNode (int)			// P[i]
                                                    -IdentifierNode (int[])			// P
                                                    -IdentifierNode (int)			// i
                                    -BreakNode (void)			// break;
                                -BlockNode (void)			// {phi[k*P[i]]=phi[k]*(P[i]-1);}
                                    -StatementNode (void)			// phi[k*P[i]]=phi[k]*(P[i]-1);
                                        -AssignNode (void)			// phi[k*P[i]]=phi[k]*(P[i]-1)
                                            -SubscriptOpNode (int)			// phi[k*P[i]]
                                                -IdentifierNode (int[])			// phi
                                                -MultiplyNode (int)			// k*P[i]
                                                    -IdentifierNode (int)			// k
                                                    -SubscriptOpNode (int)			// P[i]
                                                        -IdentifierNode (int[])			// P
                                                        -IdentifierNode (int)			// i
                                            -MultiplyNode (int)			// phi[k]*(P[i]-1)
                                                -SubscriptOpNode (int)			// phi[k]
                                                    -IdentifierNode (int[])			// phi
                                                    -IdentifierNode (int)			// k
                                                -SubNode (int)			// (P[i]-1)
                                                    -SubscriptOpNode (int)			// P[i]
                                                        -IdentifierNode (int[])			// P
                                                        -IdentifierNode (int)			// i
                                                    -ConstantNode (int)			// 1
                    -StatementNode (void)			// println(toString(phi[k]));
                        -ParenthesisOpNode (void)			// println(toString(phi[k]))
                            -IdentifierNode (BaseType)			// println
                            -ArgumentListNode (void)			// toString(phi[k])
                                -ParenthesisOpNode (string)			// toString(phi[k])
                                    -IdentifierNode (BaseType)			// toString
                                    -ArgumentListNode (void)			// phi[k]
                                        -SubscriptOpNode (int)			// phi[k]
                                            -IdentifierNode (int[])			// phi
                                            -IdentifierNode (int)			// k
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
