-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}inttak(intx,inty,intz){if(y<x){return1+tak(tak(x-1,y,z),tak(y-1,z,x),tak(z-1,x,y));}else{returnz;}}intmain(){returntak(18,12,6);}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// inttak(intx,inty,intz){if(y<x){return1+tak(tak(x-1,y,z),tak(y-1,z,x),tak(z-1,x,y));}else{returnz;}}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// tak(intx,inty,intz)
            -DeclaratorNode (void)			// tak
            -ArgumentTypeListNode (void)			// intx,inty,intz
                -ArgumentDeclarationNode (void)			// intx
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// x
                -ArgumentDeclarationNode (void)			// inty
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// y
                -ArgumentDeclarationNode (void)			// intz
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// z
        -BlockNode (void)			// {if(y<x){return1+tak(tak(x-1,y,z),tak(y-1,z,x),tak(z-1,x,y));}else{returnz;}}
            -IfNode (void)			// if(y<x){return1+tak(tak(x-1,y,z),tak(y-1,z,x),tak(z-1,x,y));}else{returnz;}
                -LessThanNode (bool)			// y<x
                    -IdentifierNode (int)			// y
                    -IdentifierNode (int)			// x
                -BlockNode (void)			// {return1+tak(tak(x-1,y,z),tak(y-1,z,x),tak(z-1,x,y));}
                    -ReturnNode (void)			// return1+tak(tak(x-1,y,z),tak(y-1,z,x),tak(z-1,x,y));
                        -AddNode (int)			// 1+tak(tak(x-1,y,z),tak(y-1,z,x),tak(z-1,x,y))
                            -ConstantNode (int)			// 1
                            -ParenthesisOpNode (int)			// tak(tak(x-1,y,z),tak(y-1,z,x),tak(z-1,x,y))
                                -IdentifierNode (BaseType)			// tak
                                -ArgumentListNode (void)			// tak(x-1,y,z),tak(y-1,z,x),tak(z-1,x,y)
                                    -ParenthesisOpNode (int)			// tak(x-1,y,z)
                                        -IdentifierNode (BaseType)			// tak
                                        -ArgumentListNode (void)			// x-1,y,z
                                            -SubNode (int)			// x-1
                                                -IdentifierNode (int)			// x
                                                -ConstantNode (int)			// 1
                                            -IdentifierNode (int)			// y
                                            -IdentifierNode (int)			// z
                                    -ParenthesisOpNode (int)			// tak(y-1,z,x)
                                        -IdentifierNode (BaseType)			// tak
                                        -ArgumentListNode (void)			// y-1,z,x
                                            -SubNode (int)			// y-1
                                                -IdentifierNode (int)			// y
                                                -ConstantNode (int)			// 1
                                            -IdentifierNode (int)			// z
                                            -IdentifierNode (int)			// x
                                    -ParenthesisOpNode (int)			// tak(z-1,x,y)
                                        -IdentifierNode (BaseType)			// tak
                                        -ArgumentListNode (void)			// z-1,x,y
                                            -SubNode (int)			// z-1
                                                -IdentifierNode (int)			// z
                                                -ConstantNode (int)			// 1
                                            -IdentifierNode (int)			// x
                                            -IdentifierNode (int)			// y
                -BlockNode (void)			// {returnz;}
                    -ReturnNode (void)			// returnz;
                        -IdentifierNode (int)			// z
    -FuncDefinitionNode (void)			// intmain(){returntak(18,12,6);}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {returntak(18,12,6);}
            -ReturnNode (void)			// returntak(18,12,6);
                -ParenthesisOpNode (int)			// tak(18,12,6)
                    -IdentifierNode (BaseType)			// tak
                    -ArgumentListNode (void)			// 18,12,6
                        -ConstantNode (int)			// 18
                        -ConstantNode (int)			// 12
                        -ConstantNode (int)			// 6
