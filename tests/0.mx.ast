-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}inthashsize=100;classnode{intkey;intdata;nodenext;}node[]table;intgetHash(intn){return(n*237)%hashsize;}voidput(intkey,intdata){intp;nodeptr=null;p=getHash(key);if(table[p]==null){table[p]=newnode;table[p].key=key;table[p].data=data;table[p].next=null;return;}ptr=table[p];while(ptr.key!=key){if(ptr.next==null){ptr.next=newnode;ptr.next.key=key;ptr.next.next=null;}ptr=ptr.next;}ptr.data=data;}intget(intkey){nodeptr=null;ptr=table[getHash(key)];while(ptr.key!=key){ptr=ptr.next;}returnptr.data;}intmain(){inti;table=newnode[100];for(i=0;i<hashsize;i++)table[i]=null;for(i=0;i<1000;i++)put(i,i);for(i=0;i<1000;i++)println(toString(i)+" "+toString(get(i)));return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -DeclarationNode (void)			// inthashsize=100;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// hashsize=100
            -InitDeclaratorNode (void)			// hashsize=100
                -DeclaratorNode (void)			// hashsize
                -ConstantNode (int)			// 100
    -ClassDefinitionNode (void)			// classnode{intkey;intdata;nodenext;}
        -DeclarationNode (void)			// intkey;
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -DeclaratorListNode (void)			// key
                -InitDeclaratorNode (void)			// key
                    -DeclaratorNode (void)			// key
        -DeclarationNode (void)			// intdata;
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -DeclaratorListNode (void)			// data
                -InitDeclaratorNode (void)			// data
                    -DeclaratorNode (void)			// data
        -DeclarationNode (void)			// nodenext;
            -TypeNode (void)			// node
                -TypeAttributeNode (void)			// node
            -DeclaratorListNode (void)			// next
                -InitDeclaratorNode (void)			// next
                    -DeclaratorNode (void)			// next
    -DeclarationNode (void)			// node[]table;
        -TypeNode (void)			// node[]
            -TypeAttributeNode (void)			// node[]
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// table
            -InitDeclaratorNode (void)			// table
                -DeclaratorNode (void)			// table
    -FuncDefinitionNode (void)			// intgetHash(intn){return(n*237)%hashsize;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getHash(intn)
            -DeclaratorNode (void)			// getHash
            -ArgumentTypeListNode (void)			// intn
                -ArgumentDeclarationNode (void)			// intn
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// n
        -BlockNode (void)			// {return(n*237)%hashsize;}
            -ReturnNode (void)			// return(n*237)%hashsize;
                -ModuloNode (int)			// (n*237)%hashsize
                    -MultiplyNode (int)			// (n*237)
                        -IdentifierNode (int)			// n
                        -ConstantNode (int)			// 237
                    -IdentifierNode (int)			// hashsize
    -FuncDefinitionNode (void)			// voidput(intkey,intdata){intp;nodeptr=null;p=getHash(key);if(table[p]==null){table[p]=newnode;table[p].key=key;table[p].data=data;table[p].next=null;return;}ptr=table[p];while(ptr.key!=key){if(ptr.next==null){ptr.next=newnode;ptr.next.key=key;ptr.next.next=null;}ptr=ptr.next;}ptr.data=data;}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// put(intkey,intdata)
            -DeclaratorNode (void)			// put
            -ArgumentTypeListNode (void)			// intkey,intdata
                -ArgumentDeclarationNode (void)			// intkey
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// key
                -ArgumentDeclarationNode (void)			// intdata
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// data
        -BlockNode (void)			// {intp;nodeptr=null;p=getHash(key);if(table[p]==null){table[p]=newnode;table[p].key=key;table[p].data=data;table[p].next=null;return;}ptr=table[p];while(ptr.key!=key){if(ptr.next==null){ptr.next=newnode;ptr.next.key=key;ptr.next.next=null;}ptr=ptr.next;}ptr.data=data;}
            -DeclarationNode (void)			// intp;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// p
                    -InitDeclaratorNode (void)			// p
                        -DeclaratorNode (void)			// p
            -DeclarationNode (void)			// nodeptr=null;
                -TypeNode (void)			// node
                    -TypeAttributeNode (void)			// node
                -DeclaratorListNode (void)			// ptr=null
                    -InitDeclaratorNode (void)			// ptr=null
                        -DeclaratorNode (void)			// ptr
                        -ConstantNode (null)			// null
            -StatementNode (void)			// p=getHash(key);
                -AssignNode (void)			// p=getHash(key)
                    -IdentifierNode (int)			// p
                    -ParenthesisOpNode (int)			// getHash(key)
                        -IdentifierNode (BaseType)			// getHash
                        -ArgumentListNode (void)			// key
                            -IdentifierNode (int)			// key
            -IfNode (void)			// if(table[p]==null){table[p]=newnode;table[p].key=key;table[p].data=data;table[p].next=null;return;}
                -EqualNode (bool)			// table[p]==null
                    -SubscriptOpNode (node)			// table[p]
                        -IdentifierNode (node[])			// table
                        -IdentifierNode (int)			// p
                    -ConstantNode (null)			// null
                -BlockNode (void)			// {table[p]=newnode;table[p].key=key;table[p].data=data;table[p].next=null;return;}
                    -StatementNode (void)			// table[p]=newnode;
                        -AssignNode (void)			// table[p]=newnode
                            -SubscriptOpNode (node)			// table[p]
                                -IdentifierNode (node[])			// table
                                -IdentifierNode (int)			// p
                            -NewNode (node)			// newnode
                                -TypeNode (void)			// node
                                    -TypeAttributeNode (void)			// node
                                -ArgumentTypeListNode (void)
                    -StatementNode (void)			// table[p].key=key;
                        -AssignNode (void)			// table[p].key=key
                            -DotOpNode (int)			// table[p].key
                                -SubscriptOpNode (node)			// table[p]
                                    -IdentifierNode (node[])			// table
                                    -IdentifierNode (int)			// p
                            -IdentifierNode (int)			// key
                    -StatementNode (void)			// table[p].data=data;
                        -AssignNode (void)			// table[p].data=data
                            -DotOpNode (int)			// table[p].data
                                -SubscriptOpNode (node)			// table[p]
                                    -IdentifierNode (node[])			// table
                                    -IdentifierNode (int)			// p
                            -IdentifierNode (int)			// data
                    -StatementNode (void)			// table[p].next=null;
                        -AssignNode (void)			// table[p].next=null
                            -DotOpNode (node)			// table[p].next
                                -SubscriptOpNode (node)			// table[p]
                                    -IdentifierNode (node[])			// table
                                    -IdentifierNode (int)			// p
                            -ConstantNode (null)			// null
                    -ReturnNode (void)			// return;
            -StatementNode (void)			// ptr=table[p];
                -AssignNode (void)			// ptr=table[p]
                    -IdentifierNode (node)			// ptr
                    -SubscriptOpNode (node)			// table[p]
                        -IdentifierNode (node[])			// table
                        -IdentifierNode (int)			// p
            -WhileNode (void)			// while(ptr.key!=key){if(ptr.next==null){ptr.next=newnode;ptr.next.key=key;ptr.next.next=null;}ptr=ptr.next;}
                -InequalNode (bool)			// ptr.key!=key
                    -DotOpNode (int)			// ptr.key
                        -IdentifierNode (node)			// ptr
                    -IdentifierNode (int)			// key
                -BlockNode (void)			// {if(ptr.next==null){ptr.next=newnode;ptr.next.key=key;ptr.next.next=null;}ptr=ptr.next;}
                    -IfNode (void)			// if(ptr.next==null){ptr.next=newnode;ptr.next.key=key;ptr.next.next=null;}
                        -EqualNode (bool)			// ptr.next==null
                            -DotOpNode (node)			// ptr.next
                                -IdentifierNode (node)			// ptr
                            -ConstantNode (null)			// null
                        -BlockNode (void)			// {ptr.next=newnode;ptr.next.key=key;ptr.next.next=null;}
                            -StatementNode (void)			// ptr.next=newnode;
                                -AssignNode (void)			// ptr.next=newnode
                                    -DotOpNode (node)			// ptr.next
                                        -IdentifierNode (node)			// ptr
                                    -NewNode (node)			// newnode
                                        -TypeNode (void)			// node
                                            -TypeAttributeNode (void)			// node
                                        -ArgumentTypeListNode (void)
                            -StatementNode (void)			// ptr.next.key=key;
                                -AssignNode (void)			// ptr.next.key=key
                                    -DotOpNode (int)			// ptr.next.key
                                        -DotOpNode (node)			// ptr.next
                                            -IdentifierNode (node)			// ptr
                                    -IdentifierNode (int)			// key
                            -StatementNode (void)			// ptr.next.next=null;
                                -AssignNode (void)			// ptr.next.next=null
                                    -DotOpNode (node)			// ptr.next.next
                                        -DotOpNode (node)			// ptr.next
                                            -IdentifierNode (node)			// ptr
                                    -ConstantNode (null)			// null
                    -StatementNode (void)			// ptr=ptr.next;
                        -AssignNode (void)			// ptr=ptr.next
                            -IdentifierNode (node)			// ptr
                            -DotOpNode (node)			// ptr.next
                                -IdentifierNode (node)			// ptr
            -StatementNode (void)			// ptr.data=data;
                -AssignNode (void)			// ptr.data=data
                    -DotOpNode (int)			// ptr.data
                        -IdentifierNode (node)			// ptr
                    -IdentifierNode (int)			// data
    -FuncDefinitionNode (void)			// intget(intkey){nodeptr=null;ptr=table[getHash(key)];while(ptr.key!=key){ptr=ptr.next;}returnptr.data;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// get(intkey)
            -DeclaratorNode (void)			// get
            -ArgumentTypeListNode (void)			// intkey
                -ArgumentDeclarationNode (void)			// intkey
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// key
        -BlockNode (void)			// {nodeptr=null;ptr=table[getHash(key)];while(ptr.key!=key){ptr=ptr.next;}returnptr.data;}
            -DeclarationNode (void)			// nodeptr=null;
                -TypeNode (void)			// node
                    -TypeAttributeNode (void)			// node
                -DeclaratorListNode (void)			// ptr=null
                    -InitDeclaratorNode (void)			// ptr=null
                        -DeclaratorNode (void)			// ptr
                        -ConstantNode (null)			// null
            -StatementNode (void)			// ptr=table[getHash(key)];
                -AssignNode (void)			// ptr=table[getHash(key)]
                    -IdentifierNode (node)			// ptr
                    -SubscriptOpNode (node)			// table[getHash(key)]
                        -IdentifierNode (node[])			// table
                        -ParenthesisOpNode (int)			// getHash(key)
                            -IdentifierNode (BaseType)			// getHash
                            -ArgumentListNode (void)			// key
                                -IdentifierNode (int)			// key
            -WhileNode (void)			// while(ptr.key!=key){ptr=ptr.next;}
                -InequalNode (bool)			// ptr.key!=key
                    -DotOpNode (int)			// ptr.key
                        -IdentifierNode (node)			// ptr
                    -IdentifierNode (int)			// key
                -BlockNode (void)			// {ptr=ptr.next;}
                    -StatementNode (void)			// ptr=ptr.next;
                        -AssignNode (void)			// ptr=ptr.next
                            -IdentifierNode (node)			// ptr
                            -DotOpNode (node)			// ptr.next
                                -IdentifierNode (node)			// ptr
            -ReturnNode (void)			// returnptr.data;
                -DotOpNode (int)			// ptr.data
                    -IdentifierNode (node)			// ptr
    -FuncDefinitionNode (void)			// intmain(){inti;table=newnode[100];for(i=0;i<hashsize;i++)table[i]=null;for(i=0;i<1000;i++)put(i,i);for(i=0;i<1000;i++)println(toString(i)+" "+toString(get(i)));return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inti;table=newnode[100];for(i=0;i<hashsize;i++)table[i]=null;for(i=0;i<1000;i++)put(i,i);for(i=0;i<1000;i++)println(toString(i)+" "+toString(get(i)));return0;}
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -StatementNode (void)			// table=newnode[100];
                -AssignNode (void)			// table=newnode[100]
                    -IdentifierNode (node[])			// table
                    -NewNode (node[])			// newnode[100]
                        -TypeNode (void)			// node[100]
                            -TypeAttributeNode (void)			// node[100]
                                -ConstantNode (int)			// 100
                        -ArgumentTypeListNode (void)
            -ForNode (void)			// for(i=0;i<hashsize;i++)table[i]=null;
                -ForConditionNode (void)			// i=0;i<hashsize;i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<hashsize
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// hashsize
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// table[i]=null;
                    -AssignNode (void)			// table[i]=null
                        -SubscriptOpNode (node)			// table[i]
                            -IdentifierNode (node[])			// table
                            -IdentifierNode (int)			// i
                        -ConstantNode (null)			// null
            -ForNode (void)			// for(i=0;i<1000;i++)put(i,i);
                -ForConditionNode (void)			// i=0;i<1000;i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<1000
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1000
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// put(i,i);
                    -ParenthesisOpNode (void)			// put(i,i)
                        -IdentifierNode (BaseType)			// put
                        -ArgumentListNode (void)			// i,i
                            -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// i
            -ForNode (void)			// for(i=0;i<1000;i++)println(toString(i)+" "+toString(get(i)));
                -ForConditionNode (void)			// i=0;i<1000;i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<1000
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1000
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// println(toString(i)+" "+toString(get(i)));
                    -ParenthesisOpNode (void)			// println(toString(i)+" "+toString(get(i)))
                        -IdentifierNode (BaseType)			// println
                        -ArgumentListNode (void)			// toString(i)+" "+toString(get(i))
                            -AddNode (string)			// toString(i)+" "+toString(get(i))
                                -AddNode (string)			// toString(i)+" "
                                    -ParenthesisOpNode (string)			// toString(i)
                                        -IdentifierNode (BaseType)			// toString
                                        -ArgumentListNode (void)			// i
                                            -IdentifierNode (int)			// i
                                    -StringLiteralNode (string)			// " "
                                -ParenthesisOpNode (string)			// toString(get(i))
                                    -IdentifierNode (BaseType)			// toString
                                    -ArgumentListNode (void)			// get(i)
                                        -ParenthesisOpNode (int)			// get(i)
                                            -IdentifierNode (BaseType)			// get
                                            -ArgumentListNode (void)			// i
                                                -IdentifierNode (int)			// i
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
