-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}inthilo(inthi,intlo){returnlo|(hi<<16);}intshift_l(intx,intn){return(x<<n)&hilo(32767,65535);}intshift_r(intx,intn){inttmp=hilo(32767,65535);tmp=((tmp>>n)<<1)+1;tmp=tmp&(x>>n);returntmp&hilo(32767,65535);}intxorshift(intseed,intnum){intx=seed+1;inti;for(i=0;i<num*10;i++){x=x^shift_l(x,13);x=x^shift_r(x,17);x=x^shift_l(x,5);}returnx^123456789;}stringasciiTable=" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";stringint2chr(intx){if(x>=32&&x<=126)returnasciiTable.substring(x-32,x-32);return"";}stringtoStringHex(intx){stringret="";inti;for(i=28;i>=0;i=i-4){intdigit=(x>>i)&15;if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);}returnret;}intgetnumber(intseed,intnum,inty){intshift=y&31;intval=xorshift(seed,num);returnshift_l(val,shift)|shift_r(val,32-shift);}intmain(){intl1;intr1;intl2;intr2;intl3;intr3;inti;intj;intk;l1=getInt();r1=getInt();l2=getInt();r2=getInt();l3=getInt();r3=getInt();intround=30;intans0=0;intans1=0;intans2=0;intans3=0;for(i=l1;i<r1;i++)for(j=l2;j<r2;j++)for(k=l3;k<r3;k++){intx0=getnumber(l1,round,k);intx1=getnumber(i,round,k);intx2=getnumber(j,round,k);intx3=getnumber(i^j,round,k);inty=xorshift(k,1)^xorshift(j,1)^xorshift(i,1);ans0=ans0+xorshift(x0^y,1);ans1=ans1+xorshift(x1^y,1);ans2=ans2+xorshift(x2^y,1);ans3=ans3+xorshift(x3^y,1);}print(toStringHex(ans0)+" ");print(toStringHex(ans1)+" ");print(toStringHex(ans2)+" ");print(toStringHex(ans3)+" ");println("");return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// inthilo(inthi,intlo){returnlo|(hi<<16);}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// hilo(inthi,intlo)
            -DeclaratorNode (void)			// hilo
            -ArgumentTypeListNode (void)			// inthi,intlo
                -ArgumentDeclarationNode (void)			// inthi
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// hi
                -ArgumentDeclarationNode (void)			// intlo
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// lo
        -BlockNode (void)			// {returnlo|(hi<<16);}
            -ReturnNode (void)			// returnlo|(hi<<16);
                -OrNode (int)			// lo|(hi<<16)
                    -IdentifierNode (int)			// lo
                    -ShiftLeftNode (int)			// (hi<<16)
                        -IdentifierNode (int)			// hi
                        -ConstantNode (int)			// 16
    -FuncDefinitionNode (void)			// intshift_l(intx,intn){return(x<<n)&hilo(32767,65535);}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// shift_l(intx,intn)
            -DeclaratorNode (void)			// shift_l
            -ArgumentTypeListNode (void)			// intx,intn
                -ArgumentDeclarationNode (void)			// intx
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// x
                -ArgumentDeclarationNode (void)			// intn
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// n
        -BlockNode (void)			// {return(x<<n)&hilo(32767,65535);}
            -ReturnNode (void)			// return(x<<n)&hilo(32767,65535);
                -AndNode (int)			// (x<<n)&hilo(32767,65535)
                    -ShiftLeftNode (int)			// (x<<n)
                        -IdentifierNode (int)			// x
                        -IdentifierNode (int)			// n
                    -OrNode (int)			// lo|(hi<<16)
                        -ConstantNode (int)			// 65535
                        -ShiftLeftNode (int)			// (hi<<16)
                            -ConstantNode (int)			// 32767
                            -ConstantNode (int)			// 16
    -FuncDefinitionNode (void)			// intshift_r(intx,intn){inttmp=hilo(32767,65535);tmp=((tmp>>n)<<1)+1;tmp=tmp&(x>>n);returntmp&hilo(32767,65535);}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// shift_r(intx,intn)
            -DeclaratorNode (void)			// shift_r
            -ArgumentTypeListNode (void)			// intx,intn
                -ArgumentDeclarationNode (void)			// intx
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// x
                -ArgumentDeclarationNode (void)			// intn
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// n
        -BlockNode (void)			// {inttmp=hilo(32767,65535);tmp=((tmp>>n)<<1)+1;tmp=tmp&(x>>n);returntmp&hilo(32767,65535);}
            -DeclarationNode (void)			// inttmp=hilo(32767,65535);
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// tmp=hilo(32767,65535)
                    -InitDeclaratorNode (void)			// tmp=hilo(32767,65535)
                        -DeclaratorNode (void)			// tmp
                        -OrNode (int)			// lo|(hi<<16)
                            -ConstantNode (int)			// 65535
                            -ShiftLeftNode (int)			// (hi<<16)
                                -ConstantNode (int)			// 32767
                                -ConstantNode (int)			// 16
            -StatementNode (void)			// tmp=((tmp>>n)<<1)+1;
                -AssignNode (void)			// tmp=((tmp>>n)<<1)+1
                    -IdentifierNode (int)			// tmp
                    -AddNode (int)			// ((tmp>>n)<<1)+1
                        -ShiftLeftNode (int)			// ((tmp>>n)<<1)
                            -ShiftRightNode (int)			// (tmp>>n)
                                -IdentifierNode (int)			// tmp
                                -IdentifierNode (int)			// n
                            -ConstantNode (int)			// 1
                        -ConstantNode (int)			// 1
            -StatementNode (void)			// tmp=tmp&(x>>n);
                -AssignNode (void)			// tmp=tmp&(x>>n)
                    -IdentifierNode (int)			// tmp
                    -AndNode (int)			// tmp&(x>>n)
                        -IdentifierNode (int)			// tmp
                        -ShiftRightNode (int)			// (x>>n)
                            -IdentifierNode (int)			// x
                            -IdentifierNode (int)			// n
            -ReturnNode (void)			// returntmp&hilo(32767,65535);
                -AndNode (int)			// tmp&hilo(32767,65535)
                    -IdentifierNode (int)			// tmp
                    -OrNode (int)			// lo|(hi<<16)
                        -ConstantNode (int)			// 65535
                        -ShiftLeftNode (int)			// (hi<<16)
                            -ConstantNode (int)			// 32767
                            -ConstantNode (int)			// 16
    -FuncDefinitionNode (void)			// intxorshift(intseed,intnum){intx=seed+1;inti;for(i=0;i<num*10;i++){x=x^shift_l(x,13);x=x^shift_r(x,17);x=x^shift_l(x,5);}returnx^123456789;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// xorshift(intseed,intnum)
            -DeclaratorNode (void)			// xorshift
            -ArgumentTypeListNode (void)			// intseed,intnum
                -ArgumentDeclarationNode (void)			// intseed
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// seed
                -ArgumentDeclarationNode (void)			// intnum
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// num
        -BlockNode (void)			// {intx=seed+1;inti;for(i=0;i<num*10;i++){x=x^shift_l(x,13);x=x^shift_r(x,17);x=x^shift_l(x,5);}returnx^123456789;}
            -DeclarationNode (void)			// intx=seed+1;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// x=seed+1
                    -InitDeclaratorNode (void)			// x=seed+1
                        -DeclaratorNode (void)			// x
                        -AddNode (int)			// seed+1
                            -IdentifierNode (int)			// seed
                            -ConstantNode (int)			// 1
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=0;i<num*10;i++){x=x^shift_l(x,13);x=x^shift_r(x,17);x=x^shift_l(x,5);}
                -ForConditionNode (void)			// i=0;i<num*10;i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<num*10
                        -IdentifierNode (int)			// i
                        -MultiplyNode (int)			// num*10
                            -IdentifierNode (int)			// num
                            -ConstantNode (int)			// 10
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {x=x^shift_l(x,13);x=x^shift_r(x,17);x=x^shift_l(x,5);}
                    -StatementNode (void)			// x=x^shift_l(x,13);
                        -AssignNode (void)			// x=x^shift_l(x,13)
                            -IdentifierNode (int)			// x
                            -XorNode (int)			// x^shift_l(x,13)
                                -IdentifierNode (int)			// x
                                -AndNode (int)			// (x<<n)&hilo(32767,65535)
                                    -ShiftLeftNode (int)			// (x<<n)
                                        -IdentifierNode (int)			// x
                                        -ConstantNode (int)			// 13
                                    -OrNode (int)			// lo|(hi<<16)
                                        -ConstantNode (int)			// 65535
                                        -ShiftLeftNode (int)			// (hi<<16)
                                            -ConstantNode (int)			// 32767
                                            -ConstantNode (int)			// 16
                    -StatementNode (void)			// x=x^shift_r(x,17);
                        -AssignNode (void)			// x=x^shift_r(x,17)
                            -IdentifierNode (int)			// x
                            -XorNode (int)			// x^shift_r(x,17)
                                -IdentifierNode (int)			// x
                                -ParenthesisOpNode (int)			// shift_r(x,17)
                                    -IdentifierNode (BaseType)			// shift_r
                                    -ArgumentListNode (void)			// x,17
                                        -IdentifierNode (int)			// x
                                        -ConstantNode (int)			// 17
                    -StatementNode (void)			// x=x^shift_l(x,5);
                        -AssignNode (void)			// x=x^shift_l(x,5)
                            -IdentifierNode (int)			// x
                            -XorNode (int)			// x^shift_l(x,5)
                                -IdentifierNode (int)			// x
                                -AndNode (int)			// (x<<n)&hilo(32767,65535)
                                    -ShiftLeftNode (int)			// (x<<n)
                                        -IdentifierNode (int)			// x
                                        -ConstantNode (int)			// 5
                                    -OrNode (int)			// lo|(hi<<16)
                                        -ConstantNode (int)			// 65535
                                        -ShiftLeftNode (int)			// (hi<<16)
                                            -ConstantNode (int)			// 32767
                                            -ConstantNode (int)			// 16
            -ReturnNode (void)			// returnx^123456789;
                -XorNode (int)			// x^123456789
                    -IdentifierNode (int)			// x
                    -ConstantNode (int)			// 123456789
    -DeclarationNode (void)			// stringasciiTable=" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -DeclaratorListNode (void)			// asciiTable=" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
            -InitDeclaratorNode (void)			// asciiTable=" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
                -DeclaratorNode (void)			// asciiTable
                -StringLiteralNode (string)			// " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    -FuncDefinitionNode (void)			// stringint2chr(intx){if(x>=32&&x<=126)returnasciiTable.substring(x-32,x-32);return"";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// int2chr(intx)
            -DeclaratorNode (void)			// int2chr
            -ArgumentTypeListNode (void)			// intx
                -ArgumentDeclarationNode (void)			// intx
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// x
        -BlockNode (void)			// {if(x>=32&&x<=126)returnasciiTable.substring(x-32,x-32);return"";}
            -IfNode (void)			// if(x>=32&&x<=126)returnasciiTable.substring(x-32,x-32);
                -LogicalAndNode (bool)			// x>=32&&x<=126
                    -GreaterOrEqualThanNode (bool)			// x>=32
                        -IdentifierNode (int)			// x
                        -ConstantNode (int)			// 32
                    -LessOrEqualThanNode (bool)			// x<=126
                        -IdentifierNode (int)			// x
                        -ConstantNode (int)			// 126
                -ReturnNode (void)			// returnasciiTable.substring(x-32,x-32);
                    -ParenthesisOpNode (string)			// asciiTable.substring(x-32,x-32)
                        -DotOpNode (BaseType)			// asciiTable.substring
                            -IdentifierNode (string)			// asciiTable
                        -ArgumentListNode (void)			// x-32,x-32
                            -SubNode (int)			// x-32
                                -IdentifierNode (int)			// x
                                -ConstantNode (int)			// 32
                            -SubNode (int)			// x-32
                                -IdentifierNode (int)			// x
                                -ConstantNode (int)			// 32
            -ReturnNode (void)			// return"";
                -StringLiteralNode (string)			// ""
    -FuncDefinitionNode (void)			// stringtoStringHex(intx){stringret="";inti;for(i=28;i>=0;i=i-4){intdigit=(x>>i)&15;if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);}returnret;}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toStringHex(intx)
            -DeclaratorNode (void)			// toStringHex
            -ArgumentTypeListNode (void)			// intx
                -ArgumentDeclarationNode (void)			// intx
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// x
        -BlockNode (void)			// {stringret="";inti;for(i=28;i>=0;i=i-4){intdigit=(x>>i)&15;if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);}returnret;}
            -DeclarationNode (void)			// stringret="";
                -TypeNode (void)			// string
                    -TypeAttributeNode (void)			// string
                -DeclaratorListNode (void)			// ret=""
                    -InitDeclaratorNode (void)			// ret=""
                        -DeclaratorNode (void)			// ret
                        -StringLiteralNode (string)			// ""
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=28;i>=0;i=i-4){intdigit=(x>>i)&15;if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);}
                -ForConditionNode (void)			// i=28;i>=0;i=i-4
                    -AssignNode (void)			// i=28
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 28
                    -GreaterOrEqualThanNode (bool)			// i>=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -AssignNode (void)			// i=i-4
                        -IdentifierNode (int)			// i
                        -SubNode (int)			// i-4
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 4
                -BlockNode (void)			// {intdigit=(x>>i)&15;if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);}
                    -DeclarationNode (void)			// intdigit=(x>>i)&15;
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// digit=(x>>i)&15
                            -InitDeclaratorNode (void)			// digit=(x>>i)&15
                                -DeclaratorNode (void)			// digit
                                -AndNode (int)			// (x>>i)&15
                                    -ShiftRightNode (int)			// (x>>i)
                                        -IdentifierNode (int)			// x
                                        -IdentifierNode (int)			// i
                                    -ConstantNode (int)			// 15
                    -IfNode (void)			// if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);
                        -LessThanNode (bool)			// digit<10
                            -IdentifierNode (int)			// digit
                            -ConstantNode (int)			// 10
                        -StatementNode (void)			// ret=ret+int2chr(48+digit);
                            -AssignNode (void)			// ret=ret+int2chr(48+digit)
                                -IdentifierNode (string)			// ret
                                -AddNode (string)			// ret+int2chr(48+digit)
                                    -IdentifierNode (string)			// ret
                                    -ParenthesisOpNode (string)			// int2chr(48+digit)
                                        -IdentifierNode (BaseType)			// int2chr
                                        -ArgumentListNode (void)			// 48+digit
                                            -AddNode (int)			// 48+digit
                                                -ConstantNode (int)			// 48
                                                -IdentifierNode (int)			// digit
                        -StatementNode (void)			// ret=ret+int2chr(65+digit-10);
                            -AssignNode (void)			// ret=ret+int2chr(65+digit-10)
                                -IdentifierNode (string)			// ret
                                -AddNode (string)			// ret+int2chr(65+digit-10)
                                    -IdentifierNode (string)			// ret
                                    -ParenthesisOpNode (string)			// int2chr(65+digit-10)
                                        -IdentifierNode (BaseType)			// int2chr
                                        -ArgumentListNode (void)			// 65+digit-10
                                            -SubNode (int)			// 65+digit-10
                                                -AddNode (int)			// 65+digit
                                                    -ConstantNode (int)			// 65
                                                    -IdentifierNode (int)			// digit
                                                -ConstantNode (int)			// 10
            -ReturnNode (void)			// returnret;
                -IdentifierNode (string)			// ret
    -FuncDefinitionNode (void)			// intgetnumber(intseed,intnum,inty){intshift=y&31;intval=xorshift(seed,num);returnshift_l(val,shift)|shift_r(val,32-shift);}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getnumber(intseed,intnum,inty)
            -DeclaratorNode (void)			// getnumber
            -ArgumentTypeListNode (void)			// intseed,intnum,inty
                -ArgumentDeclarationNode (void)			// intseed
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// seed
                -ArgumentDeclarationNode (void)			// intnum
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// num
                -ArgumentDeclarationNode (void)			// inty
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// y
        -BlockNode (void)			// {intshift=y&31;intval=xorshift(seed,num);returnshift_l(val,shift)|shift_r(val,32-shift);}
            -DeclarationNode (void)			// intshift=y&31;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// shift=y&31
                    -InitDeclaratorNode (void)			// shift=y&31
                        -DeclaratorNode (void)			// shift
                        -AndNode (int)			// y&31
                            -IdentifierNode (int)			// y
                            -ConstantNode (int)			// 31
            -DeclarationNode (void)			// intval=xorshift(seed,num);
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// val=xorshift(seed,num)
                    -InitDeclaratorNode (void)			// val=xorshift(seed,num)
                        -DeclaratorNode (void)			// val
                        -ParenthesisOpNode (int)			// xorshift(seed,num)
                            -IdentifierNode (BaseType)			// xorshift
                            -ArgumentListNode (void)			// seed,num
                                -IdentifierNode (int)			// seed
                                -IdentifierNode (int)			// num
            -ReturnNode (void)			// returnshift_l(val,shift)|shift_r(val,32-shift);
                -OrNode (int)			// shift_l(val,shift)|shift_r(val,32-shift)
                    -AndNode (int)			// (x<<n)&hilo(32767,65535)
                        -ShiftLeftNode (int)			// (x<<n)
                            -IdentifierNode (int)			// val
                            -IdentifierNode (int)			// shift
                        -OrNode (int)			// lo|(hi<<16)
                            -ConstantNode (int)			// 65535
                            -ShiftLeftNode (int)			// (hi<<16)
                                -ConstantNode (int)			// 32767
                                -ConstantNode (int)			// 16
                    -ParenthesisOpNode (int)			// shift_r(val,32-shift)
                        -IdentifierNode (BaseType)			// shift_r
                        -ArgumentListNode (void)			// val,32-shift
                            -IdentifierNode (int)			// val
                            -SubNode (int)			// 32-shift
                                -ConstantNode (int)			// 32
                                -IdentifierNode (int)			// shift
    -FuncDefinitionNode (void)			// intmain(){intl1;intr1;intl2;intr2;intl3;intr3;inti;intj;intk;l1=getInt();r1=getInt();l2=getInt();r2=getInt();l3=getInt();r3=getInt();intround=30;intans0=0;intans1=0;intans2=0;intans3=0;for(i=l1;i<r1;i++)for(j=l2;j<r2;j++)for(k=l3;k<r3;k++){intx0=getnumber(l1,round,k);intx1=getnumber(i,round,k);intx2=getnumber(j,round,k);intx3=getnumber(i^j,round,k);inty=xorshift(k,1)^xorshift(j,1)^xorshift(i,1);ans0=ans0+xorshift(x0^y,1);ans1=ans1+xorshift(x1^y,1);ans2=ans2+xorshift(x2^y,1);ans3=ans3+xorshift(x3^y,1);}print(toStringHex(ans0)+" ");print(toStringHex(ans1)+" ");print(toStringHex(ans2)+" ");print(toStringHex(ans3)+" ");println("");return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {intl1;intr1;intl2;intr2;intl3;intr3;inti;intj;intk;l1=getInt();r1=getInt();l2=getInt();r2=getInt();l3=getInt();r3=getInt();intround=30;intans0=0;intans1=0;intans2=0;intans3=0;for(i=l1;i<r1;i++)for(j=l2;j<r2;j++)for(k=l3;k<r3;k++){intx0=getnumber(l1,round,k);intx1=getnumber(i,round,k);intx2=getnumber(j,round,k);intx3=getnumber(i^j,round,k);inty=xorshift(k,1)^xorshift(j,1)^xorshift(i,1);ans0=ans0+xorshift(x0^y,1);ans1=ans1+xorshift(x1^y,1);ans2=ans2+xorshift(x2^y,1);ans3=ans3+xorshift(x3^y,1);}print(toStringHex(ans0)+" ");print(toStringHex(ans1)+" ");print(toStringHex(ans2)+" ");print(toStringHex(ans3)+" ");println("");return0;}
            -DeclarationNode (void)			// intl1;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// l1
                    -InitDeclaratorNode (void)			// l1
                        -DeclaratorNode (void)			// l1
            -DeclarationNode (void)			// intr1;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// r1
                    -InitDeclaratorNode (void)			// r1
                        -DeclaratorNode (void)			// r1
            -DeclarationNode (void)			// intl2;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// l2
                    -InitDeclaratorNode (void)			// l2
                        -DeclaratorNode (void)			// l2
            -DeclarationNode (void)			// intr2;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// r2
                    -InitDeclaratorNode (void)			// r2
                        -DeclaratorNode (void)			// r2
            -DeclarationNode (void)			// intl3;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// l3
                    -InitDeclaratorNode (void)			// l3
                        -DeclaratorNode (void)			// l3
            -DeclarationNode (void)			// intr3;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// r3
                    -InitDeclaratorNode (void)			// r3
                        -DeclaratorNode (void)			// r3
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -DeclarationNode (void)			// intj;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// j
                    -InitDeclaratorNode (void)			// j
                        -DeclaratorNode (void)			// j
            -DeclarationNode (void)			// intk;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// k
                    -InitDeclaratorNode (void)			// k
                        -DeclaratorNode (void)			// k
            -StatementNode (void)			// l1=getInt();
                -AssignNode (void)			// l1=getInt()
                    -IdentifierNode (int)			// l1
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
            -StatementNode (void)			// r1=getInt();
                -AssignNode (void)			// r1=getInt()
                    -IdentifierNode (int)			// r1
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
            -StatementNode (void)			// l2=getInt();
                -AssignNode (void)			// l2=getInt()
                    -IdentifierNode (int)			// l2
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
            -StatementNode (void)			// r2=getInt();
                -AssignNode (void)			// r2=getInt()
                    -IdentifierNode (int)			// r2
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
            -StatementNode (void)			// l3=getInt();
                -AssignNode (void)			// l3=getInt()
                    -IdentifierNode (int)			// l3
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
            -StatementNode (void)			// r3=getInt();
                -AssignNode (void)			// r3=getInt()
                    -IdentifierNode (int)			// r3
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
            -DeclarationNode (void)			// intround=30;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// round=30
                    -InitDeclaratorNode (void)			// round=30
                        -DeclaratorNode (void)			// round
                        -ConstantNode (int)			// 30
            -DeclarationNode (void)			// intans0=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// ans0=0
                    -InitDeclaratorNode (void)			// ans0=0
                        -DeclaratorNode (void)			// ans0
                        -ConstantNode (int)			// 0
            -DeclarationNode (void)			// intans1=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// ans1=0
                    -InitDeclaratorNode (void)			// ans1=0
                        -DeclaratorNode (void)			// ans1
                        -ConstantNode (int)			// 0
            -DeclarationNode (void)			// intans2=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// ans2=0
                    -InitDeclaratorNode (void)			// ans2=0
                        -DeclaratorNode (void)			// ans2
                        -ConstantNode (int)			// 0
            -DeclarationNode (void)			// intans3=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// ans3=0
                    -InitDeclaratorNode (void)			// ans3=0
                        -DeclaratorNode (void)			// ans3
                        -ConstantNode (int)			// 0
            -ForNode (void)			// for(i=l1;i<r1;i++)for(j=l2;j<r2;j++)for(k=l3;k<r3;k++){intx0=getnumber(l1,round,k);intx1=getnumber(i,round,k);intx2=getnumber(j,round,k);intx3=getnumber(i^j,round,k);inty=xorshift(k,1)^xorshift(j,1)^xorshift(i,1);ans0=ans0+xorshift(x0^y,1);ans1=ans1+xorshift(x1^y,1);ans2=ans2+xorshift(x2^y,1);ans3=ans3+xorshift(x3^y,1);}
                -ForConditionNode (void)			// i=l1;i<r1;i++
                    -AssignNode (void)			// i=l1
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// l1
                    -LessThanNode (bool)			// i<r1
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// r1
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -ForNode (void)			// for(j=l2;j<r2;j++)for(k=l3;k<r3;k++){intx0=getnumber(l1,round,k);intx1=getnumber(i,round,k);intx2=getnumber(j,round,k);intx3=getnumber(i^j,round,k);inty=xorshift(k,1)^xorshift(j,1)^xorshift(i,1);ans0=ans0+xorshift(x0^y,1);ans1=ans1+xorshift(x1^y,1);ans2=ans2+xorshift(x2^y,1);ans3=ans3+xorshift(x3^y,1);}
                    -ForConditionNode (void)			// j=l2;j<r2;j++
                        -AssignNode (void)			// j=l2
                            -IdentifierNode (int)			// j
                            -IdentifierNode (int)			// l2
                        -LessThanNode (bool)			// j<r2
                            -IdentifierNode (int)			// j
                            -IdentifierNode (int)			// r2
                        -PostfixAddNode (int)			// j++
                            -IdentifierNode (int)			// j
                    -ForNode (void)			// for(k=l3;k<r3;k++){intx0=getnumber(l1,round,k);intx1=getnumber(i,round,k);intx2=getnumber(j,round,k);intx3=getnumber(i^j,round,k);inty=xorshift(k,1)^xorshift(j,1)^xorshift(i,1);ans0=ans0+xorshift(x0^y,1);ans1=ans1+xorshift(x1^y,1);ans2=ans2+xorshift(x2^y,1);ans3=ans3+xorshift(x3^y,1);}
                        -ForConditionNode (void)			// k=l3;k<r3;k++
                            -AssignNode (void)			// k=l3
                                -IdentifierNode (int)			// k
                                -IdentifierNode (int)			// l3
                            -LessThanNode (bool)			// k<r3
                                -IdentifierNode (int)			// k
                                -IdentifierNode (int)			// r3
                            -PostfixAddNode (int)			// k++
                                -IdentifierNode (int)			// k
                        -BlockNode (void)			// {intx0=getnumber(l1,round,k);intx1=getnumber(i,round,k);intx2=getnumber(j,round,k);intx3=getnumber(i^j,round,k);inty=xorshift(k,1)^xorshift(j,1)^xorshift(i,1);ans0=ans0+xorshift(x0^y,1);ans1=ans1+xorshift(x1^y,1);ans2=ans2+xorshift(x2^y,1);ans3=ans3+xorshift(x3^y,1);}
                            -DeclarationNode (void)			// intx0=getnumber(l1,round,k);
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// x0=getnumber(l1,round,k)
                                    -InitDeclaratorNode (void)			// x0=getnumber(l1,round,k)
                                        -DeclaratorNode (void)			// x0
                                        -ParenthesisOpNode (int)			// getnumber(l1,round,k)
                                            -IdentifierNode (BaseType)			// getnumber
                                            -ArgumentListNode (void)			// l1,round,k
                                                -IdentifierNode (int)			// l1
                                                -IdentifierNode (int)			// round
                                                -IdentifierNode (int)			// k
                            -DeclarationNode (void)			// intx1=getnumber(i,round,k);
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// x1=getnumber(i,round,k)
                                    -InitDeclaratorNode (void)			// x1=getnumber(i,round,k)
                                        -DeclaratorNode (void)			// x1
                                        -ParenthesisOpNode (int)			// getnumber(i,round,k)
                                            -IdentifierNode (BaseType)			// getnumber
                                            -ArgumentListNode (void)			// i,round,k
                                                -IdentifierNode (int)			// i
                                                -IdentifierNode (int)			// round
                                                -IdentifierNode (int)			// k
                            -DeclarationNode (void)			// intx2=getnumber(j,round,k);
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// x2=getnumber(j,round,k)
                                    -InitDeclaratorNode (void)			// x2=getnumber(j,round,k)
                                        -DeclaratorNode (void)			// x2
                                        -ParenthesisOpNode (int)			// getnumber(j,round,k)
                                            -IdentifierNode (BaseType)			// getnumber
                                            -ArgumentListNode (void)			// j,round,k
                                                -IdentifierNode (int)			// j
                                                -IdentifierNode (int)			// round
                                                -IdentifierNode (int)			// k
                            -DeclarationNode (void)			// intx3=getnumber(i^j,round,k);
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// x3=getnumber(i^j,round,k)
                                    -InitDeclaratorNode (void)			// x3=getnumber(i^j,round,k)
                                        -DeclaratorNode (void)			// x3
                                        -ParenthesisOpNode (int)			// getnumber(i^j,round,k)
                                            -IdentifierNode (BaseType)			// getnumber
                                            -ArgumentListNode (void)			// i^j,round,k
                                                -XorNode (int)			// i^j
                                                    -IdentifierNode (int)			// i
                                                    -IdentifierNode (int)			// j
                                                -IdentifierNode (int)			// round
                                                -IdentifierNode (int)			// k
                            -DeclarationNode (void)			// inty=xorshift(k,1)^xorshift(j,1)^xorshift(i,1);
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// y=xorshift(k,1)^xorshift(j,1)^xorshift(i,1)
                                    -InitDeclaratorNode (void)			// y=xorshift(k,1)^xorshift(j,1)^xorshift(i,1)
                                        -DeclaratorNode (void)			// y
                                        -XorNode (int)			// xorshift(k,1)^xorshift(j,1)^xorshift(i,1)
                                            -XorNode (int)			// xorshift(k,1)^xorshift(j,1)
                                                -ParenthesisOpNode (int)			// xorshift(k,1)
                                                    -IdentifierNode (BaseType)			// xorshift
                                                    -ArgumentListNode (void)			// k,1
                                                        -IdentifierNode (int)			// k
                                                        -ConstantNode (int)			// 1
                                                -ParenthesisOpNode (int)			// xorshift(j,1)
                                                    -IdentifierNode (BaseType)			// xorshift
                                                    -ArgumentListNode (void)			// j,1
                                                        -IdentifierNode (int)			// j
                                                        -ConstantNode (int)			// 1
                                            -ParenthesisOpNode (int)			// xorshift(i,1)
                                                -IdentifierNode (BaseType)			// xorshift
                                                -ArgumentListNode (void)			// i,1
                                                    -IdentifierNode (int)			// i
                                                    -ConstantNode (int)			// 1
                            -StatementNode (void)			// ans0=ans0+xorshift(x0^y,1);
                                -AssignNode (void)			// ans0=ans0+xorshift(x0^y,1)
                                    -IdentifierNode (int)			// ans0
                                    -AddNode (int)			// ans0+xorshift(x0^y,1)
                                        -IdentifierNode (int)			// ans0
                                        -ParenthesisOpNode (int)			// xorshift(x0^y,1)
                                            -IdentifierNode (BaseType)			// xorshift
                                            -ArgumentListNode (void)			// x0^y,1
                                                -XorNode (int)			// x0^y
                                                    -IdentifierNode (int)			// x0
                                                    -IdentifierNode (int)			// y
                                                -ConstantNode (int)			// 1
                            -StatementNode (void)			// ans1=ans1+xorshift(x1^y,1);
                                -AssignNode (void)			// ans1=ans1+xorshift(x1^y,1)
                                    -IdentifierNode (int)			// ans1
                                    -AddNode (int)			// ans1+xorshift(x1^y,1)
                                        -IdentifierNode (int)			// ans1
                                        -ParenthesisOpNode (int)			// xorshift(x1^y,1)
                                            -IdentifierNode (BaseType)			// xorshift
                                            -ArgumentListNode (void)			// x1^y,1
                                                -XorNode (int)			// x1^y
                                                    -IdentifierNode (int)			// x1
                                                    -IdentifierNode (int)			// y
                                                -ConstantNode (int)			// 1
                            -StatementNode (void)			// ans2=ans2+xorshift(x2^y,1);
                                -AssignNode (void)			// ans2=ans2+xorshift(x2^y,1)
                                    -IdentifierNode (int)			// ans2
                                    -AddNode (int)			// ans2+xorshift(x2^y,1)
                                        -IdentifierNode (int)			// ans2
                                        -ParenthesisOpNode (int)			// xorshift(x2^y,1)
                                            -IdentifierNode (BaseType)			// xorshift
                                            -ArgumentListNode (void)			// x2^y,1
                                                -XorNode (int)			// x2^y
                                                    -IdentifierNode (int)			// x2
                                                    -IdentifierNode (int)			// y
                                                -ConstantNode (int)			// 1
                            -StatementNode (void)			// ans3=ans3+xorshift(x3^y,1);
                                -AssignNode (void)			// ans3=ans3+xorshift(x3^y,1)
                                    -IdentifierNode (int)			// ans3
                                    -AddNode (int)			// ans3+xorshift(x3^y,1)
                                        -IdentifierNode (int)			// ans3
                                        -ParenthesisOpNode (int)			// xorshift(x3^y,1)
                                            -IdentifierNode (BaseType)			// xorshift
                                            -ArgumentListNode (void)			// x3^y,1
                                                -XorNode (int)			// x3^y
                                                    -IdentifierNode (int)			// x3
                                                    -IdentifierNode (int)			// y
                                                -ConstantNode (int)			// 1
            -StatementNode (void)			// print(toStringHex(ans0)+" ");
                -ParenthesisOpNode (void)			// print(toStringHex(ans0)+" ")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// toStringHex(ans0)+" "
                        -AddNode (string)			// toStringHex(ans0)+" "
                            -ParenthesisOpNode (string)			// toStringHex(ans0)
                                -IdentifierNode (BaseType)			// toStringHex
                                -ArgumentListNode (void)			// ans0
                                    -IdentifierNode (int)			// ans0
                            -StringLiteralNode (string)			// " "
            -StatementNode (void)			// print(toStringHex(ans1)+" ");
                -ParenthesisOpNode (void)			// print(toStringHex(ans1)+" ")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// toStringHex(ans1)+" "
                        -AddNode (string)			// toStringHex(ans1)+" "
                            -ParenthesisOpNode (string)			// toStringHex(ans1)
                                -IdentifierNode (BaseType)			// toStringHex
                                -ArgumentListNode (void)			// ans1
                                    -IdentifierNode (int)			// ans1
                            -StringLiteralNode (string)			// " "
            -StatementNode (void)			// print(toStringHex(ans2)+" ");
                -ParenthesisOpNode (void)			// print(toStringHex(ans2)+" ")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// toStringHex(ans2)+" "
                        -AddNode (string)			// toStringHex(ans2)+" "
                            -ParenthesisOpNode (string)			// toStringHex(ans2)
                                -IdentifierNode (BaseType)			// toStringHex
                                -ArgumentListNode (void)			// ans2
                                    -IdentifierNode (int)			// ans2
                            -StringLiteralNode (string)			// " "
            -StatementNode (void)			// print(toStringHex(ans3)+" ");
                -ParenthesisOpNode (void)			// print(toStringHex(ans3)+" ")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// toStringHex(ans3)+" "
                        -AddNode (string)			// toStringHex(ans3)+" "
                            -ParenthesisOpNode (string)			// toStringHex(ans3)
                                -IdentifierNode (BaseType)			// toStringHex
                                -ArgumentListNode (void)			// ans3
                                    -IdentifierNode (int)			// ans3
                            -StringLiteralNode (string)			// " "
            -StatementNode (void)			// println("");
                -ParenthesisOpNode (void)			// println("")
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// ""
                        -StringLiteralNode (string)			// ""
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
