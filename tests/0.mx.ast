-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}stringA;stringB;stringC;intN;stringcalc(stringA){intlen=A.length();if(1==len)returnA;intmid=len/2;stringL=calc(A.substring(0,mid-1));stringR=calc(A.substring(mid,len-1));if(L<R)returnL+R;elseif(L==R){intl=L.ord(0);intr=R.ord(0);if(l<r)returnL+R;returnR+L;}elseif(L>R)returnR+L;println("Never Ever!");}intmain(){A=getString();B=getString();N=B.parseInt();if(A.length()<N){println("length error!");return0;}C=calc(A.substring(0,N-1));println(C);return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -DeclarationNode (void)			// stringA;
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -DeclaratorListNode (void)			// A
            -InitDeclaratorNode (void)			// A
                -DeclaratorNode (void)			// A
    -DeclarationNode (void)			// stringB;
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -DeclaratorListNode (void)			// B
            -InitDeclaratorNode (void)			// B
                -DeclaratorNode (void)			// B
    -DeclarationNode (void)			// stringC;
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -DeclaratorListNode (void)			// C
            -InitDeclaratorNode (void)			// C
                -DeclaratorNode (void)			// C
    -DeclarationNode (void)			// intN;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// N
            -InitDeclaratorNode (void)			// N
                -DeclaratorNode (void)			// N
    -FuncDefinitionNode (void)			// stringcalc(stringA){intlen=A.length();if(1==len)returnA;intmid=len/2;stringL=calc(A.substring(0,mid-1));stringR=calc(A.substring(mid,len-1));if(L<R)returnL+R;elseif(L==R){intl=L.ord(0);intr=R.ord(0);if(l<r)returnL+R;returnR+L;}elseif(L>R)returnR+L;println("Never Ever!");}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// calc(stringA)
            -DeclaratorNode (void)			// calc
            -ArgumentTypeListNode (void)			// stringA
                -ArgumentDeclarationNode (void)			// stringA
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// A
        -BlockNode (void)			// {intlen=A.length();if(1==len)returnA;intmid=len/2;stringL=calc(A.substring(0,mid-1));stringR=calc(A.substring(mid,len-1));if(L<R)returnL+R;elseif(L==R){intl=L.ord(0);intr=R.ord(0);if(l<r)returnL+R;returnR+L;}elseif(L>R)returnR+L;println("Never Ever!");}
            -DeclarationNode (void)			// intlen=A.length();
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// len=A.length()
                    -InitDeclaratorNode (void)			// len=A.length()
                        -DeclaratorNode (void)			// len
                        -ParenthesisOpNode (int)			// A.length()
                            -DotOpNode (BaseType)			// A.length
                                -IdentifierNode (string)			// A
                            -ArgumentListNode (void)
            -IfNode (void)			// if(1==len)returnA;
                -EqualNode (bool)			// 1==len
                    -ConstantNode (int)			// 1
                    -IdentifierNode (int)			// len
                -ReturnNode (void)			// returnA;
                    -IdentifierNode (string)			// A
            -DeclarationNode (void)			// intmid=len/2;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// mid=len/2
                    -InitDeclaratorNode (void)			// mid=len/2
                        -DeclaratorNode (void)			// mid
                        -DivideNode (int)			// len/2
                            -IdentifierNode (int)			// len
                            -ConstantNode (int)			// 2
            -DeclarationNode (void)			// stringL=calc(A.substring(0,mid-1));
                -TypeNode (void)			// string
                    -TypeAttributeNode (void)			// string
                -DeclaratorListNode (void)			// L=calc(A.substring(0,mid-1))
                    -InitDeclaratorNode (void)			// L=calc(A.substring(0,mid-1))
                        -DeclaratorNode (void)			// L
                        -ParenthesisOpNode (string)			// calc(A.substring(0,mid-1))
                            -IdentifierNode (BaseType)			// calc
                            -ArgumentListNode (void)			// A.substring(0,mid-1)
                                -ParenthesisOpNode (string)			// A.substring(0,mid-1)
                                    -DotOpNode (BaseType)			// A.substring
                                        -IdentifierNode (string)			// A
                                    -ArgumentListNode (void)			// 0,mid-1
                                        -ConstantNode (int)			// 0
                                        -SubNode (int)			// mid-1
                                            -IdentifierNode (int)			// mid
                                            -ConstantNode (int)			// 1
            -DeclarationNode (void)			// stringR=calc(A.substring(mid,len-1));
                -TypeNode (void)			// string
                    -TypeAttributeNode (void)			// string
                -DeclaratorListNode (void)			// R=calc(A.substring(mid,len-1))
                    -InitDeclaratorNode (void)			// R=calc(A.substring(mid,len-1))
                        -DeclaratorNode (void)			// R
                        -ParenthesisOpNode (string)			// calc(A.substring(mid,len-1))
                            -IdentifierNode (BaseType)			// calc
                            -ArgumentListNode (void)			// A.substring(mid,len-1)
                                -ParenthesisOpNode (string)			// A.substring(mid,len-1)
                                    -DotOpNode (BaseType)			// A.substring
                                        -IdentifierNode (string)			// A
                                    -ArgumentListNode (void)			// mid,len-1
                                        -IdentifierNode (int)			// mid
                                        -SubNode (int)			// len-1
                                            -IdentifierNode (int)			// len
                                            -ConstantNode (int)			// 1
            -IfNode (void)			// if(L<R)returnL+R;elseif(L==R){intl=L.ord(0);intr=R.ord(0);if(l<r)returnL+R;returnR+L;}elseif(L>R)returnR+L;
                -LessThanNode (bool)			// L<R
                    -IdentifierNode (string)			// L
                    -IdentifierNode (string)			// R
                -ReturnNode (void)			// returnL+R;
                    -AddNode (string)			// L+R
                        -IdentifierNode (string)			// L
                        -IdentifierNode (string)			// R
                -IfNode (void)			// if(L==R){intl=L.ord(0);intr=R.ord(0);if(l<r)returnL+R;returnR+L;}elseif(L>R)returnR+L;
                    -EqualNode (bool)			// L==R
                        -IdentifierNode (string)			// L
                        -IdentifierNode (string)			// R
                    -BlockNode (void)			// {intl=L.ord(0);intr=R.ord(0);if(l<r)returnL+R;returnR+L;}
                        -DeclarationNode (void)			// intl=L.ord(0);
                            -TypeNode (void)			// int
                                -TypeAttributeNode (void)			// int
                            -DeclaratorListNode (void)			// l=L.ord(0)
                                -InitDeclaratorNode (void)			// l=L.ord(0)
                                    -DeclaratorNode (void)			// l
                                    -ParenthesisOpNode (int)			// L.ord(0)
                                        -DotOpNode (BaseType)			// L.ord
                                            -IdentifierNode (string)			// L
                                        -ArgumentListNode (void)			// 0
                                            -ConstantNode (int)			// 0
                        -DeclarationNode (void)			// intr=R.ord(0);
                            -TypeNode (void)			// int
                                -TypeAttributeNode (void)			// int
                            -DeclaratorListNode (void)			// r=R.ord(0)
                                -InitDeclaratorNode (void)			// r=R.ord(0)
                                    -DeclaratorNode (void)			// r
                                    -ParenthesisOpNode (int)			// R.ord(0)
                                        -DotOpNode (BaseType)			// R.ord
                                            -IdentifierNode (string)			// R
                                        -ArgumentListNode (void)			// 0
                                            -ConstantNode (int)			// 0
                        -IfNode (void)			// if(l<r)returnL+R;
                            -LessThanNode (bool)			// l<r
                                -IdentifierNode (int)			// l
                                -IdentifierNode (int)			// r
                            -ReturnNode (void)			// returnL+R;
                                -AddNode (string)			// L+R
                                    -IdentifierNode (string)			// L
                                    -IdentifierNode (string)			// R
                        -ReturnNode (void)			// returnR+L;
                            -AddNode (string)			// R+L
                                -IdentifierNode (string)			// R
                                -IdentifierNode (string)			// L
                    -IfNode (void)			// if(L>R)returnR+L;
                        -GreaterThanNode (bool)			// L>R
                            -IdentifierNode (string)			// L
                            -IdentifierNode (string)			// R
                        -ReturnNode (void)			// returnR+L;
                            -AddNode (string)			// R+L
                                -IdentifierNode (string)			// R
                                -IdentifierNode (string)			// L
            -StatementNode (void)			// println("Never Ever!");
                -ParenthesisOpNode (void)			// println("Never Ever!")
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// "Never Ever!"
                        -StringLiteralNode (string)			// "Never Ever!"
    -FuncDefinitionNode (void)			// intmain(){A=getString();B=getString();N=B.parseInt();if(A.length()<N){println("length error!");return0;}C=calc(A.substring(0,N-1));println(C);return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {A=getString();B=getString();N=B.parseInt();if(A.length()<N){println("length error!");return0;}C=calc(A.substring(0,N-1));println(C);return0;}
            -StatementNode (void)			// A=getString();
                -AssignNode (void)			// A=getString()
                    -IdentifierNode (string)			// A
                    -ParenthesisOpNode (string)			// getString()
                        -IdentifierNode (BaseType)			// getString
                        -ArgumentListNode (void)
            -StatementNode (void)			// B=getString();
                -AssignNode (void)			// B=getString()
                    -IdentifierNode (string)			// B
                    -ParenthesisOpNode (string)			// getString()
                        -IdentifierNode (BaseType)			// getString
                        -ArgumentListNode (void)
            -StatementNode (void)			// N=B.parseInt();
                -AssignNode (void)			// N=B.parseInt()
                    -IdentifierNode (int)			// N
                    -ParenthesisOpNode (int)			// B.parseInt()
                        -DotOpNode (BaseType)			// B.parseInt
                            -IdentifierNode (string)			// B
                        -ArgumentListNode (void)
            -IfNode (void)			// if(A.length()<N){println("length error!");return0;}
                -LessThanNode (bool)			// A.length()<N
                    -ParenthesisOpNode (int)			// A.length()
                        -DotOpNode (BaseType)			// A.length
                            -IdentifierNode (string)			// A
                        -ArgumentListNode (void)
                    -IdentifierNode (int)			// N
                -BlockNode (void)			// {println("length error!");return0;}
                    -StatementNode (void)			// println("length error!");
                        -ParenthesisOpNode (void)			// println("length error!")
                            -IdentifierNode (BaseType)			// println
                            -ArgumentListNode (void)			// "length error!"
                                -StringLiteralNode (string)			// "length error!"
                    -ReturnNode (void)			// return0;
                        -ConstantNode (int)			// 0
            -StatementNode (void)			// C=calc(A.substring(0,N-1));
                -AssignNode (void)			// C=calc(A.substring(0,N-1))
                    -IdentifierNode (string)			// C
                    -ParenthesisOpNode (string)			// calc(A.substring(0,N-1))
                        -IdentifierNode (BaseType)			// calc
                        -ArgumentListNode (void)			// A.substring(0,N-1)
                            -ParenthesisOpNode (string)			// A.substring(0,N-1)
                                -DotOpNode (BaseType)			// A.substring
                                    -IdentifierNode (string)			// A
                                -ArgumentListNode (void)			// 0,N-1
                                    -ConstantNode (int)			// 0
                                    -SubNode (int)			// N-1
                                        -IdentifierNode (int)			// N
                                        -ConstantNode (int)			// 1
            -StatementNode (void)			// println(C);
                -ParenthesisOpNode (void)			// println(C)
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// C
                        -IdentifierNode (string)			// C
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
