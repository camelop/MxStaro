-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}int[]a=newint[4];intmain(){int[]b=newint[a.size()];inti;for(i=0;i<a.size();i++){a[i]=0;b[i]=getInt();}for(i=0;i<a.size();i++){print(toString(a[i]));}println("");a=b;for(i=0;i<a.size();i++){print(toString(a[i]));}return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -DeclarationNode (void)			// int[]a=newint[4];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// a=newint[4]
            -InitDeclaratorNode (void)			// a=newint[4]
                -DeclaratorNode (void)			// a
                -NewNode (int[])			// newint[4]
                    -TypeNode (void)			// int[4]
                        -TypeAttributeNode (void)			// int[4]
                            -ConstantNode (int)			// 4
                    -ArgumentTypeListNode (void)
    -FuncDefinitionNode (void)			// intmain(){int[]b=newint[a.size()];inti;for(i=0;i<a.size();i++){a[i]=0;b[i]=getInt();}for(i=0;i<a.size();i++){print(toString(a[i]));}println("");a=b;for(i=0;i<a.size();i++){print(toString(a[i]));}return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {int[]b=newint[a.size()];inti;for(i=0;i<a.size();i++){a[i]=0;b[i]=getInt();}for(i=0;i<a.size();i++){print(toString(a[i]));}println("");a=b;for(i=0;i<a.size();i++){print(toString(a[i]));}return0;}
            -DeclarationNode (void)			// int[]b=newint[a.size()];
                -TypeNode (void)			// int[]
                    -TypeAttributeNode (void)			// int[]
                        -EmptyExpressionNode (void)
                -DeclaratorListNode (void)			// b=newint[a.size()]
                    -InitDeclaratorNode (void)			// b=newint[a.size()]
                        -DeclaratorNode (void)			// b
                        -NewNode (int[])			// newint[a.size()]
                            -TypeNode (void)			// int[a.size()]
                                -TypeAttributeNode (void)			// int[a.size()]
                                    -ParenthesisOpNode (int)			// a.size()
                                        -DotOpNode (BaseType)			// a.size
                                            -IdentifierNode (int[])			// a
                                        -ArgumentListNode (void)
                            -ArgumentTypeListNode (void)
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=0;i<a.size();i++){a[i]=0;b[i]=getInt();}
                -ForConditionNode (void)			// i=0;i<a.size();i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<a.size()
                        -IdentifierNode (int)			// i
                        -ParenthesisOpNode (int)			// a.size()
                            -DotOpNode (BaseType)			// a.size
                                -IdentifierNode (int[])			// a
                            -ArgumentListNode (void)
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {a[i]=0;b[i]=getInt();}
                    -StatementNode (void)			// a[i]=0;
                        -AssignNode (void)			// a[i]=0
                            -SubscriptOpNode (int)			// a[i]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 0
                    -StatementNode (void)			// b[i]=getInt();
                        -AssignNode (void)			// b[i]=getInt()
                            -SubscriptOpNode (int)			// b[i]
                                -IdentifierNode (int[])			// b
                                -IdentifierNode (int)			// i
                            -ParenthesisOpNode (int)			// getInt()
                                -IdentifierNode (BaseType)			// getInt
                                -ArgumentListNode (void)
            -ForNode (void)			// for(i=0;i<a.size();i++){print(toString(a[i]));}
                -ForConditionNode (void)			// i=0;i<a.size();i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<a.size()
                        -IdentifierNode (int)			// i
                        -ParenthesisOpNode (int)			// a.size()
                            -DotOpNode (BaseType)			// a.size
                                -IdentifierNode (int[])			// a
                            -ArgumentListNode (void)
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {print(toString(a[i]));}
                    -StatementNode (void)			// print(toString(a[i]));
                        -ParenthesisOpNode (void)			// print(toString(a[i]))
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// toString(a[i])
                                -ParenthesisOpNode (string)			// toString(a[i])
                                    -IdentifierNode (BaseType)			// toString
                                    -ArgumentListNode (void)			// a[i]
                                        -SubscriptOpNode (int)			// a[i]
                                            -IdentifierNode (int[])			// a
                                            -IdentifierNode (int)			// i
            -StatementNode (void)			// println("");
                -ParenthesisOpNode (void)			// println("")
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// ""
                        -StringLiteralNode (string)			// ""
            -StatementNode (void)			// a=b;
                -AssignNode (void)			// a=b
                    -IdentifierNode (int[])			// a
                    -IdentifierNode (int[])			// b
            -ForNode (void)			// for(i=0;i<a.size();i++){print(toString(a[i]));}
                -ForConditionNode (void)			// i=0;i<a.size();i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<a.size()
                        -IdentifierNode (int)			// i
                        -ParenthesisOpNode (int)			// a.size()
                            -DotOpNode (BaseType)			// a.size
                                -IdentifierNode (int[])			// a
                            -ArgumentListNode (void)
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {print(toString(a[i]));}
                    -StatementNode (void)			// print(toString(a[i]));
                        -ParenthesisOpNode (void)			// print(toString(a[i]))
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// toString(a[i])
                                -ParenthesisOpNode (string)			// toString(a[i])
                                    -IdentifierNode (BaseType)			// toString
                                    -ArgumentListNode (void)			// a[i]
                                        -SubscriptOpNode (int)			// a[i]
                                            -IdentifierNode (int[])			// a
                                            -IdentifierNode (int)			// i
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
