-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}voidprint(stringstr){}voidprintln(stringstr){}stringgetString(){return"abracadabra";}intgetInt(){return0;}stringtoString(inti){return"abracadabra";}stringmiracle="\"orange________\"";classmoment_ring{string[]singers;stringlryics;voidinit(){this.singers=newstring[9];lryics="kii te yo ima no kimochi wa\nsouda na souda na katari kirenai\n...";}}intdepth;voidanother_fun(){moment_ringsong;song.init();depth--;if(depth>0)another_fun();elsefun(2017);}classtest{stringtxt;testinit(){txt="you should pass this one";returnthis;}testinit2(testt){t.txt="TAT";this.txt=t.txt;returnt;}}intmain(){inta;{inta=0;println(toString(a));}a=1;testnico;println(nico.init().txt);println(toString(nico.init().txt.ord(0)));depth=3;another_fun();;returntoString(fun(10).ord(0)).ord(0);}stringfun(intpos){if(pos<0)return"";returnfun(pos-1)+toString(miracle.ord(pos));}<EOF>
    -ClassDefinitionNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}
        -FuncDefinitionNode (void)			// intlength(){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// length()
                -DeclaratorNode (void)			// length
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
        -FuncDefinitionNode (void)			// stringsubstring(intleft,intright){return"";}
            -TypeNode (void)			// string
                -TypeAttributeNode (void)			// string
            -FuncDeclaratorNode (void)			// substring(intleft,intright)
                -DeclaratorNode (void)			// substring
                -ArgumentTypeListNode (void)			// intleft,intright
                    -ArgumentDeclarationNode (void)			// intleft
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// left
                    -ArgumentDeclarationNode (void)			// intright
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// right
            -BlockNode (void)			// {return"";}
                -ReturnNode (void)			// return"";
                    -StringLiteralNode (string)			// ""
        -FuncDefinitionNode (void)			// intparseInt(){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// parseInt()
                -DeclaratorNode (void)			// parseInt
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
        -FuncDefinitionNode (void)			// intord(intpos){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// ord(intpos)
                -DeclaratorNode (void)			// ord
                -ArgumentTypeListNode (void)			// intpos
                    -ArgumentDeclarationNode (void)			// intpos
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// pos
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// voidprint(stringstr){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// voidprintln(stringstr){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"abracadabra";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"abracadabra";}
            -ReturnNode (void)			// return"abracadabra";
                -StringLiteralNode (string)			// "abracadabra"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"abracadabra";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"abracadabra";}
            -ReturnNode (void)			// return"abracadabra";
                -StringLiteralNode (string)			// "abracadabra"
    -DeclarationNode (void)			// stringmiracle="\"orange________\"";
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -DeclaratorListNode (void)			// miracle="\"orange________\""
            -InitDeclaratorNode (void)			// miracle="\"orange________\""
                -DeclaratorNode (void)			// miracle
                -StringLiteralNode (string)			// "\"orange________\""
    -ClassDefinitionNode (void)			// classmoment_ring{string[]singers;stringlryics;voidinit(){this.singers=newstring[9];lryics="kii te yo ima no kimochi wa\nsouda na souda na katari kirenai\n...";}}
        -DeclarationNode (void)			// string[]singers;
            -TypeNode (void)			// string[]
                -TypeAttributeNode (void)			// string[]
            -DeclaratorListNode (void)			// singers
                -InitDeclaratorNode (void)			// singers
                    -DeclaratorNode (void)			// singers
        -DeclarationNode (void)			// stringlryics;
            -TypeNode (void)			// string
                -TypeAttributeNode (void)			// string
            -DeclaratorListNode (void)			// lryics
                -InitDeclaratorNode (void)			// lryics
                    -DeclaratorNode (void)			// lryics
        -FuncDefinitionNode (void)			// voidinit(){this.singers=newstring[9];lryics="kii te yo ima no kimochi wa\nsouda na souda na katari kirenai\n...";}
            -TypeNode (void)			// void
                -TypeAttributeNode (void)			// void
            -FuncDeclaratorNode (void)			// init()
                -DeclaratorNode (void)			// init
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {this.singers=newstring[9];lryics="kii te yo ima no kimochi wa\nsouda na souda na katari kirenai\n...";}
                -StatementNode (void)			// this.singers=newstring[9];
                    -AssignNode (void)			// this.singers=newstring[9]
                        -DotOpNode (string[])			// this.singers
                            -ThisNode (moment_ring)			// this
                        -NewNode (string[])			// newstring[9]
                            -TypeNode (void)			// string[9]
                                -TypeAttributeNode (void)			// string[9]
                            -ArgumentTypeListNode (void)
                -StatementNode (void)			// lryics="kii te yo ima no kimochi wa\nsouda na souda na katari kirenai\n...";
                    -AssignNode (void)			// lryics="kii te yo ima no kimochi wa\nsouda na souda na katari kirenai\n..."
                        -IdentifierNode (string)			// lryics
                        -StringLiteralNode (string)			// "kii te yo ima no kimochi wa\nsouda na souda na katari kirenai\n..."
    -DeclarationNode (void)			// intdepth;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// depth
            -InitDeclaratorNode (void)			// depth
                -DeclaratorNode (void)			// depth
    -FuncDefinitionNode (void)			// voidanother_fun(){moment_ringsong;song.init();depth--;if(depth>0)another_fun();elsefun(2017);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// another_fun()
            -DeclaratorNode (void)			// another_fun
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {moment_ringsong;song.init();depth--;if(depth>0)another_fun();elsefun(2017);}
            -DeclarationNode (void)			// moment_ringsong;
                -TypeNode (void)			// moment_ring
                    -TypeAttributeNode (void)			// moment_ring
                -DeclaratorListNode (void)			// song
                    -InitDeclaratorNode (void)			// song
                        -DeclaratorNode (void)			// song
            -StatementNode (void)			// song.init();
                -ParenthesisOpNode (void)			// song.init()
                    -DotOpNode (BaseType)			// song.init
                        -IdentifierNode (moment_ring)			// song
                    -ArgumentListNode (void)
            -StatementNode (void)			// depth--;
                -PostfixSubNode (int)			// depth--
                    -IdentifierNode (int)			// depth
            -IfNode (void)			// if(depth>0)another_fun();elsefun(2017);
                -GreaterThanNode (bool)			// depth>0
                    -IdentifierNode (int)			// depth
                    -ConstantNode (int)			// 0
                -StatementNode (void)			// another_fun();
                    -ParenthesisOpNode (void)			// another_fun()
                        -IdentifierNode (BaseType)			// another_fun
                        -ArgumentListNode (void)
                -StatementNode (void)			// fun(2017);
                    -ParenthesisOpNode (string)			// fun(2017)
                        -IdentifierNode (BaseType)			// fun
                        -ArgumentListNode (void)			// 2017
                            -ConstantNode (int)			// 2017
    -ClassDefinitionNode (void)			// classtest{stringtxt;testinit(){txt="you should pass this one";returnthis;}testinit2(testt){t.txt="TAT";this.txt=t.txt;returnt;}}
        -DeclarationNode (void)			// stringtxt;
            -TypeNode (void)			// string
                -TypeAttributeNode (void)			// string
            -DeclaratorListNode (void)			// txt
                -InitDeclaratorNode (void)			// txt
                    -DeclaratorNode (void)			// txt
        -FuncDefinitionNode (void)			// testinit(){txt="you should pass this one";returnthis;}
            -TypeNode (void)			// test
                -TypeAttributeNode (void)			// test
            -FuncDeclaratorNode (void)			// init()
                -DeclaratorNode (void)			// init
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {txt="you should pass this one";returnthis;}
                -StatementNode (void)			// txt="you should pass this one";
                    -AssignNode (void)			// txt="you should pass this one"
                        -IdentifierNode (string)			// txt
                        -StringLiteralNode (string)			// "you should pass this one"
                -ReturnNode (void)			// returnthis;
                    -ThisNode (test)			// this
        -FuncDefinitionNode (void)			// testinit2(testt){t.txt="TAT";this.txt=t.txt;returnt;}
            -TypeNode (void)			// test
                -TypeAttributeNode (void)			// test
            -FuncDeclaratorNode (void)			// init2(testt)
                -DeclaratorNode (void)			// init2
                -ArgumentTypeListNode (void)			// testt
                    -ArgumentDeclarationNode (void)			// testt
                        -TypeNode (void)			// test
                            -TypeAttributeNode (void)			// test
                        -DeclaratorNode (void)			// t
            -BlockNode (void)			// {t.txt="TAT";this.txt=t.txt;returnt;}
                -StatementNode (void)			// t.txt="TAT";
                    -AssignNode (void)			// t.txt="TAT"
                        -DotOpNode (string)			// t.txt
                            -IdentifierNode (test)			// t
                        -StringLiteralNode (string)			// "TAT"
                -StatementNode (void)			// this.txt=t.txt;
                    -AssignNode (void)			// this.txt=t.txt
                        -DotOpNode (string)			// this.txt
                            -ThisNode (test)			// this
                        -DotOpNode (string)			// t.txt
                            -IdentifierNode (test)			// t
                -ReturnNode (void)			// returnt;
                    -IdentifierNode (test)			// t
    -FuncDefinitionNode (void)			// intmain(){inta;{inta=0;println(toString(a));}a=1;testnico;println(nico.init().txt);println(toString(nico.init().txt.ord(0)));depth=3;another_fun();;returntoString(fun(10).ord(0)).ord(0);}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inta;{inta=0;println(toString(a));}a=1;testnico;println(nico.init().txt);println(toString(nico.init().txt.ord(0)));depth=3;another_fun();;returntoString(fun(10).ord(0)).ord(0);}
            -DeclarationNode (void)			// inta;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// a
                    -InitDeclaratorNode (void)			// a
                        -DeclaratorNode (void)			// a
            -BlockNode (void)			// {inta=0;println(toString(a));}
                -DeclarationNode (void)			// inta=0;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// a=0
                        -InitDeclaratorNode (void)			// a=0
                            -DeclaratorNode (void)			// a
                            -ConstantNode (int)			// 0
                -StatementNode (void)			// println(toString(a));
                    -ParenthesisOpNode (void)			// println(toString(a))
                        -IdentifierNode (BaseType)			// println
                        -ArgumentListNode (void)			// toString(a)
                            -ParenthesisOpNode (string)			// toString(a)
                                -IdentifierNode (BaseType)			// toString
                                -ArgumentListNode (void)			// a
                                    -IdentifierNode (int)			// a
            -StatementNode (void)			// a=1;
                -AssignNode (void)			// a=1
                    -IdentifierNode (int)			// a
                    -ConstantNode (int)			// 1
            -DeclarationNode (void)			// testnico;
                -TypeNode (void)			// test
                    -TypeAttributeNode (void)			// test
                -DeclaratorListNode (void)			// nico
                    -InitDeclaratorNode (void)			// nico
                        -DeclaratorNode (void)			// nico
            -StatementNode (void)			// println(nico.init().txt);
                -ParenthesisOpNode (void)			// println(nico.init().txt)
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// nico.init().txt
                        -DotOpNode (string)			// nico.init().txt
                            -ParenthesisOpNode (test)			// nico.init()
                                -DotOpNode (BaseType)			// nico.init
                                    -IdentifierNode (test)			// nico
                                -ArgumentListNode (void)
            -StatementNode (void)			// println(toString(nico.init().txt.ord(0)));
                -ParenthesisOpNode (void)			// println(toString(nico.init().txt.ord(0)))
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// toString(nico.init().txt.ord(0))
                        -ParenthesisOpNode (string)			// toString(nico.init().txt.ord(0))
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// nico.init().txt.ord(0)
                                -ParenthesisOpNode (int)			// nico.init().txt.ord(0)
                                    -DotOpNode (BaseType)			// nico.init().txt.ord
                                        -DotOpNode (string)			// nico.init().txt
                                            -ParenthesisOpNode (test)			// nico.init()
                                                -DotOpNode (BaseType)			// nico.init
                                                    -IdentifierNode (test)			// nico
                                                -ArgumentListNode (void)
                                    -ArgumentListNode (void)			// 0
                                        -ConstantNode (int)			// 0
            -StatementNode (void)			// depth=3;
                -AssignNode (void)			// depth=3
                    -IdentifierNode (int)			// depth
                    -ConstantNode (int)			// 3
            -StatementNode (void)			// another_fun();
                -ParenthesisOpNode (void)			// another_fun()
                    -IdentifierNode (BaseType)			// another_fun
                    -ArgumentListNode (void)
            -StatementNode (void)			// ;
            -ReturnNode (void)			// returntoString(fun(10).ord(0)).ord(0);
                -ParenthesisOpNode (int)			// toString(fun(10).ord(0)).ord(0)
                    -DotOpNode (BaseType)			// toString(fun(10).ord(0)).ord
                        -ParenthesisOpNode (string)			// toString(fun(10).ord(0))
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// fun(10).ord(0)
                                -ParenthesisOpNode (int)			// fun(10).ord(0)
                                    -DotOpNode (BaseType)			// fun(10).ord
                                        -ParenthesisOpNode (string)			// fun(10)
                                            -IdentifierNode (BaseType)			// fun
                                            -ArgumentListNode (void)			// 10
                                                -ConstantNode (int)			// 10
                                    -ArgumentListNode (void)			// 0
                                        -ConstantNode (int)			// 0
                    -ArgumentListNode (void)			// 0
                        -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringfun(intpos){if(pos<0)return"";returnfun(pos-1)+toString(miracle.ord(pos));}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// fun(intpos)
            -DeclaratorNode (void)			// fun
            -ArgumentTypeListNode (void)			// intpos
                -ArgumentDeclarationNode (void)			// intpos
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// pos
        -BlockNode (void)			// {if(pos<0)return"";returnfun(pos-1)+toString(miracle.ord(pos));}
            -IfNode (void)			// if(pos<0)return"";
                -LessThanNode (bool)			// pos<0
                    -IdentifierNode (int)			// pos
                    -ConstantNode (int)			// 0
                -ReturnNode (void)			// return"";
                    -StringLiteralNode (string)			// ""
            -ReturnNode (void)			// returnfun(pos-1)+toString(miracle.ord(pos));
                -AddNode (void)			// fun(pos-1)+toString(miracle.ord(pos))
                    -ParenthesisOpNode (string)			// fun(pos-1)
                        -IdentifierNode (BaseType)			// fun
                        -ArgumentListNode (void)			// pos-1
                            -SubNode (int)			// pos-1
                                -IdentifierNode (int)			// pos
                                -ConstantNode (int)			// 1
                    -ParenthesisOpNode (string)			// toString(miracle.ord(pos))
                        -IdentifierNode (BaseType)			// toString
                        -ArgumentListNode (void)			// miracle.ord(pos)
                            -ParenthesisOpNode (int)			// miracle.ord(pos)
                                -DotOpNode (BaseType)			// miracle.ord
                                    -IdentifierNode (string)			// miracle
                                -ArgumentListNode (void)			// pos
                                    -IdentifierNode (int)			// pos
