-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}intN;intM;inti;intj;intprimeCount;intresultCount;int[]b=newint[1001];int[]prime=newint[170];int[]gps=newint[1001];int[]tmp=newint[1];int[][]result;voidorigin(intN){result=newint[N][];for(i=0;i<N;i++){result[i]=newint[N];for(j=0;j<N;j++)result[i][j]=0;}}intgetPrime(intN){intcount;inti;count=2;for(i=2;i<=N;i=i+1){println("gzotpa");if(b[i]==1){tmp[0]=tmp[0]+1;prime[tmp[0]]=i;gps[i]=tmp[0];}while(i*count<=N){b[i*count]=0;count=count+1;}count=2;}}intgetResult(intN,intk1,intk2){if(result[k1][k2]==-1)if(prime[k2]*2-prime[k1]<=N)if(b[prime[k2]*2-prime[k1]]!=0)result[k1][k2]=getResult(N,k2,gps[prime[k2]*2-prime[k1]])+1;if(result[k1][k2]==-1)result[k1][k2]=1;returnresult[k1][k2];}intprintF(intk1,intk2,intk3){print(toString(k1));while(k3>0){print(" ");print(toString(k2));k2=k2*2-k1;k1=(k1+k2)/2;k3=k3-1;}print("\n");}intmain(){origin(170);N=1000;M=getInt();primeCount=0;resultCount=0;tmp[0]=0;for(i=0;i<N+1;i=i+1){b[i]=1;gps[i]=0;}for(i=0;i<M+1;i=i+1){prime[i]=0;}for(i=0;i<=M;i=i+1){for(j=0;j<=M;j=j+1)result[i][j]=-1;}getPrime(N);primeCount=tmp[0];for(i=1;i<primeCount;i=i+1)for(j=i+1;j<=primeCount;j=j+1)if(result[i][j]==-1){result[i][j]=getResult(N,i,j);if(result[i][j]>1){printF(prime[i],prime[j],result[i][j]);resultCount=resultCount+1;}}print("Total: ");println(toString(resultCount));return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -DeclarationNode (void)			// intN;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// N
            -InitDeclaratorNode (void)			// N
                -DeclaratorNode (void)			// N
    -DeclarationNode (void)			// intM;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// M
            -InitDeclaratorNode (void)			// M
                -DeclaratorNode (void)			// M
    -DeclarationNode (void)			// inti;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i
            -InitDeclaratorNode (void)			// i
                -DeclaratorNode (void)			// i
    -DeclarationNode (void)			// intj;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// j
            -InitDeclaratorNode (void)			// j
                -DeclaratorNode (void)			// j
    -DeclarationNode (void)			// intprimeCount;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// primeCount
            -InitDeclaratorNode (void)			// primeCount
                -DeclaratorNode (void)			// primeCount
    -DeclarationNode (void)			// intresultCount;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// resultCount
            -InitDeclaratorNode (void)			// resultCount
                -DeclaratorNode (void)			// resultCount
    -DeclarationNode (void)			// int[]b=newint[1001];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
        -DeclaratorListNode (void)			// b=newint[1001]
            -InitDeclaratorNode (void)			// b=newint[1001]
                -DeclaratorNode (void)			// b
                -NewNode (int[])			// newint[1001]
                    -TypeNode (void)			// int[1001]
                        -TypeAttributeNode (void)			// int[1001]
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[]prime=newint[170];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
        -DeclaratorListNode (void)			// prime=newint[170]
            -InitDeclaratorNode (void)			// prime=newint[170]
                -DeclaratorNode (void)			// prime
                -NewNode (int[])			// newint[170]
                    -TypeNode (void)			// int[170]
                        -TypeAttributeNode (void)			// int[170]
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[]gps=newint[1001];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
        -DeclaratorListNode (void)			// gps=newint[1001]
            -InitDeclaratorNode (void)			// gps=newint[1001]
                -DeclaratorNode (void)			// gps
                -NewNode (int[])			// newint[1001]
                    -TypeNode (void)			// int[1001]
                        -TypeAttributeNode (void)			// int[1001]
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[]tmp=newint[1];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
        -DeclaratorListNode (void)			// tmp=newint[1]
            -InitDeclaratorNode (void)			// tmp=newint[1]
                -DeclaratorNode (void)			// tmp
                -NewNode (int[])			// newint[1]
                    -TypeNode (void)			// int[1]
                        -TypeAttributeNode (void)			// int[1]
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[][]result;
        -TypeNode (void)			// int[][]
            -TypeAttributeNode (void)			// int[][]
        -DeclaratorListNode (void)			// result
            -InitDeclaratorNode (void)			// result
                -DeclaratorNode (void)			// result
    -FuncDefinitionNode (void)			// voidorigin(intN){result=newint[N][];for(i=0;i<N;i++){result[i]=newint[N];for(j=0;j<N;j++)result[i][j]=0;}}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// origin(intN)
            -DeclaratorNode (void)			// origin
            -ArgumentTypeListNode (void)			// intN
                -ArgumentDeclarationNode (void)			// intN
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// N
        -BlockNode (void)			// {result=newint[N][];for(i=0;i<N;i++){result[i]=newint[N];for(j=0;j<N;j++)result[i][j]=0;}}
            -StatementNode (void)			// result=newint[N][];
                -AssignNode (void)			// result=newint[N][]
                    -IdentifierNode (int[][])			// result
                    -NewNode (int[][])			// newint[N][]
                        -TypeNode (void)			// int[N][]
                            -TypeAttributeNode (void)			// int[N][]
                        -ArgumentTypeListNode (void)
            -ForNode (void)			// for(i=0;i<N;i++){result[i]=newint[N];for(j=0;j<N;j++)result[i][j]=0;}
                -ForConditionNode (void)			// i=0;i<N;i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<N
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// N
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {result[i]=newint[N];for(j=0;j<N;j++)result[i][j]=0;}
                    -StatementNode (void)			// result[i]=newint[N];
                        -AssignNode (void)			// result[i]=newint[N]
                            -SubscriptOpNode (int[])			// result[i]
                                -IdentifierNode (int[][])			// result
                                -IdentifierNode (int)			// i
                            -NewNode (int[])			// newint[N]
                                -TypeNode (void)			// int[N]
                                    -TypeAttributeNode (void)			// int[N]
                                -ArgumentTypeListNode (void)
                    -ForNode (void)			// for(j=0;j<N;j++)result[i][j]=0;
                        -ForConditionNode (void)			// j=0;j<N;j++
                            -AssignNode (void)			// j=0
                                -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 0
                            -LessThanNode (bool)			// j<N
                                -IdentifierNode (int)			// j
                                -IdentifierNode (int)			// N
                            -PostfixAddNode (int)			// j++
                                -IdentifierNode (int)			// j
                        -StatementNode (void)			// result[i][j]=0;
                            -AssignNode (void)			// result[i][j]=0
                                -SubscriptOpNode (int)			// result[i][j]
                                    -SubscriptOpNode (int[])			// result[i]
                                        -IdentifierNode (int[][])			// result
                                        -IdentifierNode (int)			// i
                                    -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// intgetPrime(intN){intcount;inti;count=2;for(i=2;i<=N;i=i+1){println("gzotpa");if(b[i]==1){tmp[0]=tmp[0]+1;prime[tmp[0]]=i;gps[i]=tmp[0];}while(i*count<=N){b[i*count]=0;count=count+1;}count=2;}}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getPrime(intN)
            -DeclaratorNode (void)			// getPrime
            -ArgumentTypeListNode (void)			// intN
                -ArgumentDeclarationNode (void)			// intN
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// N
        -BlockNode (void)			// {intcount;inti;count=2;for(i=2;i<=N;i=i+1){println("gzotpa");if(b[i]==1){tmp[0]=tmp[0]+1;prime[tmp[0]]=i;gps[i]=tmp[0];}while(i*count<=N){b[i*count]=0;count=count+1;}count=2;}}
            -DeclarationNode (void)			// intcount;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// count
                    -InitDeclaratorNode (void)			// count
                        -DeclaratorNode (void)			// count
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -StatementNode (void)			// count=2;
                -AssignNode (void)			// count=2
                    -IdentifierNode (int)			// count
                    -ConstantNode (int)			// 2
            -ForNode (void)			// for(i=2;i<=N;i=i+1){println("gzotpa");if(b[i]==1){tmp[0]=tmp[0]+1;prime[tmp[0]]=i;gps[i]=tmp[0];}while(i*count<=N){b[i*count]=0;count=count+1;}count=2;}
                -ForConditionNode (void)			// i=2;i<=N;i=i+1
                    -AssignNode (void)			// i=2
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 2
                    -LessOrEqualThanNode (bool)			// i<=N
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// N
                    -AssignNode (void)			// i=i+1
                        -IdentifierNode (int)			// i
                        -AddNode (int)			// i+1
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                -BlockNode (void)			// {println("gzotpa");if(b[i]==1){tmp[0]=tmp[0]+1;prime[tmp[0]]=i;gps[i]=tmp[0];}while(i*count<=N){b[i*count]=0;count=count+1;}count=2;}
                    -StatementNode (void)			// println("gzotpa");
                        -ParenthesisOpNode (void)			// println("gzotpa")
                            -IdentifierNode (BaseType)			// println
                            -ArgumentListNode (void)			// "gzotpa"
                                -StringLiteralNode (string)			// "gzotpa"
                    -IfNode (void)			// if(b[i]==1){tmp[0]=tmp[0]+1;prime[tmp[0]]=i;gps[i]=tmp[0];}
                        -EqualNode (bool)			// b[i]==1
                            -SubscriptOpNode (int)			// b[i]
                                -IdentifierNode (int[])			// b
                                -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                        -BlockNode (void)			// {tmp[0]=tmp[0]+1;prime[tmp[0]]=i;gps[i]=tmp[0];}
                            -StatementNode (void)			// tmp[0]=tmp[0]+1;
                                -AssignNode (void)			// tmp[0]=tmp[0]+1
                                    -SubscriptOpNode (int)			// tmp[0]
                                        -IdentifierNode (int[])			// tmp
                                        -ConstantNode (int)			// 0
                                    -AddNode (int)			// tmp[0]+1
                                        -SubscriptOpNode (int)			// tmp[0]
                                            -IdentifierNode (int[])			// tmp
                                            -ConstantNode (int)			// 0
                                        -ConstantNode (int)			// 1
                            -StatementNode (void)			// prime[tmp[0]]=i;
                                -AssignNode (void)			// prime[tmp[0]]=i
                                    -SubscriptOpNode (int)			// prime[tmp[0]]
                                        -IdentifierNode (int[])			// prime
                                        -SubscriptOpNode (int)			// tmp[0]
                                            -IdentifierNode (int[])			// tmp
                                            -ConstantNode (int)			// 0
                                    -IdentifierNode (int)			// i
                            -StatementNode (void)			// gps[i]=tmp[0];
                                -AssignNode (void)			// gps[i]=tmp[0]
                                    -SubscriptOpNode (int)			// gps[i]
                                        -IdentifierNode (int[])			// gps
                                        -IdentifierNode (int)			// i
                                    -SubscriptOpNode (int)			// tmp[0]
                                        -IdentifierNode (int[])			// tmp
                                        -ConstantNode (int)			// 0
                    -WhileNode (void)			// while(i*count<=N){b[i*count]=0;count=count+1;}
                        -LessOrEqualThanNode (bool)			// i*count<=N
                            -MultiplyNode (int)			// i*count
                                -IdentifierNode (int)			// i
                                -IdentifierNode (int)			// count
                            -IdentifierNode (int)			// N
                        -BlockNode (void)			// {b[i*count]=0;count=count+1;}
                            -StatementNode (void)			// b[i*count]=0;
                                -AssignNode (void)			// b[i*count]=0
                                    -SubscriptOpNode (int)			// b[i*count]
                                        -IdentifierNode (int[])			// b
                                        -MultiplyNode (int)			// i*count
                                            -IdentifierNode (int)			// i
                                            -IdentifierNode (int)			// count
                                    -ConstantNode (int)			// 0
                            -StatementNode (void)			// count=count+1;
                                -AssignNode (void)			// count=count+1
                                    -IdentifierNode (int)			// count
                                    -AddNode (int)			// count+1
                                        -IdentifierNode (int)			// count
                                        -ConstantNode (int)			// 1
                    -StatementNode (void)			// count=2;
                        -AssignNode (void)			// count=2
                            -IdentifierNode (int)			// count
                            -ConstantNode (int)			// 2
    -FuncDefinitionNode (void)			// intgetResult(intN,intk1,intk2){if(result[k1][k2]==-1)if(prime[k2]*2-prime[k1]<=N)if(b[prime[k2]*2-prime[k1]]!=0)result[k1][k2]=getResult(N,k2,gps[prime[k2]*2-prime[k1]])+1;if(result[k1][k2]==-1)result[k1][k2]=1;returnresult[k1][k2];}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getResult(intN,intk1,intk2)
            -DeclaratorNode (void)			// getResult
            -ArgumentTypeListNode (void)			// intN,intk1,intk2
                -ArgumentDeclarationNode (void)			// intN
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// N
                -ArgumentDeclarationNode (void)			// intk1
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// k1
                -ArgumentDeclarationNode (void)			// intk2
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// k2
        -BlockNode (void)			// {if(result[k1][k2]==-1)if(prime[k2]*2-prime[k1]<=N)if(b[prime[k2]*2-prime[k1]]!=0)result[k1][k2]=getResult(N,k2,gps[prime[k2]*2-prime[k1]])+1;if(result[k1][k2]==-1)result[k1][k2]=1;returnresult[k1][k2];}
            -IfNode (void)			// if(result[k1][k2]==-1)if(prime[k2]*2-prime[k1]<=N)if(b[prime[k2]*2-prime[k1]]!=0)result[k1][k2]=getResult(N,k2,gps[prime[k2]*2-prime[k1]])+1;
                -EqualNode (bool)			// result[k1][k2]==-1
                    -SubscriptOpNode (int)			// result[k1][k2]
                        -SubscriptOpNode (int[])			// result[k1]
                            -IdentifierNode (int[][])			// result
                            -IdentifierNode (int)			// k1
                        -IdentifierNode (int)			// k2
                    -UnaryNegativeNode (int)			// -1
                        -ConstantNode (int)			// 1
                -IfNode (void)			// if(prime[k2]*2-prime[k1]<=N)if(b[prime[k2]*2-prime[k1]]!=0)result[k1][k2]=getResult(N,k2,gps[prime[k2]*2-prime[k1]])+1;
                    -LessOrEqualThanNode (bool)			// prime[k2]*2-prime[k1]<=N
                        -SubNode (int)			// prime[k2]*2-prime[k1]
                            -MultiplyNode (int)			// prime[k2]*2
                                -SubscriptOpNode (int)			// prime[k2]
                                    -IdentifierNode (int[])			// prime
                                    -IdentifierNode (int)			// k2
                                -ConstantNode (int)			// 2
                            -SubscriptOpNode (int)			// prime[k1]
                                -IdentifierNode (int[])			// prime
                                -IdentifierNode (int)			// k1
                        -IdentifierNode (int)			// N
                    -IfNode (void)			// if(b[prime[k2]*2-prime[k1]]!=0)result[k1][k2]=getResult(N,k2,gps[prime[k2]*2-prime[k1]])+1;
                        -InequalNode (bool)			// b[prime[k2]*2-prime[k1]]!=0
                            -SubscriptOpNode (int)			// b[prime[k2]*2-prime[k1]]
                                -IdentifierNode (int[])			// b
                                -SubNode (int)			// prime[k2]*2-prime[k1]
                                    -MultiplyNode (int)			// prime[k2]*2
                                        -SubscriptOpNode (int)			// prime[k2]
                                            -IdentifierNode (int[])			// prime
                                            -IdentifierNode (int)			// k2
                                        -ConstantNode (int)			// 2
                                    -SubscriptOpNode (int)			// prime[k1]
                                        -IdentifierNode (int[])			// prime
                                        -IdentifierNode (int)			// k1
                            -ConstantNode (int)			// 0
                        -StatementNode (void)			// result[k1][k2]=getResult(N,k2,gps[prime[k2]*2-prime[k1]])+1;
                            -AssignNode (void)			// result[k1][k2]=getResult(N,k2,gps[prime[k2]*2-prime[k1]])+1
                                -SubscriptOpNode (int)			// result[k1][k2]
                                    -SubscriptOpNode (int[])			// result[k1]
                                        -IdentifierNode (int[][])			// result
                                        -IdentifierNode (int)			// k1
                                    -IdentifierNode (int)			// k2
                                -AddNode (int)			// getResult(N,k2,gps[prime[k2]*2-prime[k1]])+1
                                    -ParenthesisOpNode (int)			// getResult(N,k2,gps[prime[k2]*2-prime[k1]])
                                        -IdentifierNode (BaseType)			// getResult
                                        -ArgumentListNode (void)			// N,k2,gps[prime[k2]*2-prime[k1]]
                                            -IdentifierNode (int)			// N
                                            -IdentifierNode (int)			// k2
                                            -SubscriptOpNode (int)			// gps[prime[k2]*2-prime[k1]]
                                                -IdentifierNode (int[])			// gps
                                                -SubNode (int)			// prime[k2]*2-prime[k1]
                                                    -MultiplyNode (int)			// prime[k2]*2
                                                        -SubscriptOpNode (int)			// prime[k2]
                                                            -IdentifierNode (int[])			// prime
                                                            -IdentifierNode (int)			// k2
                                                        -ConstantNode (int)			// 2
                                                    -SubscriptOpNode (int)			// prime[k1]
                                                        -IdentifierNode (int[])			// prime
                                                        -IdentifierNode (int)			// k1
                                    -ConstantNode (int)			// 1
            -IfNode (void)			// if(result[k1][k2]==-1)result[k1][k2]=1;
                -EqualNode (bool)			// result[k1][k2]==-1
                    -SubscriptOpNode (int)			// result[k1][k2]
                        -SubscriptOpNode (int[])			// result[k1]
                            -IdentifierNode (int[][])			// result
                            -IdentifierNode (int)			// k1
                        -IdentifierNode (int)			// k2
                    -UnaryNegativeNode (int)			// -1
                        -ConstantNode (int)			// 1
                -StatementNode (void)			// result[k1][k2]=1;
                    -AssignNode (void)			// result[k1][k2]=1
                        -SubscriptOpNode (int)			// result[k1][k2]
                            -SubscriptOpNode (int[])			// result[k1]
                                -IdentifierNode (int[][])			// result
                                -IdentifierNode (int)			// k1
                            -IdentifierNode (int)			// k2
                        -ConstantNode (int)			// 1
            -ReturnNode (void)			// returnresult[k1][k2];
                -SubscriptOpNode (int)			// result[k1][k2]
                    -SubscriptOpNode (int[])			// result[k1]
                        -IdentifierNode (int[][])			// result
                        -IdentifierNode (int)			// k1
                    -IdentifierNode (int)			// k2
    -FuncDefinitionNode (void)			// intprintF(intk1,intk2,intk3){print(toString(k1));while(k3>0){print(" ");print(toString(k2));k2=k2*2-k1;k1=(k1+k2)/2;k3=k3-1;}print("\n");}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// printF(intk1,intk2,intk3)
            -DeclaratorNode (void)			// printF
            -ArgumentTypeListNode (void)			// intk1,intk2,intk3
                -ArgumentDeclarationNode (void)			// intk1
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// k1
                -ArgumentDeclarationNode (void)			// intk2
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// k2
                -ArgumentDeclarationNode (void)			// intk3
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// k3
        -BlockNode (void)			// {print(toString(k1));while(k3>0){print(" ");print(toString(k2));k2=k2*2-k1;k1=(k1+k2)/2;k3=k3-1;}print("\n");}
            -StatementNode (void)			// print(toString(k1));
                -ParenthesisOpNode (void)			// print(toString(k1))
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// toString(k1)
                        -ParenthesisOpNode (string)			// toString(k1)
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// k1
                                -IdentifierNode (int)			// k1
            -WhileNode (void)			// while(k3>0){print(" ");print(toString(k2));k2=k2*2-k1;k1=(k1+k2)/2;k3=k3-1;}
                -GreaterThanNode (bool)			// k3>0
                    -IdentifierNode (int)			// k3
                    -ConstantNode (int)			// 0
                -BlockNode (void)			// {print(" ");print(toString(k2));k2=k2*2-k1;k1=(k1+k2)/2;k3=k3-1;}
                    -StatementNode (void)			// print(" ");
                        -ParenthesisOpNode (void)			// print(" ")
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// " "
                                -StringLiteralNode (string)			// " "
                    -StatementNode (void)			// print(toString(k2));
                        -ParenthesisOpNode (void)			// print(toString(k2))
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// toString(k2)
                                -ParenthesisOpNode (string)			// toString(k2)
                                    -IdentifierNode (BaseType)			// toString
                                    -ArgumentListNode (void)			// k2
                                        -IdentifierNode (int)			// k2
                    -StatementNode (void)			// k2=k2*2-k1;
                        -AssignNode (void)			// k2=k2*2-k1
                            -IdentifierNode (int)			// k2
                            -SubNode (int)			// k2*2-k1
                                -MultiplyNode (int)			// k2*2
                                    -IdentifierNode (int)			// k2
                                    -ConstantNode (int)			// 2
                                -IdentifierNode (int)			// k1
                    -StatementNode (void)			// k1=(k1+k2)/2;
                        -AssignNode (void)			// k1=(k1+k2)/2
                            -IdentifierNode (int)			// k1
                            -DivideNode (int)			// (k1+k2)/2
                                -AddNode (int)			// (k1+k2)
                                    -IdentifierNode (int)			// k1
                                    -IdentifierNode (int)			// k2
                                -ConstantNode (int)			// 2
                    -StatementNode (void)			// k3=k3-1;
                        -AssignNode (void)			// k3=k3-1
                            -IdentifierNode (int)			// k3
                            -SubNode (int)			// k3-1
                                -IdentifierNode (int)			// k3
                                -ConstantNode (int)			// 1
            -StatementNode (void)			// print("\n");
                -ParenthesisOpNode (void)			// print("\n")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// "\n"
                        -StringLiteralNode (string)			// "\n"
    -FuncDefinitionNode (void)			// intmain(){origin(170);N=1000;M=getInt();primeCount=0;resultCount=0;tmp[0]=0;for(i=0;i<N+1;i=i+1){b[i]=1;gps[i]=0;}for(i=0;i<M+1;i=i+1){prime[i]=0;}for(i=0;i<=M;i=i+1){for(j=0;j<=M;j=j+1)result[i][j]=-1;}getPrime(N);primeCount=tmp[0];for(i=1;i<primeCount;i=i+1)for(j=i+1;j<=primeCount;j=j+1)if(result[i][j]==-1){result[i][j]=getResult(N,i,j);if(result[i][j]>1){printF(prime[i],prime[j],result[i][j]);resultCount=resultCount+1;}}print("Total: ");println(toString(resultCount));return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {origin(170);N=1000;M=getInt();primeCount=0;resultCount=0;tmp[0]=0;for(i=0;i<N+1;i=i+1){b[i]=1;gps[i]=0;}for(i=0;i<M+1;i=i+1){prime[i]=0;}for(i=0;i<=M;i=i+1){for(j=0;j<=M;j=j+1)result[i][j]=-1;}getPrime(N);primeCount=tmp[0];for(i=1;i<primeCount;i=i+1)for(j=i+1;j<=primeCount;j=j+1)if(result[i][j]==-1){result[i][j]=getResult(N,i,j);if(result[i][j]>1){printF(prime[i],prime[j],result[i][j]);resultCount=resultCount+1;}}print("Total: ");println(toString(resultCount));return0;}
            -StatementNode (void)			// origin(170);
                -ParenthesisOpNode (void)			// origin(170)
                    -IdentifierNode (BaseType)			// origin
                    -ArgumentListNode (void)			// 170
                        -ConstantNode (int)			// 170
            -StatementNode (void)			// N=1000;
                -AssignNode (void)			// N=1000
                    -IdentifierNode (int)			// N
                    -ConstantNode (int)			// 1000
            -StatementNode (void)			// M=getInt();
                -AssignNode (void)			// M=getInt()
                    -IdentifierNode (int)			// M
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
            -StatementNode (void)			// primeCount=0;
                -AssignNode (void)			// primeCount=0
                    -IdentifierNode (int)			// primeCount
                    -ConstantNode (int)			// 0
            -StatementNode (void)			// resultCount=0;
                -AssignNode (void)			// resultCount=0
                    -IdentifierNode (int)			// resultCount
                    -ConstantNode (int)			// 0
            -StatementNode (void)			// tmp[0]=0;
                -AssignNode (void)			// tmp[0]=0
                    -SubscriptOpNode (int)			// tmp[0]
                        -IdentifierNode (int[])			// tmp
                        -ConstantNode (int)			// 0
                    -ConstantNode (int)			// 0
            -ForNode (void)			// for(i=0;i<N+1;i=i+1){b[i]=1;gps[i]=0;}
                -ForConditionNode (void)			// i=0;i<N+1;i=i+1
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<N+1
                        -IdentifierNode (int)			// i
                        -AddNode (int)			// N+1
                            -IdentifierNode (int)			// N
                            -ConstantNode (int)			// 1
                    -AssignNode (void)			// i=i+1
                        -IdentifierNode (int)			// i
                        -AddNode (int)			// i+1
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                -BlockNode (void)			// {b[i]=1;gps[i]=0;}
                    -StatementNode (void)			// b[i]=1;
                        -AssignNode (void)			// b[i]=1
                            -SubscriptOpNode (int)			// b[i]
                                -IdentifierNode (int[])			// b
                                -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                    -StatementNode (void)			// gps[i]=0;
                        -AssignNode (void)			// gps[i]=0
                            -SubscriptOpNode (int)			// gps[i]
                                -IdentifierNode (int[])			// gps
                                -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 0
            -ForNode (void)			// for(i=0;i<M+1;i=i+1){prime[i]=0;}
                -ForConditionNode (void)			// i=0;i<M+1;i=i+1
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<M+1
                        -IdentifierNode (int)			// i
                        -AddNode (int)			// M+1
                            -IdentifierNode (int)			// M
                            -ConstantNode (int)			// 1
                    -AssignNode (void)			// i=i+1
                        -IdentifierNode (int)			// i
                        -AddNode (int)			// i+1
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                -BlockNode (void)			// {prime[i]=0;}
                    -StatementNode (void)			// prime[i]=0;
                        -AssignNode (void)			// prime[i]=0
                            -SubscriptOpNode (int)			// prime[i]
                                -IdentifierNode (int[])			// prime
                                -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 0
            -ForNode (void)			// for(i=0;i<=M;i=i+1){for(j=0;j<=M;j=j+1)result[i][j]=-1;}
                -ForConditionNode (void)			// i=0;i<=M;i=i+1
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessOrEqualThanNode (bool)			// i<=M
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// M
                    -AssignNode (void)			// i=i+1
                        -IdentifierNode (int)			// i
                        -AddNode (int)			// i+1
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                -BlockNode (void)			// {for(j=0;j<=M;j=j+1)result[i][j]=-1;}
                    -ForNode (void)			// for(j=0;j<=M;j=j+1)result[i][j]=-1;
                        -ForConditionNode (void)			// j=0;j<=M;j=j+1
                            -AssignNode (void)			// j=0
                                -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 0
                            -LessOrEqualThanNode (bool)			// j<=M
                                -IdentifierNode (int)			// j
                                -IdentifierNode (int)			// M
                            -AssignNode (void)			// j=j+1
                                -IdentifierNode (int)			// j
                                -AddNode (int)			// j+1
                                    -IdentifierNode (int)			// j
                                    -ConstantNode (int)			// 1
                        -StatementNode (void)			// result[i][j]=-1;
                            -AssignNode (void)			// result[i][j]=-1
                                -SubscriptOpNode (int)			// result[i][j]
                                    -SubscriptOpNode (int[])			// result[i]
                                        -IdentifierNode (int[][])			// result
                                        -IdentifierNode (int)			// i
                                    -IdentifierNode (int)			// j
                                -UnaryNegativeNode (int)			// -1
                                    -ConstantNode (int)			// 1
            -StatementNode (void)			// getPrime(N);
                -ParenthesisOpNode (int)			// getPrime(N)
                    -IdentifierNode (BaseType)			// getPrime
                    -ArgumentListNode (void)			// N
                        -IdentifierNode (int)			// N
            -StatementNode (void)			// primeCount=tmp[0];
                -AssignNode (void)			// primeCount=tmp[0]
                    -IdentifierNode (int)			// primeCount
                    -SubscriptOpNode (int)			// tmp[0]
                        -IdentifierNode (int[])			// tmp
                        -ConstantNode (int)			// 0
            -ForNode (void)			// for(i=1;i<primeCount;i=i+1)for(j=i+1;j<=primeCount;j=j+1)if(result[i][j]==-1){result[i][j]=getResult(N,i,j);if(result[i][j]>1){printF(prime[i],prime[j],result[i][j]);resultCount=resultCount+1;}}
                -ForConditionNode (void)			// i=1;i<primeCount;i=i+1
                    -AssignNode (void)			// i=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -LessThanNode (bool)			// i<primeCount
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// primeCount
                    -AssignNode (void)			// i=i+1
                        -IdentifierNode (int)			// i
                        -AddNode (int)			// i+1
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                -ForNode (void)			// for(j=i+1;j<=primeCount;j=j+1)if(result[i][j]==-1){result[i][j]=getResult(N,i,j);if(result[i][j]>1){printF(prime[i],prime[j],result[i][j]);resultCount=resultCount+1;}}
                    -ForConditionNode (void)			// j=i+1;j<=primeCount;j=j+1
                        -AssignNode (void)			// j=i+1
                            -IdentifierNode (int)			// j
                            -AddNode (int)			// i+1
                                -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 1
                        -LessOrEqualThanNode (bool)			// j<=primeCount
                            -IdentifierNode (int)			// j
                            -IdentifierNode (int)			// primeCount
                        -AssignNode (void)			// j=j+1
                            -IdentifierNode (int)			// j
                            -AddNode (int)			// j+1
                                -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 1
                    -IfNode (void)			// if(result[i][j]==-1){result[i][j]=getResult(N,i,j);if(result[i][j]>1){printF(prime[i],prime[j],result[i][j]);resultCount=resultCount+1;}}
                        -EqualNode (bool)			// result[i][j]==-1
                            -SubscriptOpNode (int)			// result[i][j]
                                -SubscriptOpNode (int[])			// result[i]
                                    -IdentifierNode (int[][])			// result
                                    -IdentifierNode (int)			// i
                                -IdentifierNode (int)			// j
                            -UnaryNegativeNode (int)			// -1
                                -ConstantNode (int)			// 1
                        -BlockNode (void)			// {result[i][j]=getResult(N,i,j);if(result[i][j]>1){printF(prime[i],prime[j],result[i][j]);resultCount=resultCount+1;}}
                            -StatementNode (void)			// result[i][j]=getResult(N,i,j);
                                -AssignNode (void)			// result[i][j]=getResult(N,i,j)
                                    -SubscriptOpNode (int)			// result[i][j]
                                        -SubscriptOpNode (int[])			// result[i]
                                            -IdentifierNode (int[][])			// result
                                            -IdentifierNode (int)			// i
                                        -IdentifierNode (int)			// j
                                    -ParenthesisOpNode (int)			// getResult(N,i,j)
                                        -IdentifierNode (BaseType)			// getResult
                                        -ArgumentListNode (void)			// N,i,j
                                            -IdentifierNode (int)			// N
                                            -IdentifierNode (int)			// i
                                            -IdentifierNode (int)			// j
                            -IfNode (void)			// if(result[i][j]>1){printF(prime[i],prime[j],result[i][j]);resultCount=resultCount+1;}
                                -GreaterThanNode (bool)			// result[i][j]>1
                                    -SubscriptOpNode (int)			// result[i][j]
                                        -SubscriptOpNode (int[])			// result[i]
                                            -IdentifierNode (int[][])			// result
                                            -IdentifierNode (int)			// i
                                        -IdentifierNode (int)			// j
                                    -ConstantNode (int)			// 1
                                -BlockNode (void)			// {printF(prime[i],prime[j],result[i][j]);resultCount=resultCount+1;}
                                    -StatementNode (void)			// printF(prime[i],prime[j],result[i][j]);
                                        -ParenthesisOpNode (int)			// printF(prime[i],prime[j],result[i][j])
                                            -IdentifierNode (BaseType)			// printF
                                            -ArgumentListNode (void)			// prime[i],prime[j],result[i][j]
                                                -SubscriptOpNode (int)			// prime[i]
                                                    -IdentifierNode (int[])			// prime
                                                    -IdentifierNode (int)			// i
                                                -SubscriptOpNode (int)			// prime[j]
                                                    -IdentifierNode (int[])			// prime
                                                    -IdentifierNode (int)			// j
                                                -SubscriptOpNode (int)			// result[i][j]
                                                    -SubscriptOpNode (int[])			// result[i]
                                                        -IdentifierNode (int[][])			// result
                                                        -IdentifierNode (int)			// i
                                                    -IdentifierNode (int)			// j
                                    -StatementNode (void)			// resultCount=resultCount+1;
                                        -AssignNode (void)			// resultCount=resultCount+1
                                            -IdentifierNode (int)			// resultCount
                                            -AddNode (int)			// resultCount+1
                                                -IdentifierNode (int)			// resultCount
                                                -ConstantNode (int)			// 1
            -StatementNode (void)			// print("Total: ");
                -ParenthesisOpNode (void)			// print("Total: ")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// "Total: "
                        -StringLiteralNode (string)			// "Total: "
            -StatementNode (void)			// println(toString(resultCount));
                -ParenthesisOpNode (void)			// println(toString(resultCount))
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// toString(resultCount)
                        -ParenthesisOpNode (string)			// toString(resultCount)
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// resultCount
                                -IdentifierNode (int)			// resultCount
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
