-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}intN;inth=99;inti=100;intj=101;intk=102;inttotal=0;intmain(){inta;intb;intc;intd;inte;intf;N=6;for(a=1;a<=N;a++)for(b=1;b<=N;b++)for(c=1;c<=N;c++)for(d=1;d<=N;d++)for(e=1;e<=N;e++)for(f=1;f<=N;f++)if(a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j&&h!=k){total++;}println(toString(total));return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -DeclarationNode (void)			// intN;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// N
            -InitDeclaratorNode (void)			// N
                -DeclaratorNode (void)			// N
    -DeclarationNode (void)			// inth=99;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// h=99
            -InitDeclaratorNode (void)			// h=99
                -DeclaratorNode (void)			// h
                -ConstantNode (int)			// 99
    -DeclarationNode (void)			// inti=100;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i=100
            -InitDeclaratorNode (void)			// i=100
                -DeclaratorNode (void)			// i
                -ConstantNode (int)			// 100
    -DeclarationNode (void)			// intj=101;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// j=101
            -InitDeclaratorNode (void)			// j=101
                -DeclaratorNode (void)			// j
                -ConstantNode (int)			// 101
    -DeclarationNode (void)			// intk=102;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// k=102
            -InitDeclaratorNode (void)			// k=102
                -DeclaratorNode (void)			// k
                -ConstantNode (int)			// 102
    -DeclarationNode (void)			// inttotal=0;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// total=0
            -InitDeclaratorNode (void)			// total=0
                -DeclaratorNode (void)			// total
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// intmain(){inta;intb;intc;intd;inte;intf;N=6;for(a=1;a<=N;a++)for(b=1;b<=N;b++)for(c=1;c<=N;c++)for(d=1;d<=N;d++)for(e=1;e<=N;e++)for(f=1;f<=N;f++)if(a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j&&h!=k){total++;}println(toString(total));return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inta;intb;intc;intd;inte;intf;N=6;for(a=1;a<=N;a++)for(b=1;b<=N;b++)for(c=1;c<=N;c++)for(d=1;d<=N;d++)for(e=1;e<=N;e++)for(f=1;f<=N;f++)if(a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j&&h!=k){total++;}println(toString(total));return0;}
            -DeclarationNode (void)			// inta;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// a
                    -InitDeclaratorNode (void)			// a
                        -DeclaratorNode (void)			// a
            -DeclarationNode (void)			// intb;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// b
                    -InitDeclaratorNode (void)			// b
                        -DeclaratorNode (void)			// b
            -DeclarationNode (void)			// intc;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// c
                    -InitDeclaratorNode (void)			// c
                        -DeclaratorNode (void)			// c
            -DeclarationNode (void)			// intd;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// d
                    -InitDeclaratorNode (void)			// d
                        -DeclaratorNode (void)			// d
            -DeclarationNode (void)			// inte;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// e
                    -InitDeclaratorNode (void)			// e
                        -DeclaratorNode (void)			// e
            -DeclarationNode (void)			// intf;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// f
                    -InitDeclaratorNode (void)			// f
                        -DeclaratorNode (void)			// f
            -StatementNode (void)			// N=6;
                -AssignNode (void)			// N=6
                    -IdentifierNode (int)			// N
                    -ConstantNode (int)			// 6
            -ForNode (void)			// for(a=1;a<=N;a++)for(b=1;b<=N;b++)for(c=1;c<=N;c++)for(d=1;d<=N;d++)for(e=1;e<=N;e++)for(f=1;f<=N;f++)if(a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j&&h!=k){total++;}
                -ForConditionNode (void)			// a=1;a<=N;a++
                    -AssignNode (void)			// a=1
                        -IdentifierNode (int)			// a
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// a<=N
                        -IdentifierNode (int)			// a
                        -IdentifierNode (int)			// N
                    -PostfixAddNode (int)			// a++
                        -IdentifierNode (int)			// a
                -ForNode (void)			// for(b=1;b<=N;b++)for(c=1;c<=N;c++)for(d=1;d<=N;d++)for(e=1;e<=N;e++)for(f=1;f<=N;f++)if(a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j&&h!=k){total++;}
                    -ForConditionNode (void)			// b=1;b<=N;b++
                        -AssignNode (void)			// b=1
                            -IdentifierNode (int)			// b
                            -ConstantNode (int)			// 1
                        -LessOrEqualThanNode (bool)			// b<=N
                            -IdentifierNode (int)			// b
                            -IdentifierNode (int)			// N
                        -PostfixAddNode (int)			// b++
                            -IdentifierNode (int)			// b
                    -ForNode (void)			// for(c=1;c<=N;c++)for(d=1;d<=N;d++)for(e=1;e<=N;e++)for(f=1;f<=N;f++)if(a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j&&h!=k){total++;}
                        -ForConditionNode (void)			// c=1;c<=N;c++
                            -AssignNode (void)			// c=1
                                -IdentifierNode (int)			// c
                                -ConstantNode (int)			// 1
                            -LessOrEqualThanNode (bool)			// c<=N
                                -IdentifierNode (int)			// c
                                -IdentifierNode (int)			// N
                            -PostfixAddNode (int)			// c++
                                -IdentifierNode (int)			// c
                        -ForNode (void)			// for(d=1;d<=N;d++)for(e=1;e<=N;e++)for(f=1;f<=N;f++)if(a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j&&h!=k){total++;}
                            -ForConditionNode (void)			// d=1;d<=N;d++
                                -AssignNode (void)			// d=1
                                    -IdentifierNode (int)			// d
                                    -ConstantNode (int)			// 1
                                -LessOrEqualThanNode (bool)			// d<=N
                                    -IdentifierNode (int)			// d
                                    -IdentifierNode (int)			// N
                                -PostfixAddNode (int)			// d++
                                    -IdentifierNode (int)			// d
                            -ForNode (void)			// for(e=1;e<=N;e++)for(f=1;f<=N;f++)if(a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j&&h!=k){total++;}
                                -ForConditionNode (void)			// e=1;e<=N;e++
                                    -AssignNode (void)			// e=1
                                        -IdentifierNode (int)			// e
                                        -ConstantNode (int)			// 1
                                    -LessOrEqualThanNode (bool)			// e<=N
                                        -IdentifierNode (int)			// e
                                        -IdentifierNode (int)			// N
                                    -PostfixAddNode (int)			// e++
                                        -IdentifierNode (int)			// e
                                -ForNode (void)			// for(f=1;f<=N;f++)if(a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j&&h!=k){total++;}
                                    -ForConditionNode (void)			// f=1;f<=N;f++
                                        -AssignNode (void)			// f=1
                                            -IdentifierNode (int)			// f
                                            -ConstantNode (int)			// 1
                                        -LessOrEqualThanNode (bool)			// f<=N
                                            -IdentifierNode (int)			// f
                                            -IdentifierNode (int)			// N
                                        -PostfixAddNode (int)			// f++
                                            -IdentifierNode (int)			// f
                                    -IfNode (void)			// if(a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j&&h!=k){total++;}
                                        -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j&&h!=k
                                            -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k&&i!=j
                                                -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j&&f!=k
                                                    -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i&&f!=j
                                                        -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h&&f!=i
                                                            -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k&&f!=h
                                                                -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j&&e!=k
                                                                    -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i&&e!=j
                                                                        -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h&&e!=i
                                                                            -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f&&e!=h
                                                                                -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k&&e!=f
                                                                                    -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j&&d!=k
                                                                                        -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i&&d!=j
                                                                                            -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h&&d!=i
                                                                                                -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f&&d!=h
                                                                                                    -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e&&d!=f
                                                                                                        -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k&&d!=e
                                                                                                            -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j&&c!=k
                                                                                                                -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i&&c!=j
                                                                                                                    -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h&&c!=i
                                                                                                                        -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f&&c!=h
                                                                                                                            -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e&&c!=f
                                                                                                                                -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d&&c!=e
                                                                                                                                    -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k&&c!=d
                                                                                                                                        -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j&&b!=k
                                                                                                                                            -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i&&b!=j
                                                                                                                                                -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h&&b!=i
                                                                                                                                                    -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f&&b!=h
                                                                                                                                                        -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e&&b!=f
                                                                                                                                                            -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d&&b!=e
                                                                                                                                                                -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c&&b!=d
                                                                                                                                                                    -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k&&b!=c
                                                                                                                                                                        -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j&&a!=k
                                                                                                                                                                            -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i&&a!=j
                                                                                                                                                                                -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h&&a!=i
                                                                                                                                                                                    -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f&&a!=h
                                                                                                                                                                                        -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e&&a!=f
                                                                                                                                                                                            -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d&&a!=e
                                                                                                                                                                                                -LogicalAndNode (bool)			// a!=b&&a!=c&&a!=d
                                                                                                                                                                                                    -LogicalAndNode (bool)			// a!=b&&a!=c
                                                                                                                                                                                                        -InequalNode (bool)			// a!=b
                                                                                                                                                                                                            -IdentifierNode (int)			// a
                                                                                                                                                                                                            -IdentifierNode (int)			// b
                                                                                                                                                                                                        -InequalNode (bool)			// a!=c
                                                                                                                                                                                                            -IdentifierNode (int)			// a
                                                                                                                                                                                                            -IdentifierNode (int)			// c
                                                                                                                                                                                                    -InequalNode (bool)			// a!=d
                                                                                                                                                                                                        -IdentifierNode (int)			// a
                                                                                                                                                                                                        -IdentifierNode (int)			// d
                                                                                                                                                                                                -InequalNode (bool)			// a!=e
                                                                                                                                                                                                    -IdentifierNode (int)			// a
                                                                                                                                                                                                    -IdentifierNode (int)			// e
                                                                                                                                                                                            -InequalNode (bool)			// a!=f
                                                                                                                                                                                                -IdentifierNode (int)			// a
                                                                                                                                                                                                -IdentifierNode (int)			// f
                                                                                                                                                                                        -InequalNode (bool)			// a!=h
                                                                                                                                                                                            -IdentifierNode (int)			// a
                                                                                                                                                                                            -IdentifierNode (int)			// h
                                                                                                                                                                                    -InequalNode (bool)			// a!=i
                                                                                                                                                                                        -IdentifierNode (int)			// a
                                                                                                                                                                                        -IdentifierNode (int)			// i
                                                                                                                                                                                -InequalNode (bool)			// a!=j
                                                                                                                                                                                    -IdentifierNode (int)			// a
                                                                                                                                                                                    -IdentifierNode (int)			// j
                                                                                                                                                                            -InequalNode (bool)			// a!=k
                                                                                                                                                                                -IdentifierNode (int)			// a
                                                                                                                                                                                -IdentifierNode (int)			// k
                                                                                                                                                                        -InequalNode (bool)			// b!=c
                                                                                                                                                                            -IdentifierNode (int)			// b
                                                                                                                                                                            -IdentifierNode (int)			// c
                                                                                                                                                                    -InequalNode (bool)			// b!=d
                                                                                                                                                                        -IdentifierNode (int)			// b
                                                                                                                                                                        -IdentifierNode (int)			// d
                                                                                                                                                                -InequalNode (bool)			// b!=e
                                                                                                                                                                    -IdentifierNode (int)			// b
                                                                                                                                                                    -IdentifierNode (int)			// e
                                                                                                                                                            -InequalNode (bool)			// b!=f
                                                                                                                                                                -IdentifierNode (int)			// b
                                                                                                                                                                -IdentifierNode (int)			// f
                                                                                                                                                        -InequalNode (bool)			// b!=h
                                                                                                                                                            -IdentifierNode (int)			// b
                                                                                                                                                            -IdentifierNode (int)			// h
                                                                                                                                                    -InequalNode (bool)			// b!=i
                                                                                                                                                        -IdentifierNode (int)			// b
                                                                                                                                                        -IdentifierNode (int)			// i
                                                                                                                                                -InequalNode (bool)			// b!=j
                                                                                                                                                    -IdentifierNode (int)			// b
                                                                                                                                                    -IdentifierNode (int)			// j
                                                                                                                                            -InequalNode (bool)			// b!=k
                                                                                                                                                -IdentifierNode (int)			// b
                                                                                                                                                -IdentifierNode (int)			// k
                                                                                                                                        -InequalNode (bool)			// c!=d
                                                                                                                                            -IdentifierNode (int)			// c
                                                                                                                                            -IdentifierNode (int)			// d
                                                                                                                                    -InequalNode (bool)			// c!=e
                                                                                                                                        -IdentifierNode (int)			// c
                                                                                                                                        -IdentifierNode (int)			// e
                                                                                                                                -InequalNode (bool)			// c!=f
                                                                                                                                    -IdentifierNode (int)			// c
                                                                                                                                    -IdentifierNode (int)			// f
                                                                                                                            -InequalNode (bool)			// c!=h
                                                                                                                                -IdentifierNode (int)			// c
                                                                                                                                -IdentifierNode (int)			// h
                                                                                                                        -InequalNode (bool)			// c!=i
                                                                                                                            -IdentifierNode (int)			// c
                                                                                                                            -IdentifierNode (int)			// i
                                                                                                                    -InequalNode (bool)			// c!=j
                                                                                                                        -IdentifierNode (int)			// c
                                                                                                                        -IdentifierNode (int)			// j
                                                                                                                -InequalNode (bool)			// c!=k
                                                                                                                    -IdentifierNode (int)			// c
                                                                                                                    -IdentifierNode (int)			// k
                                                                                                            -InequalNode (bool)			// d!=e
                                                                                                                -IdentifierNode (int)			// d
                                                                                                                -IdentifierNode (int)			// e
                                                                                                        -InequalNode (bool)			// d!=f
                                                                                                            -IdentifierNode (int)			// d
                                                                                                            -IdentifierNode (int)			// f
                                                                                                    -InequalNode (bool)			// d!=h
                                                                                                        -IdentifierNode (int)			// d
                                                                                                        -IdentifierNode (int)			// h
                                                                                                -InequalNode (bool)			// d!=i
                                                                                                    -IdentifierNode (int)			// d
                                                                                                    -IdentifierNode (int)			// i
                                                                                            -InequalNode (bool)			// d!=j
                                                                                                -IdentifierNode (int)			// d
                                                                                                -IdentifierNode (int)			// j
                                                                                        -InequalNode (bool)			// d!=k
                                                                                            -IdentifierNode (int)			// d
                                                                                            -IdentifierNode (int)			// k
                                                                                    -InequalNode (bool)			// e!=f
                                                                                        -IdentifierNode (int)			// e
                                                                                        -IdentifierNode (int)			// f
                                                                                -InequalNode (bool)			// e!=h
                                                                                    -IdentifierNode (int)			// e
                                                                                    -IdentifierNode (int)			// h
                                                                            -InequalNode (bool)			// e!=i
                                                                                -IdentifierNode (int)			// e
                                                                                -IdentifierNode (int)			// i
                                                                        -InequalNode (bool)			// e!=j
                                                                            -IdentifierNode (int)			// e
                                                                            -IdentifierNode (int)			// j
                                                                    -InequalNode (bool)			// e!=k
                                                                        -IdentifierNode (int)			// e
                                                                        -IdentifierNode (int)			// k
                                                                -InequalNode (bool)			// f!=h
                                                                    -IdentifierNode (int)			// f
                                                                    -IdentifierNode (int)			// h
                                                            -InequalNode (bool)			// f!=i
                                                                -IdentifierNode (int)			// f
                                                                -IdentifierNode (int)			// i
                                                        -InequalNode (bool)			// f!=j
                                                            -IdentifierNode (int)			// f
                                                            -IdentifierNode (int)			// j
                                                    -InequalNode (bool)			// f!=k
                                                        -IdentifierNode (int)			// f
                                                        -IdentifierNode (int)			// k
                                                -InequalNode (bool)			// i!=j
                                                    -IdentifierNode (int)			// i
                                                    -IdentifierNode (int)			// j
                                            -InequalNode (bool)			// h!=k
                                                -IdentifierNode (int)			// h
                                                -IdentifierNode (int)			// k
                                        -BlockNode (void)			// {total++;}
                                            -StatementNode (void)			// total++;
                                                -PostfixAddNode (int)			// total++
                                                    -IdentifierNode (int)			// total
            -StatementNode (void)			// println(toString(total));
                -ParenthesisOpNode (void)			// println(toString(total))
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// toString(total)
                        -ParenthesisOpNode (string)			// toString(total)
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// total
                                -IdentifierNode (int)			// total
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
