-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}intMAXN=10005;intMAXM=10005;intmain(){intM;intN;M=getInt();N=getInt();int[]w=newint[MAXN];int[]t=newint[MAXN];int[]DP=newint[MAXN];inti;intj;for(i=0;i<N;++i){w[i]=getInt();t[i]=getInt();}for(i=0;i<N;++i)for(j=t[i];j<=M;++j)if(DP[j]<=DP[j-t[i]]+w[i]){}print(toString(DP[M]));return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -DeclarationNode (void)			// intMAXN=10005;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// MAXN=10005
            -InitDeclaratorNode (void)			// MAXN=10005
                -DeclaratorNode (void)			// MAXN
                -ConstantNode (int)			// 10005
    -DeclarationNode (void)			// intMAXM=10005;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// MAXM=10005
            -InitDeclaratorNode (void)			// MAXM=10005
                -DeclaratorNode (void)			// MAXM
                -ConstantNode (int)			// 10005
    -FuncDefinitionNode (void)			// intmain(){intM;intN;M=getInt();N=getInt();int[]w=newint[MAXN];int[]t=newint[MAXN];int[]DP=newint[MAXN];inti;intj;for(i=0;i<N;++i){w[i]=getInt();t[i]=getInt();}for(i=0;i<N;++i)for(j=t[i];j<=M;++j)if(DP[j]<=DP[j-t[i]]+w[i]){}print(toString(DP[M]));return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {intM;intN;M=getInt();N=getInt();int[]w=newint[MAXN];int[]t=newint[MAXN];int[]DP=newint[MAXN];inti;intj;for(i=0;i<N;++i){w[i]=getInt();t[i]=getInt();}for(i=0;i<N;++i)for(j=t[i];j<=M;++j)if(DP[j]<=DP[j-t[i]]+w[i]){}print(toString(DP[M]));return0;}
            -DeclarationNode (void)			// intM;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// M
                    -InitDeclaratorNode (void)			// M
                        -DeclaratorNode (void)			// M
            -DeclarationNode (void)			// intN;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// N
                    -InitDeclaratorNode (void)			// N
                        -DeclaratorNode (void)			// N
            -StatementNode (void)			// M=getInt();
                -AssignNode (void)			// M=getInt()
                    -IdentifierNode (int)			// M
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
            -StatementNode (void)			// N=getInt();
                -AssignNode (void)			// N=getInt()
                    -IdentifierNode (int)			// N
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
            -DeclarationNode (void)			// int[]w=newint[MAXN];
                -TypeNode (void)			// int[]
                    -TypeAttributeNode (void)			// int[]
                        -EmptyExpressionNode (void)
                -DeclaratorListNode (void)			// w=newint[MAXN]
                    -InitDeclaratorNode (void)			// w=newint[MAXN]
                        -DeclaratorNode (void)			// w
                        -NewNode (int[])			// newint[MAXN]
                            -TypeNode (void)			// int[MAXN]
                                -TypeAttributeNode (void)			// int[MAXN]
                                    -IdentifierNode (int)			// MAXN
                            -ArgumentTypeListNode (void)
            -DeclarationNode (void)			// int[]t=newint[MAXN];
                -TypeNode (void)			// int[]
                    -TypeAttributeNode (void)			// int[]
                        -EmptyExpressionNode (void)
                -DeclaratorListNode (void)			// t=newint[MAXN]
                    -InitDeclaratorNode (void)			// t=newint[MAXN]
                        -DeclaratorNode (void)			// t
                        -NewNode (int[])			// newint[MAXN]
                            -TypeNode (void)			// int[MAXN]
                                -TypeAttributeNode (void)			// int[MAXN]
                                    -IdentifierNode (int)			// MAXN
                            -ArgumentTypeListNode (void)
            -DeclarationNode (void)			// int[]DP=newint[MAXN];
                -TypeNode (void)			// int[]
                    -TypeAttributeNode (void)			// int[]
                        -EmptyExpressionNode (void)
                -DeclaratorListNode (void)			// DP=newint[MAXN]
                    -InitDeclaratorNode (void)			// DP=newint[MAXN]
                        -DeclaratorNode (void)			// DP
                        -NewNode (int[])			// newint[MAXN]
                            -TypeNode (void)			// int[MAXN]
                                -TypeAttributeNode (void)			// int[MAXN]
                                    -IdentifierNode (int)			// MAXN
                            -ArgumentTypeListNode (void)
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -DeclarationNode (void)			// intj;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// j
                    -InitDeclaratorNode (void)			// j
                        -DeclaratorNode (void)			// j
            -ForNode (void)			// for(i=0;i<N;++i){w[i]=getInt();t[i]=getInt();}
                -ForConditionNode (void)			// i=0;i<N;++i
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<N
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// N
                    -PrefixAddNode (int)			// ++i
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {w[i]=getInt();t[i]=getInt();}
                    -StatementNode (void)			// w[i]=getInt();
                        -AssignNode (void)			// w[i]=getInt()
                            -SubscriptOpNode (int)			// w[i]
                                -IdentifierNode (int[])			// w
                                -IdentifierNode (int)			// i
                            -ParenthesisOpNode (int)			// getInt()
                                -IdentifierNode (BaseType)			// getInt
                                -ArgumentListNode (void)
                    -StatementNode (void)			// t[i]=getInt();
                        -AssignNode (void)			// t[i]=getInt()
                            -SubscriptOpNode (int)			// t[i]
                                -IdentifierNode (int[])			// t
                                -IdentifierNode (int)			// i
                            -ParenthesisOpNode (int)			// getInt()
                                -IdentifierNode (BaseType)			// getInt
                                -ArgumentListNode (void)
            -ForNode (void)			// for(i=0;i<N;++i)for(j=t[i];j<=M;++j)if(DP[j]<=DP[j-t[i]]+w[i]){}
                -ForConditionNode (void)			// i=0;i<N;++i
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<N
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// N
                    -PrefixAddNode (int)			// ++i
                        -IdentifierNode (int)			// i
                -ForNode (void)			// for(j=t[i];j<=M;++j)if(DP[j]<=DP[j-t[i]]+w[i]){}
                    -ForConditionNode (void)			// j=t[i];j<=M;++j
                        -AssignNode (void)			// j=t[i]
                            -IdentifierNode (int)			// j
                            -SubscriptOpNode (int)			// t[i]
                                -IdentifierNode (int[])			// t
                                -IdentifierNode (int)			// i
                        -LessOrEqualThanNode (bool)			// j<=M
                            -IdentifierNode (int)			// j
                            -IdentifierNode (int)			// M
                        -PrefixAddNode (int)			// ++j
                            -IdentifierNode (int)			// j
                    -IfNode (void)			// if(DP[j]<=DP[j-t[i]]+w[i]){}
                        -LessOrEqualThanNode (bool)			// DP[j]<=DP[j-t[i]]+w[i]
                            -SubscriptOpNode (int)			// DP[j]
                                -IdentifierNode (int[])			// DP
                                -IdentifierNode (int)			// j
                            -AddNode (int)			// DP[j-t[i]]+w[i]
                                -SubscriptOpNode (int)			// DP[j-t[i]]
                                    -IdentifierNode (int[])			// DP
                                    -SubNode (int)			// j-t[i]
                                        -IdentifierNode (int)			// j
                                        -SubscriptOpNode (int)			// t[i]
                                            -IdentifierNode (int[])			// t
                                            -IdentifierNode (int)			// i
                                -SubscriptOpNode (int)			// w[i]
                                    -IdentifierNode (int[])			// w
                                    -IdentifierNode (int)			// i
                        -BlockNode (void)			// {}
            -StatementNode (void)			// print(toString(DP[M]));
                -ParenthesisOpNode (void)			// print(toString(DP[M]))
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// toString(DP[M])
                        -ParenthesisOpNode (string)			// toString(DP[M])
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// DP[M]
                                -SubscriptOpNode (int)			// DP[M]
                                    -IdentifierNode (int[])			// DP
                                    -IdentifierNode (int)			// M
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
