-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}intN=100000;intn;int[]a=newint[N];int[]bak=newint[N];int[]a_left=newint[N];int[]a_right=newint[N];int[]heap=newint[N];inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;classA{int[][][][][][][][][][]A_arr;voidOptimizer(){int[][][][][][][][][][]arr=newint[2][2][2][2][2][2][2][2][2][2];inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;inti;intsum=0;for(i=1;i<=1000;i++){arr[0][1][0][1][0][1][0][1][0][1]=123+i;sum=sum+arr[0][1][0][1][0][1][0][1][0][1];}println(toString(sum));for(i=1;i<=1000000;i++){sum=sum}println(toString(sum));for(i=1;i<=200000000;i++);}A(){A_arr=newint[2][2][3][2][3][2][2][3][2][2];}}voidrestore(){inti;for(i=1;i<=n;i++)a[i]=bak[i];}intquicksort(intl,intr){inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;intsum=0;intx=a[l];intz_l=0;intz_r=0;inti;for(i=l+1;i<r;i++){sum++;if(a[i]<x)a_left[z_l++]=a[i];elsea_right[z_r++]=a[i];}intp=l;for(i=0;i<z_l;i++)a[p++]=a_left[i];a[p++]=x;for(i=0;i<z_r;i++)a[p++]=a_right[i];if(z_l>1)sum=sum+quicksort(l,l+z_l);if(z_r>1)sum=sum+quicksort(r-z_r,r);returnsum;}intcalc(){inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;inti;for(i=1;i<=n;i++){a_left[i]=i-1;a_right[i]=i+1;}intsum=0;for(i=n;i>=1;i--){intl=a_left[a[i]];intr=a_right[a[i]];a_right[l]=r;a_left[r]=l;sum=sum+r-l-2;}returnsum;}intmergesort(intl,intr){inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;if(l+1==r)return0;intmid=l+r>>1;intsum=0;sum=sum+mergesort(l,mid);sum=sum+mergesort(mid,r);intn_l=0;intn_r=0;inti;for(i=l;i<mid;i++)a_left[n_l++]=a[i];for(i=mid;i<r;i++)a_right[n_r++]=a[i];intz_l=0;intz_r=0;intz=l;while(z_l<n_l&&z_r<n_r){sum++;if(a_left[z_l]<a_right[z_r])a[z++]=a_left[z_l++];elsea[z++]=a_right[z_r++];}while(z_l<n_l)a[z++]=a_left[z_l++];while(z_r<n_r)a[z++]=a_right[z_r++];returnsum;}intheapsort(){inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;intsum=0;inti;inttmp;for(i=1;i<=n;i++){heap[i]=a[i];intx=i;while(x!=1){sum++;if(heap[x]>heap[x>>1])break;tmp=heap[x];heap[x]=heap[x>>1];heap[x>>1]=tmp;x=x>>1;}}intheap_size=n;for(i=1;i<=n;i++){a[i]=heap[1];heap[1]=heap[heap_size--];intx=1;while((x<<1)<=heap_size){intl=x<<1;intr=l+1;inty=l;if(r<=heap_size){sum++;if(heap[r]<heap[l])y=r;}sum++;if(heap[x]<heap[y])break;tmp=heap[x];heap[x]=heap[y];heap[y]=tmp;tmp=x;x=y;y=tmp;}}returnsum;}intmain(){inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;n=getInt();intk=getInt();inti;for(i=1;i<=n;i++){a[i]=i;if(i<=k){a[i]=k+1-i;}bak[i]=a[i];}intans1=quicksort(1,n+1);restore();intans2=calc();restore();intans3=mergesort(1,n+1);restore();intans4=heapsort();println(toString(ans1));println(toString(ans2));println(toString(ans3));println(toString(ans4));Aa=newA;a.Optimizer();return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -DeclarationNode (void)			// intN=100000;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// N=100000
            -InitDeclaratorNode (void)			// N=100000
                -DeclaratorNode (void)			// N
                -ConstantNode (int)			// 100000
    -DeclarationNode (void)			// intn;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// n
            -InitDeclaratorNode (void)			// n
                -DeclaratorNode (void)			// n
    -DeclarationNode (void)			// int[]a=newint[N];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// a=newint[N]
            -InitDeclaratorNode (void)			// a=newint[N]
                -DeclaratorNode (void)			// a
                -NewNode (int[])			// newint[N]
                    -TypeNode (void)			// int[N]
                        -TypeAttributeNode (void)			// int[N]
                            -IdentifierNode (int)			// N
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[]bak=newint[N];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// bak=newint[N]
            -InitDeclaratorNode (void)			// bak=newint[N]
                -DeclaratorNode (void)			// bak
                -NewNode (int[])			// newint[N]
                    -TypeNode (void)			// int[N]
                        -TypeAttributeNode (void)			// int[N]
                            -IdentifierNode (int)			// N
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[]a_left=newint[N];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// a_left=newint[N]
            -InitDeclaratorNode (void)			// a_left=newint[N]
                -DeclaratorNode (void)			// a_left
                -NewNode (int[])			// newint[N]
                    -TypeNode (void)			// int[N]
                        -TypeAttributeNode (void)			// int[N]
                            -IdentifierNode (int)			// N
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[]a_right=newint[N];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// a_right=newint[N]
            -InitDeclaratorNode (void)			// a_right=newint[N]
                -DeclaratorNode (void)			// a_right
                -NewNode (int[])			// newint[N]
                    -TypeNode (void)			// int[N]
                        -TypeAttributeNode (void)			// int[N]
                            -IdentifierNode (int)			// N
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[]heap=newint[N];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// heap=newint[N]
            -InitDeclaratorNode (void)			// heap=newint[N]
                -DeclaratorNode (void)			// heap
                -NewNode (int[])			// newint[N]
                    -TypeNode (void)			// int[N]
                        -TypeAttributeNode (void)			// int[N]
                            -IdentifierNode (int)			// N
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// inti1;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i1
            -InitDeclaratorNode (void)			// i1
                -DeclaratorNode (void)			// i1
    -DeclarationNode (void)			// inti2;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i2
            -InitDeclaratorNode (void)			// i2
                -DeclaratorNode (void)			// i2
    -DeclarationNode (void)			// inti3;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i3
            -InitDeclaratorNode (void)			// i3
                -DeclaratorNode (void)			// i3
    -DeclarationNode (void)			// inti4;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i4
            -InitDeclaratorNode (void)			// i4
                -DeclaratorNode (void)			// i4
    -DeclarationNode (void)			// inti5;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i5
            -InitDeclaratorNode (void)			// i5
                -DeclaratorNode (void)			// i5
    -DeclarationNode (void)			// inti6;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i6
            -InitDeclaratorNode (void)			// i6
                -DeclaratorNode (void)			// i6
    -DeclarationNode (void)			// inti7;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i7
            -InitDeclaratorNode (void)			// i7
                -DeclaratorNode (void)			// i7
    -DeclarationNode (void)			// inti8;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i8
            -InitDeclaratorNode (void)			// i8
                -DeclaratorNode (void)			// i8
    -DeclarationNode (void)			// inti9;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i9
            -InitDeclaratorNode (void)			// i9
                -DeclaratorNode (void)			// i9
    -DeclarationNode (void)			// inti10;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i10
            -InitDeclaratorNode (void)			// i10
                -DeclaratorNode (void)			// i10
    -DeclarationNode (void)			// inti11;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i11
            -InitDeclaratorNode (void)			// i11
                -DeclaratorNode (void)			// i11
    -DeclarationNode (void)			// inti12;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i12
            -InitDeclaratorNode (void)			// i12
                -DeclaratorNode (void)			// i12
    -DeclarationNode (void)			// inti13;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i13
            -InitDeclaratorNode (void)			// i13
                -DeclaratorNode (void)			// i13
    -DeclarationNode (void)			// inti14;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// i14
            -InitDeclaratorNode (void)			// i14
                -DeclaratorNode (void)			// i14
    -ClassDefinitionNode (void)			// classA{int[][][][][][][][][][]A_arr;voidOptimizer(){int[][][][][][][][][][]arr=newint[2][2][2][2][2][2][2][2][2][2];inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;inti;intsum=0;for(i=1;i<=1000;i++){arr[0][1][0][1][0][1][0][1][0][1]=123+i;sum=sum+arr[0][1][0][1][0][1][0][1][0][1];}println(toString(sum));for(i=1;i<=1000000;i++){sum=sum+(9876%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234)%11;}println(toString(sum));for(i=1;i<=200000000;i++);}A(){A_arr=newint[2][2][3][2][3][2][2][3][2][2];}}
        -DeclarationNode (void)			// int[][][][][][][][][][]A_arr;
            -TypeNode (void)			// int[][][][][][][][][][]
                -TypeAttributeNode (void)			// int[][][][][][][][][][]
                    -EmptyExpressionNode (void)
                    -EmptyExpressionNode (void)
                    -EmptyExpressionNode (void)
                    -EmptyExpressionNode (void)
                    -EmptyExpressionNode (void)
                    -EmptyExpressionNode (void)
                    -EmptyExpressionNode (void)
                    -EmptyExpressionNode (void)
                    -EmptyExpressionNode (void)
                    -EmptyExpressionNode (void)
            -DeclaratorListNode (void)			// A_arr
                -InitDeclaratorNode (void)			// A_arr
                    -DeclaratorNode (void)			// A_arr
        -FuncDefinitionNode (void)			// voidOptimizer(){int[][][][][][][][][][]arr=newint[2][2][2][2][2][2][2][2][2][2];inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;inti;intsum=0;for(i=1;i<=1000;i++){arr[0][1][0][1][0][1][0][1][0][1]=123+i;sum=sum+arr[0][1][0][1][0][1][0][1][0][1];}println(toString(sum));for(i=1;i<=1000000;i++){sum=sum}println(toString(sum));for(i=1;i<=200000000;i++);}
            -TypeNode (void)			// void
                -TypeAttributeNode (void)			// void
            -FuncDeclaratorNode (void)			// Optimizer()
                -DeclaratorNode (void)			// Optimizer
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {int[][][][][][][][][][]arr=newint[2][2][2][2][2][2][2][2][2][2];inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;inti;intsum=0;for(i=1;i<=1000;i++){arr[0][1][0][1][0][1][0][1][0][1]=123+i;sum=sum+arr[0][1][0][1][0][1][0][1][0][1];}println(toString(sum));for(i=1;i<=1000000;i++){sum=sum}println(toString(sum));for(i=1;i<=200000000;i++);}
                -DeclarationNode (void)			// int[][][][][][][][][][]arr=newint[2][2][2][2][2][2][2][2][2][2];
                    -TypeNode (void)			// int[][][][][][][][][][]
                        -TypeAttributeNode (void)			// int[][][][][][][][][][]
                            -EmptyExpressionNode (void)
                            -EmptyExpressionNode (void)
                            -EmptyExpressionNode (void)
                            -EmptyExpressionNode (void)
                            -EmptyExpressionNode (void)
                            -EmptyExpressionNode (void)
                            -EmptyExpressionNode (void)
                            -EmptyExpressionNode (void)
                            -EmptyExpressionNode (void)
                            -EmptyExpressionNode (void)
                    -DeclaratorListNode (void)			// arr=newint[2][2][2][2][2][2][2][2][2][2]
                        -InitDeclaratorNode (void)			// arr=newint[2][2][2][2][2][2][2][2][2][2]
                            -DeclaratorNode (void)			// arr
                            -NewNode (int[][][][][][][][][][])			// newint[2][2][2][2][2][2][2][2][2][2]
                                -TypeNode (void)			// int[2][2][2][2][2][2][2][2][2][2]
                                    -TypeAttributeNode (void)			// int[2][2][2][2][2][2][2][2][2][2]
                                        -ConstantNode (int)			// 2
                                        -ConstantNode (int)			// 2
                                        -ConstantNode (int)			// 2
                                        -ConstantNode (int)			// 2
                                        -ConstantNode (int)			// 2
                                        -ConstantNode (int)			// 2
                                        -ConstantNode (int)			// 2
                                        -ConstantNode (int)			// 2
                                        -ConstantNode (int)			// 2
                                        -ConstantNode (int)			// 2
                                -ArgumentTypeListNode (void)
                -DeclarationNode (void)			// inti1;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i1
                        -InitDeclaratorNode (void)			// i1
                            -DeclaratorNode (void)			// i1
                -DeclarationNode (void)			// inti2;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i2
                        -InitDeclaratorNode (void)			// i2
                            -DeclaratorNode (void)			// i2
                -DeclarationNode (void)			// inti3;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i3
                        -InitDeclaratorNode (void)			// i3
                            -DeclaratorNode (void)			// i3
                -DeclarationNode (void)			// inti4;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i4
                        -InitDeclaratorNode (void)			// i4
                            -DeclaratorNode (void)			// i4
                -DeclarationNode (void)			// inti5;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i5
                        -InitDeclaratorNode (void)			// i5
                            -DeclaratorNode (void)			// i5
                -DeclarationNode (void)			// inti6;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i6
                        -InitDeclaratorNode (void)			// i6
                            -DeclaratorNode (void)			// i6
                -DeclarationNode (void)			// inti7;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i7
                        -InitDeclaratorNode (void)			// i7
                            -DeclaratorNode (void)			// i7
                -DeclarationNode (void)			// inti8;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i8
                        -InitDeclaratorNode (void)			// i8
                            -DeclaratorNode (void)			// i8
                -DeclarationNode (void)			// inti9;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i9
                        -InitDeclaratorNode (void)			// i9
                            -DeclaratorNode (void)			// i9
                -DeclarationNode (void)			// inti10;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i10
                        -InitDeclaratorNode (void)			// i10
                            -DeclaratorNode (void)			// i10
                -DeclarationNode (void)			// inti11;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i11
                        -InitDeclaratorNode (void)			// i11
                            -DeclaratorNode (void)			// i11
                -DeclarationNode (void)			// inti12;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i12
                        -InitDeclaratorNode (void)			// i12
                            -DeclaratorNode (void)			// i12
                -DeclarationNode (void)			// inti13;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i13
                        -InitDeclaratorNode (void)			// i13
                            -DeclaratorNode (void)			// i13
                -DeclarationNode (void)			// inti14;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i14
                        -InitDeclaratorNode (void)			// i14
                            -DeclaratorNode (void)			// i14
                -DeclarationNode (void)			// inti;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i
                        -InitDeclaratorNode (void)			// i
                            -DeclaratorNode (void)			// i
                -DeclarationNode (void)			// intsum=0;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// sum=0
                        -InitDeclaratorNode (void)			// sum=0
                            -DeclaratorNode (void)			// sum
                            -ConstantNode (int)			// 0
                -ForNode (void)			// for(i=1;i<=1000;i++){arr[0][1][0][1][0][1][0][1][0][1]=123+i;sum=sum+arr[0][1][0][1][0][1][0][1][0][1];}
                    -ForConditionNode (void)			// i=1;i<=1000;i++
                        -AssignNode (void)			// i=1
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                        -LessOrEqualThanNode (bool)			// i<=1000
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1000
                        -PostfixAddNode (int)			// i++
                            -IdentifierNode (int)			// i
                    -BlockNode (void)			// {arr[0][1][0][1][0][1][0][1][0][1]=123+i;sum=sum+arr[0][1][0][1][0][1][0][1][0][1];}
                        -StatementNode (void)			// arr[0][1][0][1][0][1][0][1][0][1]=123+i;
                            -AssignNode (void)			// arr[0][1][0][1][0][1][0][1][0][1]=123+i
                                -SubscriptOpNode (int)			// arr[0][1][0][1][0][1][0][1][0][1]
                                    -SubscriptOpNode (int[])			// arr[0][1][0][1][0][1][0][1][0]
                                        -SubscriptOpNode (int[][])			// arr[0][1][0][1][0][1][0][1]
                                            -SubscriptOpNode (int[][][])			// arr[0][1][0][1][0][1][0]
                                                -SubscriptOpNode (int[][][][])			// arr[0][1][0][1][0][1]
                                                    -SubscriptOpNode (int[][][][][])			// arr[0][1][0][1][0]
                                                        -SubscriptOpNode (int[][][][][][])			// arr[0][1][0][1]
                                                            -SubscriptOpNode (int[][][][][][][])			// arr[0][1][0]
                                                                -SubscriptOpNode (int[][][][][][][][])			// arr[0][1]
                                                                    -SubscriptOpNode (int[][][][][][][][][])			// arr[0]
                                                                        -IdentifierNode (int[][][][][][][][][][])			// arr
                                                                        -ConstantNode (int)			// 0
                                                                    -ConstantNode (int)			// 1
                                                                -ConstantNode (int)			// 0
                                                            -ConstantNode (int)			// 1
                                                        -ConstantNode (int)			// 0
                                                    -ConstantNode (int)			// 1
                                                -ConstantNode (int)			// 0
                                            -ConstantNode (int)			// 1
                                        -ConstantNode (int)			// 0
                                    -ConstantNode (int)			// 1
                                -AddNode (int)			// 123+i
                                    -ConstantNode (int)			// 123
                                    -IdentifierNode (int)			// i
                        -StatementNode (void)			// sum=sum+arr[0][1][0][1][0][1][0][1][0][1];
                            -AssignNode (void)			// sum=sum+arr[0][1][0][1][0][1][0][1][0][1]
                                -IdentifierNode (int)			// sum
                                -AddNode (int)			// sum+arr[0][1][0][1][0][1][0][1][0][1]
                                    -IdentifierNode (int)			// sum
                                    -SubscriptOpNode (int)			// arr[0][1][0][1][0][1][0][1][0][1]
                                        -SubscriptOpNode (int[])			// arr[0][1][0][1][0][1][0][1][0]
                                            -SubscriptOpNode (int[][])			// arr[0][1][0][1][0][1][0][1]
                                                -SubscriptOpNode (int[][][])			// arr[0][1][0][1][0][1][0]
                                                    -SubscriptOpNode (int[][][][])			// arr[0][1][0][1][0][1]
                                                        -SubscriptOpNode (int[][][][][])			// arr[0][1][0][1][0]
                                                            -SubscriptOpNode (int[][][][][][])			// arr[0][1][0][1]
                                                                -SubscriptOpNode (int[][][][][][][])			// arr[0][1][0]
                                                                    -SubscriptOpNode (int[][][][][][][][])			// arr[0][1]
                                                                        -SubscriptOpNode (int[][][][][][][][][])			// arr[0]
                                                                            -IdentifierNode (int[][][][][][][][][][])			// arr
                                                                            -ConstantNode (int)			// 0
                                                                        -ConstantNode (int)			// 1
                                                                    -ConstantNode (int)			// 0
                                                                -ConstantNode (int)			// 1
                                                            -ConstantNode (int)			// 0
                                                        -ConstantNode (int)			// 1
                                                    -ConstantNode (int)			// 0
                                                -ConstantNode (int)			// 1
                                            -ConstantNode (int)			// 0
                                        -ConstantNode (int)			// 1
                -StatementNode (void)			// println(toString(sum));
                    -ParenthesisOpNode (void)			// println(toString(sum))
                        -IdentifierNode (BaseType)			// println
                        -ArgumentListNode (void)			// toString(sum)
                            -ParenthesisOpNode (string)			// toString(sum)
                                -IdentifierNode (BaseType)			// toString
                                -ArgumentListNode (void)			// sum
                                    -IdentifierNode (int)			// sum
                -ForNode (void)			// for(i=1;i<=1000000;i++){sum=sum}
                    -ForConditionNode (void)			// i=1;i<=1000000;i++
                        -AssignNode (void)			// i=1
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                        -LessOrEqualThanNode (bool)			// i<=1000000
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1000000
                        -PostfixAddNode (int)			// i++
                            -IdentifierNode (int)			// i
                    -BlockNode (void)			// {sum=sum}
                        -StatementNode (void)			// sum=sum
                            -AssignNode (void)			// sum=sum+(9876%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234*2345%1234)%11
                                -IdentifierNode (int)			// sum
                                -AddNode (int)			// sum
                                    -IdentifierNode (int)			// sum
                                    -ConstantNode (int)
                -StatementNode (void)			// println(toString(sum));
                    -ParenthesisOpNode (void)			// println(toString(sum))
                        -IdentifierNode (BaseType)			// println
                        -ArgumentListNode (void)			// toString(sum)
                            -ParenthesisOpNode (string)			// toString(sum)
                                -IdentifierNode (BaseType)			// toString
                                -ArgumentListNode (void)			// sum
                                    -IdentifierNode (int)			// sum
                -ForNode (void)			// for(i=1;i<=200000000;i++);
                    -ForConditionNode (void)			// i=1;i<=200000000;i++
                        -AssignNode (void)			// i=1
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                        -LessOrEqualThanNode (bool)			// i<=200000000
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 200000000
                        -PostfixAddNode (int)			// i++
                            -IdentifierNode (int)			// i
                    -StatementNode (void)			// ;
        -FuncDefinitionNode (void)			// A(){A_arr=newint[2][2][3][2][3][2][2][3][2][2];}
            -TypeNode (void)
            -FuncDeclaratorNode (void)			// A()
                -DeclaratorNode (void)			// A
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {A_arr=newint[2][2][3][2][3][2][2][3][2][2];}
                -StatementNode (void)			// A_arr=newint[2][2][3][2][3][2][2][3][2][2];
                    -AssignNode (void)			// A_arr=newint[2][2][3][2][3][2][2][3][2][2]
                        -IdentifierNode (int[][][][][][][][][][])			// A_arr
                        -NewNode (int[][][][][][][][][][])			// newint[2][2][3][2][3][2][2][3][2][2]
                            -TypeNode (void)			// int[2][2][3][2][3][2][2][3][2][2]
                                -TypeAttributeNode (void)			// int[2][2][3][2][3][2][2][3][2][2]
                                    -ConstantNode (int)			// 2
                                    -ConstantNode (int)			// 2
                                    -ConstantNode (int)			// 3
                                    -ConstantNode (int)			// 2
                                    -ConstantNode (int)			// 3
                                    -ConstantNode (int)			// 2
                                    -ConstantNode (int)			// 2
                                    -ConstantNode (int)			// 3
                                    -ConstantNode (int)			// 2
                                    -ConstantNode (int)			// 2
                            -ArgumentTypeListNode (void)
    -FuncDefinitionNode (void)			// voidrestore(){inti;for(i=1;i<=n;i++)a[i]=bak[i];}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// restore()
            -DeclaratorNode (void)			// restore
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inti;for(i=1;i<=n;i++)a[i]=bak[i];}
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=1;i<=n;i++)a[i]=bak[i];
                -ForConditionNode (void)			// i=1;i<=n;i++
                    -AssignNode (void)			// i=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// i<=n
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// n
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// a[i]=bak[i];
                    -AssignNode (void)			// a[i]=bak[i]
                        -SubscriptOpNode (int)			// a[i]
                            -IdentifierNode (int[])			// a
                            -IdentifierNode (int)			// i
                        -SubscriptOpNode (int)			// bak[i]
                            -IdentifierNode (int[])			// bak
                            -IdentifierNode (int)			// i
    -FuncDefinitionNode (void)			// intquicksort(intl,intr){inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;intsum=0;intx=a[l];intz_l=0;intz_r=0;inti;for(i=l+1;i<r;i++){sum++;if(a[i]<x)a_left[z_l++]=a[i];elsea_right[z_r++]=a[i];}intp=l;for(i=0;i<z_l;i++)a[p++]=a_left[i];a[p++]=x;for(i=0;i<z_r;i++)a[p++]=a_right[i];if(z_l>1)sum=sum+quicksort(l,l+z_l);if(z_r>1)sum=sum+quicksort(r-z_r,r);returnsum;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// quicksort(intl,intr)
            -DeclaratorNode (void)			// quicksort
            -ArgumentTypeListNode (void)			// intl,intr
                -ArgumentDeclarationNode (void)			// intl
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// l
                -ArgumentDeclarationNode (void)			// intr
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// r
        -BlockNode (void)			// {inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;intsum=0;intx=a[l];intz_l=0;intz_r=0;inti;for(i=l+1;i<r;i++){sum++;if(a[i]<x)a_left[z_l++]=a[i];elsea_right[z_r++]=a[i];}intp=l;for(i=0;i<z_l;i++)a[p++]=a_left[i];a[p++]=x;for(i=0;i<z_r;i++)a[p++]=a_right[i];if(z_l>1)sum=sum+quicksort(l,l+z_l);if(z_r>1)sum=sum+quicksort(r-z_r,r);returnsum;}
            -DeclarationNode (void)			// inti1;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i1
                    -InitDeclaratorNode (void)			// i1
                        -DeclaratorNode (void)			// i1
            -DeclarationNode (void)			// inti2;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i2
                    -InitDeclaratorNode (void)			// i2
                        -DeclaratorNode (void)			// i2
            -DeclarationNode (void)			// inti3;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i3
                    -InitDeclaratorNode (void)			// i3
                        -DeclaratorNode (void)			// i3
            -DeclarationNode (void)			// inti4;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i4
                    -InitDeclaratorNode (void)			// i4
                        -DeclaratorNode (void)			// i4
            -DeclarationNode (void)			// inti5;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i5
                    -InitDeclaratorNode (void)			// i5
                        -DeclaratorNode (void)			// i5
            -DeclarationNode (void)			// inti6;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i6
                    -InitDeclaratorNode (void)			// i6
                        -DeclaratorNode (void)			// i6
            -DeclarationNode (void)			// inti7;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i7
                    -InitDeclaratorNode (void)			// i7
                        -DeclaratorNode (void)			// i7
            -DeclarationNode (void)			// inti8;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i8
                    -InitDeclaratorNode (void)			// i8
                        -DeclaratorNode (void)			// i8
            -DeclarationNode (void)			// inti9;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i9
                    -InitDeclaratorNode (void)			// i9
                        -DeclaratorNode (void)			// i9
            -DeclarationNode (void)			// inti10;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i10
                    -InitDeclaratorNode (void)			// i10
                        -DeclaratorNode (void)			// i10
            -DeclarationNode (void)			// inti11;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i11
                    -InitDeclaratorNode (void)			// i11
                        -DeclaratorNode (void)			// i11
            -DeclarationNode (void)			// inti12;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i12
                    -InitDeclaratorNode (void)			// i12
                        -DeclaratorNode (void)			// i12
            -DeclarationNode (void)			// inti13;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i13
                    -InitDeclaratorNode (void)			// i13
                        -DeclaratorNode (void)			// i13
            -DeclarationNode (void)			// inti14;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i14
                    -InitDeclaratorNode (void)			// i14
                        -DeclaratorNode (void)			// i14
            -DeclarationNode (void)			// intsum=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// sum=0
                    -InitDeclaratorNode (void)			// sum=0
                        -DeclaratorNode (void)			// sum
                        -ConstantNode (int)			// 0
            -DeclarationNode (void)			// intx=a[l];
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// x=a[l]
                    -InitDeclaratorNode (void)			// x=a[l]
                        -DeclaratorNode (void)			// x
                        -SubscriptOpNode (int)			// a[l]
                            -IdentifierNode (int[])			// a
                            -IdentifierNode (int)			// l
            -DeclarationNode (void)			// intz_l=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// z_l=0
                    -InitDeclaratorNode (void)			// z_l=0
                        -DeclaratorNode (void)			// z_l
                        -ConstantNode (int)			// 0
            -DeclarationNode (void)			// intz_r=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// z_r=0
                    -InitDeclaratorNode (void)			// z_r=0
                        -DeclaratorNode (void)			// z_r
                        -ConstantNode (int)			// 0
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=l+1;i<r;i++){sum++;if(a[i]<x)a_left[z_l++]=a[i];elsea_right[z_r++]=a[i];}
                -ForConditionNode (void)			// i=l+1;i<r;i++
                    -AssignNode (void)			// i=l+1
                        -IdentifierNode (int)			// i
                        -AddNode (int)			// l+1
                            -IdentifierNode (int)			// l
                            -ConstantNode (int)			// 1
                    -LessThanNode (bool)			// i<r
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// r
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {sum++;if(a[i]<x)a_left[z_l++]=a[i];elsea_right[z_r++]=a[i];}
                    -StatementNode (void)			// sum++;
                        -PostfixAddNode (int)			// sum++
                            -IdentifierNode (int)			// sum
                    -IfNode (void)			// if(a[i]<x)a_left[z_l++]=a[i];elsea_right[z_r++]=a[i];
                        -LessThanNode (bool)			// a[i]<x
                            -SubscriptOpNode (int)			// a[i]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// x
                        -StatementNode (void)			// a_left[z_l++]=a[i];
                            -AssignNode (void)			// a_left[z_l++]=a[i]
                                -SubscriptOpNode (int)			// a_left[z_l++]
                                    -IdentifierNode (int[])			// a_left
                                    -PostfixAddNode (int)			// z_l++
                                        -IdentifierNode (int)			// z_l
                                -SubscriptOpNode (int)			// a[i]
                                    -IdentifierNode (int[])			// a
                                    -IdentifierNode (int)			// i
                        -StatementNode (void)			// a_right[z_r++]=a[i];
                            -AssignNode (void)			// a_right[z_r++]=a[i]
                                -SubscriptOpNode (int)			// a_right[z_r++]
                                    -IdentifierNode (int[])			// a_right
                                    -PostfixAddNode (int)			// z_r++
                                        -IdentifierNode (int)			// z_r
                                -SubscriptOpNode (int)			// a[i]
                                    -IdentifierNode (int[])			// a
                                    -IdentifierNode (int)			// i
            -DeclarationNode (void)			// intp=l;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// p=l
                    -InitDeclaratorNode (void)			// p=l
                        -DeclaratorNode (void)			// p
                        -IdentifierNode (int)			// l
            -ForNode (void)			// for(i=0;i<z_l;i++)a[p++]=a_left[i];
                -ForConditionNode (void)			// i=0;i<z_l;i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<z_l
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// z_l
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// a[p++]=a_left[i];
                    -AssignNode (void)			// a[p++]=a_left[i]
                        -SubscriptOpNode (int)			// a[p++]
                            -IdentifierNode (int[])			// a
                            -PostfixAddNode (int)			// p++
                                -IdentifierNode (int)			// p
                        -SubscriptOpNode (int)			// a_left[i]
                            -IdentifierNode (int[])			// a_left
                            -IdentifierNode (int)			// i
            -StatementNode (void)			// a[p++]=x;
                -AssignNode (void)			// a[p++]=x
                    -SubscriptOpNode (int)			// a[p++]
                        -IdentifierNode (int[])			// a
                        -PostfixAddNode (int)			// p++
                            -IdentifierNode (int)			// p
                    -IdentifierNode (int)			// x
            -ForNode (void)			// for(i=0;i<z_r;i++)a[p++]=a_right[i];
                -ForConditionNode (void)			// i=0;i<z_r;i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<z_r
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// z_r
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// a[p++]=a_right[i];
                    -AssignNode (void)			// a[p++]=a_right[i]
                        -SubscriptOpNode (int)			// a[p++]
                            -IdentifierNode (int[])			// a
                            -PostfixAddNode (int)			// p++
                                -IdentifierNode (int)			// p
                        -SubscriptOpNode (int)			// a_right[i]
                            -IdentifierNode (int[])			// a_right
                            -IdentifierNode (int)			// i
            -IfNode (void)			// if(z_l>1)sum=sum+quicksort(l,l+z_l);
                -GreaterThanNode (bool)			// z_l>1
                    -IdentifierNode (int)			// z_l
                    -ConstantNode (int)			// 1
                -StatementNode (void)			// sum=sum+quicksort(l,l+z_l);
                    -AssignNode (void)			// sum=sum+quicksort(l,l+z_l)
                        -IdentifierNode (int)			// sum
                        -AddNode (int)			// sum+quicksort(l,l+z_l)
                            -IdentifierNode (int)			// sum
                            -ParenthesisOpNode (int)			// quicksort(l,l+z_l)
                                -IdentifierNode (BaseType)			// quicksort
                                -ArgumentListNode (void)			// l,l+z_l
                                    -IdentifierNode (int)			// l
                                    -AddNode (int)			// l+z_l
                                        -IdentifierNode (int)			// l
                                        -IdentifierNode (int)			// z_l
            -IfNode (void)			// if(z_r>1)sum=sum+quicksort(r-z_r,r);
                -GreaterThanNode (bool)			// z_r>1
                    -IdentifierNode (int)			// z_r
                    -ConstantNode (int)			// 1
                -StatementNode (void)			// sum=sum+quicksort(r-z_r,r);
                    -AssignNode (void)			// sum=sum+quicksort(r-z_r,r)
                        -IdentifierNode (int)			// sum
                        -AddNode (int)			// sum+quicksort(r-z_r,r)
                            -IdentifierNode (int)			// sum
                            -ParenthesisOpNode (int)			// quicksort(r-z_r,r)
                                -IdentifierNode (BaseType)			// quicksort
                                -ArgumentListNode (void)			// r-z_r,r
                                    -SubNode (int)			// r-z_r
                                        -IdentifierNode (int)			// r
                                        -IdentifierNode (int)			// z_r
                                    -IdentifierNode (int)			// r
            -ReturnNode (void)			// returnsum;
                -IdentifierNode (int)			// sum
    -FuncDefinitionNode (void)			// intcalc(){inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;inti;for(i=1;i<=n;i++){a_left[i]=i-1;a_right[i]=i+1;}intsum=0;for(i=n;i>=1;i--){intl=a_left[a[i]];intr=a_right[a[i]];a_right[l]=r;a_left[r]=l;sum=sum+r-l-2;}returnsum;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// calc()
            -DeclaratorNode (void)			// calc
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;inti;for(i=1;i<=n;i++){a_left[i]=i-1;a_right[i]=i+1;}intsum=0;for(i=n;i>=1;i--){intl=a_left[a[i]];intr=a_right[a[i]];a_right[l]=r;a_left[r]=l;sum=sum+r-l-2;}returnsum;}
            -DeclarationNode (void)			// inti1;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i1
                    -InitDeclaratorNode (void)			// i1
                        -DeclaratorNode (void)			// i1
            -DeclarationNode (void)			// inti2;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i2
                    -InitDeclaratorNode (void)			// i2
                        -DeclaratorNode (void)			// i2
            -DeclarationNode (void)			// inti3;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i3
                    -InitDeclaratorNode (void)			// i3
                        -DeclaratorNode (void)			// i3
            -DeclarationNode (void)			// inti4;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i4
                    -InitDeclaratorNode (void)			// i4
                        -DeclaratorNode (void)			// i4
            -DeclarationNode (void)			// inti5;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i5
                    -InitDeclaratorNode (void)			// i5
                        -DeclaratorNode (void)			// i5
            -DeclarationNode (void)			// inti6;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i6
                    -InitDeclaratorNode (void)			// i6
                        -DeclaratorNode (void)			// i6
            -DeclarationNode (void)			// inti7;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i7
                    -InitDeclaratorNode (void)			// i7
                        -DeclaratorNode (void)			// i7
            -DeclarationNode (void)			// inti8;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i8
                    -InitDeclaratorNode (void)			// i8
                        -DeclaratorNode (void)			// i8
            -DeclarationNode (void)			// inti9;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i9
                    -InitDeclaratorNode (void)			// i9
                        -DeclaratorNode (void)			// i9
            -DeclarationNode (void)			// inti10;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i10
                    -InitDeclaratorNode (void)			// i10
                        -DeclaratorNode (void)			// i10
            -DeclarationNode (void)			// inti11;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i11
                    -InitDeclaratorNode (void)			// i11
                        -DeclaratorNode (void)			// i11
            -DeclarationNode (void)			// inti12;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i12
                    -InitDeclaratorNode (void)			// i12
                        -DeclaratorNode (void)			// i12
            -DeclarationNode (void)			// inti13;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i13
                    -InitDeclaratorNode (void)			// i13
                        -DeclaratorNode (void)			// i13
            -DeclarationNode (void)			// inti14;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i14
                    -InitDeclaratorNode (void)			// i14
                        -DeclaratorNode (void)			// i14
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=1;i<=n;i++){a_left[i]=i-1;a_right[i]=i+1;}
                -ForConditionNode (void)			// i=1;i<=n;i++
                    -AssignNode (void)			// i=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// i<=n
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// n
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {a_left[i]=i-1;a_right[i]=i+1;}
                    -StatementNode (void)			// a_left[i]=i-1;
                        -AssignNode (void)			// a_left[i]=i-1
                            -SubscriptOpNode (int)			// a_left[i]
                                -IdentifierNode (int[])			// a_left
                                -IdentifierNode (int)			// i
                            -SubNode (int)			// i-1
                                -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 1
                    -StatementNode (void)			// a_right[i]=i+1;
                        -AssignNode (void)			// a_right[i]=i+1
                            -SubscriptOpNode (int)			// a_right[i]
                                -IdentifierNode (int[])			// a_right
                                -IdentifierNode (int)			// i
                            -AddNode (int)			// i+1
                                -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 1
            -DeclarationNode (void)			// intsum=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// sum=0
                    -InitDeclaratorNode (void)			// sum=0
                        -DeclaratorNode (void)			// sum
                        -ConstantNode (int)			// 0
            -ForNode (void)			// for(i=n;i>=1;i--){intl=a_left[a[i]];intr=a_right[a[i]];a_right[l]=r;a_left[r]=l;sum=sum+r-l-2;}
                -ForConditionNode (void)			// i=n;i>=1;i--
                    -AssignNode (void)			// i=n
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// n
                    -GreaterOrEqualThanNode (bool)			// i>=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -PostfixSubNode (int)			// i--
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {intl=a_left[a[i]];intr=a_right[a[i]];a_right[l]=r;a_left[r]=l;sum=sum+r-l-2;}
                    -DeclarationNode (void)			// intl=a_left[a[i]];
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// l=a_left[a[i]]
                            -InitDeclaratorNode (void)			// l=a_left[a[i]]
                                -DeclaratorNode (void)			// l
                                -SubscriptOpNode (int)			// a_left[a[i]]
                                    -IdentifierNode (int[])			// a_left
                                    -SubscriptOpNode (int)			// a[i]
                                        -IdentifierNode (int[])			// a
                                        -IdentifierNode (int)			// i
                    -DeclarationNode (void)			// intr=a_right[a[i]];
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// r=a_right[a[i]]
                            -InitDeclaratorNode (void)			// r=a_right[a[i]]
                                -DeclaratorNode (void)			// r
                                -SubscriptOpNode (int)			// a_right[a[i]]
                                    -IdentifierNode (int[])			// a_right
                                    -SubscriptOpNode (int)			// a[i]
                                        -IdentifierNode (int[])			// a
                                        -IdentifierNode (int)			// i
                    -StatementNode (void)			// a_right[l]=r;
                        -AssignNode (void)			// a_right[l]=r
                            -SubscriptOpNode (int)			// a_right[l]
                                -IdentifierNode (int[])			// a_right
                                -IdentifierNode (int)			// l
                            -IdentifierNode (int)			// r
                    -StatementNode (void)			// a_left[r]=l;
                        -AssignNode (void)			// a_left[r]=l
                            -SubscriptOpNode (int)			// a_left[r]
                                -IdentifierNode (int[])			// a_left
                                -IdentifierNode (int)			// r
                            -IdentifierNode (int)			// l
                    -StatementNode (void)			// sum=sum+r-l-2;
                        -AssignNode (void)			// sum=sum+r-l-2
                            -IdentifierNode (int)			// sum
                            -SubNode (int)			// sum+r-l-2
                                -SubNode (int)			// sum+r-l
                                    -AddNode (int)			// sum+r
                                        -IdentifierNode (int)			// sum
                                        -IdentifierNode (int)			// r
                                    -IdentifierNode (int)			// l
                                -ConstantNode (int)			// 2
            -ReturnNode (void)			// returnsum;
                -IdentifierNode (int)			// sum
    -FuncDefinitionNode (void)			// intmergesort(intl,intr){inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;if(l+1==r)return0;intmid=l+r>>1;intsum=0;sum=sum+mergesort(l,mid);sum=sum+mergesort(mid,r);intn_l=0;intn_r=0;inti;for(i=l;i<mid;i++)a_left[n_l++]=a[i];for(i=mid;i<r;i++)a_right[n_r++]=a[i];intz_l=0;intz_r=0;intz=l;while(z_l<n_l&&z_r<n_r){sum++;if(a_left[z_l]<a_right[z_r])a[z++]=a_left[z_l++];elsea[z++]=a_right[z_r++];}while(z_l<n_l)a[z++]=a_left[z_l++];while(z_r<n_r)a[z++]=a_right[z_r++];returnsum;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// mergesort(intl,intr)
            -DeclaratorNode (void)			// mergesort
            -ArgumentTypeListNode (void)			// intl,intr
                -ArgumentDeclarationNode (void)			// intl
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// l
                -ArgumentDeclarationNode (void)			// intr
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// r
        -BlockNode (void)			// {inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;if(l+1==r)return0;intmid=l+r>>1;intsum=0;sum=sum+mergesort(l,mid);sum=sum+mergesort(mid,r);intn_l=0;intn_r=0;inti;for(i=l;i<mid;i++)a_left[n_l++]=a[i];for(i=mid;i<r;i++)a_right[n_r++]=a[i];intz_l=0;intz_r=0;intz=l;while(z_l<n_l&&z_r<n_r){sum++;if(a_left[z_l]<a_right[z_r])a[z++]=a_left[z_l++];elsea[z++]=a_right[z_r++];}while(z_l<n_l)a[z++]=a_left[z_l++];while(z_r<n_r)a[z++]=a_right[z_r++];returnsum;}
            -DeclarationNode (void)			// inti1;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i1
                    -InitDeclaratorNode (void)			// i1
                        -DeclaratorNode (void)			// i1
            -DeclarationNode (void)			// inti2;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i2
                    -InitDeclaratorNode (void)			// i2
                        -DeclaratorNode (void)			// i2
            -DeclarationNode (void)			// inti3;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i3
                    -InitDeclaratorNode (void)			// i3
                        -DeclaratorNode (void)			// i3
            -DeclarationNode (void)			// inti4;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i4
                    -InitDeclaratorNode (void)			// i4
                        -DeclaratorNode (void)			// i4
            -DeclarationNode (void)			// inti5;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i5
                    -InitDeclaratorNode (void)			// i5
                        -DeclaratorNode (void)			// i5
            -DeclarationNode (void)			// inti6;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i6
                    -InitDeclaratorNode (void)			// i6
                        -DeclaratorNode (void)			// i6
            -DeclarationNode (void)			// inti7;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i7
                    -InitDeclaratorNode (void)			// i7
                        -DeclaratorNode (void)			// i7
            -DeclarationNode (void)			// inti8;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i8
                    -InitDeclaratorNode (void)			// i8
                        -DeclaratorNode (void)			// i8
            -DeclarationNode (void)			// inti9;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i9
                    -InitDeclaratorNode (void)			// i9
                        -DeclaratorNode (void)			// i9
            -DeclarationNode (void)			// inti10;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i10
                    -InitDeclaratorNode (void)			// i10
                        -DeclaratorNode (void)			// i10
            -DeclarationNode (void)			// inti11;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i11
                    -InitDeclaratorNode (void)			// i11
                        -DeclaratorNode (void)			// i11
            -DeclarationNode (void)			// inti12;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i12
                    -InitDeclaratorNode (void)			// i12
                        -DeclaratorNode (void)			// i12
            -DeclarationNode (void)			// inti13;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i13
                    -InitDeclaratorNode (void)			// i13
                        -DeclaratorNode (void)			// i13
            -DeclarationNode (void)			// inti14;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i14
                    -InitDeclaratorNode (void)			// i14
                        -DeclaratorNode (void)			// i14
            -IfNode (void)			// if(l+1==r)return0;
                -EqualNode (bool)			// l+1==r
                    -AddNode (int)			// l+1
                        -IdentifierNode (int)			// l
                        -ConstantNode (int)			// 1
                    -IdentifierNode (int)			// r
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
            -DeclarationNode (void)			// intmid=l+r>>1;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// mid=l+r>>1
                    -InitDeclaratorNode (void)			// mid=l+r>>1
                        -DeclaratorNode (void)			// mid
                        -ShiftRightNode (int)			// l+r>>1
                            -AddNode (int)			// l+r
                                -IdentifierNode (int)			// l
                                -IdentifierNode (int)			// r
                            -ConstantNode (int)			// 1
            -DeclarationNode (void)			// intsum=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// sum=0
                    -InitDeclaratorNode (void)			// sum=0
                        -DeclaratorNode (void)			// sum
                        -ConstantNode (int)			// 0
            -StatementNode (void)			// sum=sum+mergesort(l,mid);
                -AssignNode (void)			// sum=sum+mergesort(l,mid)
                    -IdentifierNode (int)			// sum
                    -AddNode (int)			// sum+mergesort(l,mid)
                        -IdentifierNode (int)			// sum
                        -ParenthesisOpNode (int)			// mergesort(l,mid)
                            -IdentifierNode (BaseType)			// mergesort
                            -ArgumentListNode (void)			// l,mid
                                -IdentifierNode (int)			// l
                                -IdentifierNode (int)			// mid
            -StatementNode (void)			// sum=sum+mergesort(mid,r);
                -AssignNode (void)			// sum=sum+mergesort(mid,r)
                    -IdentifierNode (int)			// sum
                    -AddNode (int)			// sum+mergesort(mid,r)
                        -IdentifierNode (int)			// sum
                        -ParenthesisOpNode (int)			// mergesort(mid,r)
                            -IdentifierNode (BaseType)			// mergesort
                            -ArgumentListNode (void)			// mid,r
                                -IdentifierNode (int)			// mid
                                -IdentifierNode (int)			// r
            -DeclarationNode (void)			// intn_l=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// n_l=0
                    -InitDeclaratorNode (void)			// n_l=0
                        -DeclaratorNode (void)			// n_l
                        -ConstantNode (int)			// 0
            -DeclarationNode (void)			// intn_r=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// n_r=0
                    -InitDeclaratorNode (void)			// n_r=0
                        -DeclaratorNode (void)			// n_r
                        -ConstantNode (int)			// 0
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=l;i<mid;i++)a_left[n_l++]=a[i];
                -ForConditionNode (void)			// i=l;i<mid;i++
                    -AssignNode (void)			// i=l
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// l
                    -LessThanNode (bool)			// i<mid
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// mid
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// a_left[n_l++]=a[i];
                    -AssignNode (void)			// a_left[n_l++]=a[i]
                        -SubscriptOpNode (int)			// a_left[n_l++]
                            -IdentifierNode (int[])			// a_left
                            -PostfixAddNode (int)			// n_l++
                                -IdentifierNode (int)			// n_l
                        -SubscriptOpNode (int)			// a[i]
                            -IdentifierNode (int[])			// a
                            -IdentifierNode (int)			// i
            -ForNode (void)			// for(i=mid;i<r;i++)a_right[n_r++]=a[i];
                -ForConditionNode (void)			// i=mid;i<r;i++
                    -AssignNode (void)			// i=mid
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// mid
                    -LessThanNode (bool)			// i<r
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// r
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// a_right[n_r++]=a[i];
                    -AssignNode (void)			// a_right[n_r++]=a[i]
                        -SubscriptOpNode (int)			// a_right[n_r++]
                            -IdentifierNode (int[])			// a_right
                            -PostfixAddNode (int)			// n_r++
                                -IdentifierNode (int)			// n_r
                        -SubscriptOpNode (int)			// a[i]
                            -IdentifierNode (int[])			// a
                            -IdentifierNode (int)			// i
            -DeclarationNode (void)			// intz_l=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// z_l=0
                    -InitDeclaratorNode (void)			// z_l=0
                        -DeclaratorNode (void)			// z_l
                        -ConstantNode (int)			// 0
            -DeclarationNode (void)			// intz_r=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// z_r=0
                    -InitDeclaratorNode (void)			// z_r=0
                        -DeclaratorNode (void)			// z_r
                        -ConstantNode (int)			// 0
            -DeclarationNode (void)			// intz=l;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// z=l
                    -InitDeclaratorNode (void)			// z=l
                        -DeclaratorNode (void)			// z
                        -IdentifierNode (int)			// l
            -WhileNode (void)			// while(z_l<n_l&&z_r<n_r){sum++;if(a_left[z_l]<a_right[z_r])a[z++]=a_left[z_l++];elsea[z++]=a_right[z_r++];}
                -LogicalAndNode (bool)			// z_l<n_l&&z_r<n_r
                    -LessThanNode (bool)			// z_l<n_l
                        -IdentifierNode (int)			// z_l
                        -IdentifierNode (int)			// n_l
                    -LessThanNode (bool)			// z_r<n_r
                        -IdentifierNode (int)			// z_r
                        -IdentifierNode (int)			// n_r
                -BlockNode (void)			// {sum++;if(a_left[z_l]<a_right[z_r])a[z++]=a_left[z_l++];elsea[z++]=a_right[z_r++];}
                    -StatementNode (void)			// sum++;
                        -PostfixAddNode (int)			// sum++
                            -IdentifierNode (int)			// sum
                    -IfNode (void)			// if(a_left[z_l]<a_right[z_r])a[z++]=a_left[z_l++];elsea[z++]=a_right[z_r++];
                        -LessThanNode (bool)			// a_left[z_l]<a_right[z_r]
                            -SubscriptOpNode (int)			// a_left[z_l]
                                -IdentifierNode (int[])			// a_left
                                -IdentifierNode (int)			// z_l
                            -SubscriptOpNode (int)			// a_right[z_r]
                                -IdentifierNode (int[])			// a_right
                                -IdentifierNode (int)			// z_r
                        -StatementNode (void)			// a[z++]=a_left[z_l++];
                            -AssignNode (void)			// a[z++]=a_left[z_l++]
                                -SubscriptOpNode (int)			// a[z++]
                                    -IdentifierNode (int[])			// a
                                    -PostfixAddNode (int)			// z++
                                        -IdentifierNode (int)			// z
                                -SubscriptOpNode (int)			// a_left[z_l++]
                                    -IdentifierNode (int[])			// a_left
                                    -PostfixAddNode (int)			// z_l++
                                        -IdentifierNode (int)			// z_l
                        -StatementNode (void)			// a[z++]=a_right[z_r++];
                            -AssignNode (void)			// a[z++]=a_right[z_r++]
                                -SubscriptOpNode (int)			// a[z++]
                                    -IdentifierNode (int[])			// a
                                    -PostfixAddNode (int)			// z++
                                        -IdentifierNode (int)			// z
                                -SubscriptOpNode (int)			// a_right[z_r++]
                                    -IdentifierNode (int[])			// a_right
                                    -PostfixAddNode (int)			// z_r++
                                        -IdentifierNode (int)			// z_r
            -WhileNode (void)			// while(z_l<n_l)a[z++]=a_left[z_l++];
                -LessThanNode (bool)			// z_l<n_l
                    -IdentifierNode (int)			// z_l
                    -IdentifierNode (int)			// n_l
                -StatementNode (void)			// a[z++]=a_left[z_l++];
                    -AssignNode (void)			// a[z++]=a_left[z_l++]
                        -SubscriptOpNode (int)			// a[z++]
                            -IdentifierNode (int[])			// a
                            -PostfixAddNode (int)			// z++
                                -IdentifierNode (int)			// z
                        -SubscriptOpNode (int)			// a_left[z_l++]
                            -IdentifierNode (int[])			// a_left
                            -PostfixAddNode (int)			// z_l++
                                -IdentifierNode (int)			// z_l
            -WhileNode (void)			// while(z_r<n_r)a[z++]=a_right[z_r++];
                -LessThanNode (bool)			// z_r<n_r
                    -IdentifierNode (int)			// z_r
                    -IdentifierNode (int)			// n_r
                -StatementNode (void)			// a[z++]=a_right[z_r++];
                    -AssignNode (void)			// a[z++]=a_right[z_r++]
                        -SubscriptOpNode (int)			// a[z++]
                            -IdentifierNode (int[])			// a
                            -PostfixAddNode (int)			// z++
                                -IdentifierNode (int)			// z
                        -SubscriptOpNode (int)			// a_right[z_r++]
                            -IdentifierNode (int[])			// a_right
                            -PostfixAddNode (int)			// z_r++
                                -IdentifierNode (int)			// z_r
            -ReturnNode (void)			// returnsum;
                -IdentifierNode (int)			// sum
    -FuncDefinitionNode (void)			// intheapsort(){inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;intsum=0;inti;inttmp;for(i=1;i<=n;i++){heap[i]=a[i];intx=i;while(x!=1){sum++;if(heap[x]>heap[x>>1])break;tmp=heap[x];heap[x]=heap[x>>1];heap[x>>1]=tmp;x=x>>1;}}intheap_size=n;for(i=1;i<=n;i++){a[i]=heap[1];heap[1]=heap[heap_size--];intx=1;while((x<<1)<=heap_size){intl=x<<1;intr=l+1;inty=l;if(r<=heap_size){sum++;if(heap[r]<heap[l])y=r;}sum++;if(heap[x]<heap[y])break;tmp=heap[x];heap[x]=heap[y];heap[y]=tmp;tmp=x;x=y;y=tmp;}}returnsum;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// heapsort()
            -DeclaratorNode (void)			// heapsort
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;intsum=0;inti;inttmp;for(i=1;i<=n;i++){heap[i]=a[i];intx=i;while(x!=1){sum++;if(heap[x]>heap[x>>1])break;tmp=heap[x];heap[x]=heap[x>>1];heap[x>>1]=tmp;x=x>>1;}}intheap_size=n;for(i=1;i<=n;i++){a[i]=heap[1];heap[1]=heap[heap_size--];intx=1;while((x<<1)<=heap_size){intl=x<<1;intr=l+1;inty=l;if(r<=heap_size){sum++;if(heap[r]<heap[l])y=r;}sum++;if(heap[x]<heap[y])break;tmp=heap[x];heap[x]=heap[y];heap[y]=tmp;tmp=x;x=y;y=tmp;}}returnsum;}
            -DeclarationNode (void)			// inti1;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i1
                    -InitDeclaratorNode (void)			// i1
                        -DeclaratorNode (void)			// i1
            -DeclarationNode (void)			// inti2;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i2
                    -InitDeclaratorNode (void)			// i2
                        -DeclaratorNode (void)			// i2
            -DeclarationNode (void)			// inti3;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i3
                    -InitDeclaratorNode (void)			// i3
                        -DeclaratorNode (void)			// i3
            -DeclarationNode (void)			// inti4;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i4
                    -InitDeclaratorNode (void)			// i4
                        -DeclaratorNode (void)			// i4
            -DeclarationNode (void)			// inti5;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i5
                    -InitDeclaratorNode (void)			// i5
                        -DeclaratorNode (void)			// i5
            -DeclarationNode (void)			// inti6;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i6
                    -InitDeclaratorNode (void)			// i6
                        -DeclaratorNode (void)			// i6
            -DeclarationNode (void)			// inti7;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i7
                    -InitDeclaratorNode (void)			// i7
                        -DeclaratorNode (void)			// i7
            -DeclarationNode (void)			// inti8;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i8
                    -InitDeclaratorNode (void)			// i8
                        -DeclaratorNode (void)			// i8
            -DeclarationNode (void)			// inti9;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i9
                    -InitDeclaratorNode (void)			// i9
                        -DeclaratorNode (void)			// i9
            -DeclarationNode (void)			// inti10;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i10
                    -InitDeclaratorNode (void)			// i10
                        -DeclaratorNode (void)			// i10
            -DeclarationNode (void)			// inti11;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i11
                    -InitDeclaratorNode (void)			// i11
                        -DeclaratorNode (void)			// i11
            -DeclarationNode (void)			// inti12;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i12
                    -InitDeclaratorNode (void)			// i12
                        -DeclaratorNode (void)			// i12
            -DeclarationNode (void)			// inti13;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i13
                    -InitDeclaratorNode (void)			// i13
                        -DeclaratorNode (void)			// i13
            -DeclarationNode (void)			// inti14;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i14
                    -InitDeclaratorNode (void)			// i14
                        -DeclaratorNode (void)			// i14
            -DeclarationNode (void)			// intsum=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// sum=0
                    -InitDeclaratorNode (void)			// sum=0
                        -DeclaratorNode (void)			// sum
                        -ConstantNode (int)			// 0
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -DeclarationNode (void)			// inttmp;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// tmp
                    -InitDeclaratorNode (void)			// tmp
                        -DeclaratorNode (void)			// tmp
            -ForNode (void)			// for(i=1;i<=n;i++){heap[i]=a[i];intx=i;while(x!=1){sum++;if(heap[x]>heap[x>>1])break;tmp=heap[x];heap[x]=heap[x>>1];heap[x>>1]=tmp;x=x>>1;}}
                -ForConditionNode (void)			// i=1;i<=n;i++
                    -AssignNode (void)			// i=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// i<=n
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// n
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {heap[i]=a[i];intx=i;while(x!=1){sum++;if(heap[x]>heap[x>>1])break;tmp=heap[x];heap[x]=heap[x>>1];heap[x>>1]=tmp;x=x>>1;}}
                    -StatementNode (void)			// heap[i]=a[i];
                        -AssignNode (void)			// heap[i]=a[i]
                            -SubscriptOpNode (int)			// heap[i]
                                -IdentifierNode (int[])			// heap
                                -IdentifierNode (int)			// i
                            -SubscriptOpNode (int)			// a[i]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// i
                    -DeclarationNode (void)			// intx=i;
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// x=i
                            -InitDeclaratorNode (void)			// x=i
                                -DeclaratorNode (void)			// x
                                -IdentifierNode (int)			// i
                    -WhileNode (void)			// while(x!=1){sum++;if(heap[x]>heap[x>>1])break;tmp=heap[x];heap[x]=heap[x>>1];heap[x>>1]=tmp;x=x>>1;}
                        -InequalNode (bool)			// x!=1
                            -IdentifierNode (int)			// x
                            -ConstantNode (int)			// 1
                        -BlockNode (void)			// {sum++;if(heap[x]>heap[x>>1])break;tmp=heap[x];heap[x]=heap[x>>1];heap[x>>1]=tmp;x=x>>1;}
                            -StatementNode (void)			// sum++;
                                -PostfixAddNode (int)			// sum++
                                    -IdentifierNode (int)			// sum
                            -IfNode (void)			// if(heap[x]>heap[x>>1])break;
                                -GreaterThanNode (bool)			// heap[x]>heap[x>>1]
                                    -SubscriptOpNode (int)			// heap[x]
                                        -IdentifierNode (int[])			// heap
                                        -IdentifierNode (int)			// x
                                    -SubscriptOpNode (int)			// heap[x>>1]
                                        -IdentifierNode (int[])			// heap
                                        -ShiftRightNode (int)			// x>>1
                                            -IdentifierNode (int)			// x
                                            -ConstantNode (int)			// 1
                                -BreakNode (void)			// break;
                            -StatementNode (void)			// tmp=heap[x];
                                -AssignNode (void)			// tmp=heap[x]
                                    -IdentifierNode (int)			// tmp
                                    -SubscriptOpNode (int)			// heap[x]
                                        -IdentifierNode (int[])			// heap
                                        -IdentifierNode (int)			// x
                            -StatementNode (void)			// heap[x]=heap[x>>1];
                                -AssignNode (void)			// heap[x]=heap[x>>1]
                                    -SubscriptOpNode (int)			// heap[x]
                                        -IdentifierNode (int[])			// heap
                                        -IdentifierNode (int)			// x
                                    -SubscriptOpNode (int)			// heap[x>>1]
                                        -IdentifierNode (int[])			// heap
                                        -ShiftRightNode (int)			// x>>1
                                            -IdentifierNode (int)			// x
                                            -ConstantNode (int)			// 1
                            -StatementNode (void)			// heap[x>>1]=tmp;
                                -AssignNode (void)			// heap[x>>1]=tmp
                                    -SubscriptOpNode (int)			// heap[x>>1]
                                        -IdentifierNode (int[])			// heap
                                        -ShiftRightNode (int)			// x>>1
                                            -IdentifierNode (int)			// x
                                            -ConstantNode (int)			// 1
                                    -IdentifierNode (int)			// tmp
                            -StatementNode (void)			// x=x>>1;
                                -AssignNode (void)			// x=x>>1
                                    -IdentifierNode (int)			// x
                                    -ShiftRightNode (int)			// x>>1
                                        -IdentifierNode (int)			// x
                                        -ConstantNode (int)			// 1
            -DeclarationNode (void)			// intheap_size=n;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// heap_size=n
                    -InitDeclaratorNode (void)			// heap_size=n
                        -DeclaratorNode (void)			// heap_size
                        -IdentifierNode (int)			// n
            -ForNode (void)			// for(i=1;i<=n;i++){a[i]=heap[1];heap[1]=heap[heap_size--];intx=1;while((x<<1)<=heap_size){intl=x<<1;intr=l+1;inty=l;if(r<=heap_size){sum++;if(heap[r]<heap[l])y=r;}sum++;if(heap[x]<heap[y])break;tmp=heap[x];heap[x]=heap[y];heap[y]=tmp;tmp=x;x=y;y=tmp;}}
                -ForConditionNode (void)			// i=1;i<=n;i++
                    -AssignNode (void)			// i=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// i<=n
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// n
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {a[i]=heap[1];heap[1]=heap[heap_size--];intx=1;while((x<<1)<=heap_size){intl=x<<1;intr=l+1;inty=l;if(r<=heap_size){sum++;if(heap[r]<heap[l])y=r;}sum++;if(heap[x]<heap[y])break;tmp=heap[x];heap[x]=heap[y];heap[y]=tmp;tmp=x;x=y;y=tmp;}}
                    -StatementNode (void)			// a[i]=heap[1];
                        -AssignNode (void)			// a[i]=heap[1]
                            -SubscriptOpNode (int)			// a[i]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// i
                            -SubscriptOpNode (int)			// heap[1]
                                -IdentifierNode (int[])			// heap
                                -ConstantNode (int)			// 1
                    -StatementNode (void)			// heap[1]=heap[heap_size--];
                        -AssignNode (void)			// heap[1]=heap[heap_size--]
                            -SubscriptOpNode (int)			// heap[1]
                                -IdentifierNode (int[])			// heap
                                -ConstantNode (int)			// 1
                            -SubscriptOpNode (int)			// heap[heap_size--]
                                -IdentifierNode (int[])			// heap
                                -PostfixSubNode (int)			// heap_size--
                                    -IdentifierNode (int)			// heap_size
                    -DeclarationNode (void)			// intx=1;
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// x=1
                            -InitDeclaratorNode (void)			// x=1
                                -DeclaratorNode (void)			// x
                                -ConstantNode (int)			// 1
                    -WhileNode (void)			// while((x<<1)<=heap_size){intl=x<<1;intr=l+1;inty=l;if(r<=heap_size){sum++;if(heap[r]<heap[l])y=r;}sum++;if(heap[x]<heap[y])break;tmp=heap[x];heap[x]=heap[y];heap[y]=tmp;tmp=x;x=y;y=tmp;}
                        -LessOrEqualThanNode (bool)			// (x<<1)<=heap_size
                            -ShiftLeftNode (int)			// (x<<1)
                                -IdentifierNode (int)			// x
                                -ConstantNode (int)			// 1
                            -IdentifierNode (int)			// heap_size
                        -BlockNode (void)			// {intl=x<<1;intr=l+1;inty=l;if(r<=heap_size){sum++;if(heap[r]<heap[l])y=r;}sum++;if(heap[x]<heap[y])break;tmp=heap[x];heap[x]=heap[y];heap[y]=tmp;tmp=x;x=y;y=tmp;}
                            -DeclarationNode (void)			// intl=x<<1;
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// l=x<<1
                                    -InitDeclaratorNode (void)			// l=x<<1
                                        -DeclaratorNode (void)			// l
                                        -ShiftLeftNode (int)			// x<<1
                                            -IdentifierNode (int)			// x
                                            -ConstantNode (int)			// 1
                            -DeclarationNode (void)			// intr=l+1;
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// r=l+1
                                    -InitDeclaratorNode (void)			// r=l+1
                                        -DeclaratorNode (void)			// r
                                        -AddNode (int)			// l+1
                                            -IdentifierNode (int)			// l
                                            -ConstantNode (int)			// 1
                            -DeclarationNode (void)			// inty=l;
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// y=l
                                    -InitDeclaratorNode (void)			// y=l
                                        -DeclaratorNode (void)			// y
                                        -IdentifierNode (int)			// l
                            -IfNode (void)			// if(r<=heap_size){sum++;if(heap[r]<heap[l])y=r;}
                                -LessOrEqualThanNode (bool)			// r<=heap_size
                                    -IdentifierNode (int)			// r
                                    -IdentifierNode (int)			// heap_size
                                -BlockNode (void)			// {sum++;if(heap[r]<heap[l])y=r;}
                                    -StatementNode (void)			// sum++;
                                        -PostfixAddNode (int)			// sum++
                                            -IdentifierNode (int)			// sum
                                    -IfNode (void)			// if(heap[r]<heap[l])y=r;
                                        -LessThanNode (bool)			// heap[r]<heap[l]
                                            -SubscriptOpNode (int)			// heap[r]
                                                -IdentifierNode (int[])			// heap
                                                -IdentifierNode (int)			// r
                                            -SubscriptOpNode (int)			// heap[l]
                                                -IdentifierNode (int[])			// heap
                                                -IdentifierNode (int)			// l
                                        -StatementNode (void)			// y=r;
                                            -AssignNode (void)			// y=r
                                                -IdentifierNode (int)			// y
                                                -IdentifierNode (int)			// r
                            -StatementNode (void)			// sum++;
                                -PostfixAddNode (int)			// sum++
                                    -IdentifierNode (int)			// sum
                            -IfNode (void)			// if(heap[x]<heap[y])break;
                                -LessThanNode (bool)			// heap[x]<heap[y]
                                    -SubscriptOpNode (int)			// heap[x]
                                        -IdentifierNode (int[])			// heap
                                        -IdentifierNode (int)			// x
                                    -SubscriptOpNode (int)			// heap[y]
                                        -IdentifierNode (int[])			// heap
                                        -IdentifierNode (int)			// y
                                -BreakNode (void)			// break;
                            -StatementNode (void)			// tmp=heap[x];
                                -AssignNode (void)			// tmp=heap[x]
                                    -IdentifierNode (int)			// tmp
                                    -SubscriptOpNode (int)			// heap[x]
                                        -IdentifierNode (int[])			// heap
                                        -IdentifierNode (int)			// x
                            -StatementNode (void)			// heap[x]=heap[y];
                                -AssignNode (void)			// heap[x]=heap[y]
                                    -SubscriptOpNode (int)			// heap[x]
                                        -IdentifierNode (int[])			// heap
                                        -IdentifierNode (int)			// x
                                    -SubscriptOpNode (int)			// heap[y]
                                        -IdentifierNode (int[])			// heap
                                        -IdentifierNode (int)			// y
                            -StatementNode (void)			// heap[y]=tmp;
                                -AssignNode (void)			// heap[y]=tmp
                                    -SubscriptOpNode (int)			// heap[y]
                                        -IdentifierNode (int[])			// heap
                                        -IdentifierNode (int)			// y
                                    -IdentifierNode (int)			// tmp
                            -StatementNode (void)			// tmp=x;
                                -AssignNode (void)			// tmp=x
                                    -IdentifierNode (int)			// tmp
                                    -IdentifierNode (int)			// x
                            -StatementNode (void)			// x=y;
                                -AssignNode (void)			// x=y
                                    -IdentifierNode (int)			// x
                                    -IdentifierNode (int)			// y
                            -StatementNode (void)			// y=tmp;
                                -AssignNode (void)			// y=tmp
                                    -IdentifierNode (int)			// y
                                    -IdentifierNode (int)			// tmp
            -ReturnNode (void)			// returnsum;
                -IdentifierNode (int)			// sum
    -FuncDefinitionNode (void)			// intmain(){inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;n=getInt();intk=getInt();inti;for(i=1;i<=n;i++){a[i]=i;if(i<=k){a[i]=k+1-i;}bak[i]=a[i];}intans1=quicksort(1,n+1);restore();intans2=calc();restore();intans3=mergesort(1,n+1);restore();intans4=heapsort();println(toString(ans1));println(toString(ans2));println(toString(ans3));println(toString(ans4));Aa=newA;a.Optimizer();return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inti1;inti2;inti3;inti4;inti5;inti6;inti7;inti8;inti9;inti10;inti11;inti12;inti13;inti14;n=getInt();intk=getInt();inti;for(i=1;i<=n;i++){a[i]=i;if(i<=k){a[i]=k+1-i;}bak[i]=a[i];}intans1=quicksort(1,n+1);restore();intans2=calc();restore();intans3=mergesort(1,n+1);restore();intans4=heapsort();println(toString(ans1));println(toString(ans2));println(toString(ans3));println(toString(ans4));Aa=newA;a.Optimizer();return0;}
            -DeclarationNode (void)			// inti1;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i1
                    -InitDeclaratorNode (void)			// i1
                        -DeclaratorNode (void)			// i1
            -DeclarationNode (void)			// inti2;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i2
                    -InitDeclaratorNode (void)			// i2
                        -DeclaratorNode (void)			// i2
            -DeclarationNode (void)			// inti3;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i3
                    -InitDeclaratorNode (void)			// i3
                        -DeclaratorNode (void)			// i3
            -DeclarationNode (void)			// inti4;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i4
                    -InitDeclaratorNode (void)			// i4
                        -DeclaratorNode (void)			// i4
            -DeclarationNode (void)			// inti5;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i5
                    -InitDeclaratorNode (void)			// i5
                        -DeclaratorNode (void)			// i5
            -DeclarationNode (void)			// inti6;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i6
                    -InitDeclaratorNode (void)			// i6
                        -DeclaratorNode (void)			// i6
            -DeclarationNode (void)			// inti7;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i7
                    -InitDeclaratorNode (void)			// i7
                        -DeclaratorNode (void)			// i7
            -DeclarationNode (void)			// inti8;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i8
                    -InitDeclaratorNode (void)			// i8
                        -DeclaratorNode (void)			// i8
            -DeclarationNode (void)			// inti9;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i9
                    -InitDeclaratorNode (void)			// i9
                        -DeclaratorNode (void)			// i9
            -DeclarationNode (void)			// inti10;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i10
                    -InitDeclaratorNode (void)			// i10
                        -DeclaratorNode (void)			// i10
            -DeclarationNode (void)			// inti11;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i11
                    -InitDeclaratorNode (void)			// i11
                        -DeclaratorNode (void)			// i11
            -DeclarationNode (void)			// inti12;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i12
                    -InitDeclaratorNode (void)			// i12
                        -DeclaratorNode (void)			// i12
            -DeclarationNode (void)			// inti13;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i13
                    -InitDeclaratorNode (void)			// i13
                        -DeclaratorNode (void)			// i13
            -DeclarationNode (void)			// inti14;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i14
                    -InitDeclaratorNode (void)			// i14
                        -DeclaratorNode (void)			// i14
            -StatementNode (void)			// n=getInt();
                -AssignNode (void)			// n=getInt()
                    -IdentifierNode (int)			// n
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
            -DeclarationNode (void)			// intk=getInt();
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// k=getInt()
                    -InitDeclaratorNode (void)			// k=getInt()
                        -DeclaratorNode (void)			// k
                        -ParenthesisOpNode (int)			// getInt()
                            -IdentifierNode (BaseType)			// getInt
                            -ArgumentListNode (void)
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=1;i<=n;i++){a[i]=i;if(i<=k){a[i]=k+1-i;}bak[i]=a[i];}
                -ForConditionNode (void)			// i=1;i<=n;i++
                    -AssignNode (void)			// i=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// i<=n
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// n
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {a[i]=i;if(i<=k){a[i]=k+1-i;}bak[i]=a[i];}
                    -StatementNode (void)			// a[i]=i;
                        -AssignNode (void)			// a[i]=i
                            -SubscriptOpNode (int)			// a[i]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// i
                    -IfNode (void)			// if(i<=k){a[i]=k+1-i;}
                        -LessOrEqualThanNode (bool)			// i<=k
                            -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// k
                        -BlockNode (void)			// {a[i]=k+1-i;}
                            -StatementNode (void)			// a[i]=k+1-i;
                                -AssignNode (void)			// a[i]=k+1-i
                                    -SubscriptOpNode (int)			// a[i]
                                        -IdentifierNode (int[])			// a
                                        -IdentifierNode (int)			// i
                                    -SubNode (int)			// k+1-i
                                        -AddNode (int)			// k+1
                                            -IdentifierNode (int)			// k
                                            -ConstantNode (int)			// 1
                                        -IdentifierNode (int)			// i
                    -StatementNode (void)			// bak[i]=a[i];
                        -AssignNode (void)			// bak[i]=a[i]
                            -SubscriptOpNode (int)			// bak[i]
                                -IdentifierNode (int[])			// bak
                                -IdentifierNode (int)			// i
                            -SubscriptOpNode (int)			// a[i]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// i
            -DeclarationNode (void)			// intans1=quicksort(1,n+1);
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// ans1=quicksort(1,n+1)
                    -InitDeclaratorNode (void)			// ans1=quicksort(1,n+1)
                        -DeclaratorNode (void)			// ans1
                        -ParenthesisOpNode (int)			// quicksort(1,n+1)
                            -IdentifierNode (BaseType)			// quicksort
                            -ArgumentListNode (void)			// 1,n+1
                                -ConstantNode (int)			// 1
                                -AddNode (int)			// n+1
                                    -IdentifierNode (int)			// n
                                    -ConstantNode (int)			// 1
            -StatementNode (void)			// restore();
                -ParenthesisOpNode (void)			// restore()
                    -IdentifierNode (BaseType)			// restore
                    -ArgumentListNode (void)
            -DeclarationNode (void)			// intans2=calc();
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// ans2=calc()
                    -InitDeclaratorNode (void)			// ans2=calc()
                        -DeclaratorNode (void)			// ans2
                        -ParenthesisOpNode (int)			// calc()
                            -IdentifierNode (BaseType)			// calc
                            -ArgumentListNode (void)
            -StatementNode (void)			// restore();
                -ParenthesisOpNode (void)			// restore()
                    -IdentifierNode (BaseType)			// restore
                    -ArgumentListNode (void)
            -DeclarationNode (void)			// intans3=mergesort(1,n+1);
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// ans3=mergesort(1,n+1)
                    -InitDeclaratorNode (void)			// ans3=mergesort(1,n+1)
                        -DeclaratorNode (void)			// ans3
                        -ParenthesisOpNode (int)			// mergesort(1,n+1)
                            -IdentifierNode (BaseType)			// mergesort
                            -ArgumentListNode (void)			// 1,n+1
                                -ConstantNode (int)			// 1
                                -AddNode (int)			// n+1
                                    -IdentifierNode (int)			// n
                                    -ConstantNode (int)			// 1
            -StatementNode (void)			// restore();
                -ParenthesisOpNode (void)			// restore()
                    -IdentifierNode (BaseType)			// restore
                    -ArgumentListNode (void)
            -DeclarationNode (void)			// intans4=heapsort();
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// ans4=heapsort()
                    -InitDeclaratorNode (void)			// ans4=heapsort()
                        -DeclaratorNode (void)			// ans4
                        -ParenthesisOpNode (int)			// heapsort()
                            -IdentifierNode (BaseType)			// heapsort
                            -ArgumentListNode (void)
            -StatementNode (void)			// println(toString(ans1));
                -ParenthesisOpNode (void)			// println(toString(ans1))
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// toString(ans1)
                        -ParenthesisOpNode (string)			// toString(ans1)
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// ans1
                                -IdentifierNode (int)			// ans1
            -StatementNode (void)			// println(toString(ans2));
                -ParenthesisOpNode (void)			// println(toString(ans2))
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// toString(ans2)
                        -ParenthesisOpNode (string)			// toString(ans2)
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// ans2
                                -IdentifierNode (int)			// ans2
            -StatementNode (void)			// println(toString(ans3));
                -ParenthesisOpNode (void)			// println(toString(ans3))
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// toString(ans3)
                        -ParenthesisOpNode (string)			// toString(ans3)
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// ans3
                                -IdentifierNode (int)			// ans3
            -StatementNode (void)			// println(toString(ans4));
                -ParenthesisOpNode (void)			// println(toString(ans4))
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// toString(ans4)
                        -ParenthesisOpNode (string)			// toString(ans4)
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// ans4
                                -IdentifierNode (int)			// ans4
            -DeclarationNode (void)			// Aa=newA;
                -TypeNode (void)			// A
                    -TypeAttributeNode (void)			// A
                -DeclaratorListNode (void)			// a=newA
                    -InitDeclaratorNode (void)			// a=newA
                        -DeclaratorNode (void)			// a
                        -NewNode (A)			// newA
                            -TypeNode (void)			// A
                                -TypeAttributeNode (void)			// A
                            -ArgumentTypeListNode (void)
            -StatementNode (void)			// a.Optimizer();
                -ParenthesisOpNode (void)			// a.Optimizer()
                    -DotOpNode (BaseType)			// a.Optimizer
                        -IdentifierNode (A)			// a
                    -ArgumentListNode (void)
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
