-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}inthex2int(stringx){inti;intresult=0;for(i=0;i<x.length();i++){intdigit=x.ord(i);if(digit>=48&&digit<=57)result=result*16+digit-48;elseif(digit>=65&&digit<=70)result=result*16+digit-65+10;elseif(digit>=97&&digit<=102)result=result*16+digit-97+10;elsereturn0;}returnresult;}stringasciiTable=" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";stringint2chr(intx){if(x>=32&&x<=126)returnasciiTable.substring(x-32,x-32);return"";}stringtoStringHex(intx){stringret="";inti;for(i=28;i>=0;i=i-4){intdigit=(x>>i)&15;if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);}returnret;}introtate_left(intx,intshift){if(shift==1)return((x&2147483647)<<1)|((x>>31)&1);if(shift==31)return((x&1)<<31)|((x>>1)&2147483647);return((x&((1<<(32-shift))-1))<<shift)|((x>>(32-shift))&((1<<shift)-1));}intadd(intx,inty){intlow=(x&65535)+(y&65535);inthigh=(((x>>16)&65535)+((y>>16)&65535)+(low>>16))&65535;return(high<<16)|(low&65535);}intlohi(intlo,inthi){returnlo|(hi<<16);}intMAXCHUNK=100;intMAXLENGTH=(MAXCHUNK-1)*64-16;int[][]chunks=newint[MAXCHUNK][80];int[]inputBuffer=newint[MAXLENGTH];int[]outputBuffer=newint[5];int[]sha1(int[]input,intlength){intnChunk=(length+64-56)/64+1;if(nChunk>MAXCHUNK){println("nChunk > MAXCHUNK!");returnnull;}inti;intj;for(i=0;i<nChunk;i++)for(j=0;j<80;j++)chunks[i][j]=0;for(i=0;i<length;i++)chunks[i/64][i%64/4]=chunks[i/64][i%64/4]|(input[i]<<((3-i%4)*8));chunks[i/64][i%64/4]=chunks[i/64][i%64/4]|(128<<((3-i%4)*8));chunks[nChunk-1][15]=length<<3;chunks[nChunk-1][14]=(length>>29)&7;inth0=1732584193;inth1=lohi(43913,61389);inth2=lohi(56574,39098);inth3=271733878;inth4=lohi(57840,50130);for(i=0;i<nChunk;i++){for(j=16;j<80;j++)chunks[i][j]=rotate_left(chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]^chunks[i][j-16],1);inta=h0;intb=h1;intc=h2;intd=h3;inte=h4;for(j=0;j<80;j++){intf;intk;if(j<20){f=(b&c)|((~b)&d);k=1518500249;}elseif(j<40){f=b^c^d;k=1859775393;}elseif(j<60){f=(b&c)|(b&d)|(c&d);k=lohi(48348,36635);}else{f=b^c^d;k=lohi(49622,51810);}inttemp=add(add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j]);e=d;d=c;c=rotate_left(b,30);b=a;a=temp;}h0=add(h0,a);h1=add(h1,b);h2=add(h2,c);h3=add(h3,d);h4=add(h4,e);}outputBuffer[0]=h0;outputBuffer[1]=h1;outputBuffer[2]=h2;outputBuffer[3]=h3;outputBuffer[4]=h4;returnoutputBuffer;}voidcomputeSHA1(stringinput){inti;for(i=0;i<input.length();i++)inputBuffer[i]=input.ord(i);int[]result=sha1(inputBuffer,input.length());for(i=0;i<result.size();i++)print(toStringHex(result[i]));println("");}intnextLetter(intnow){if(now==122)return-1;if(now==90)return97;if(now==57)return65;returnnow+1;}boolnextText(int[]now,intlength){inti;for(i=length-1;i>=0;i--){now[i]=nextLetter(now[i]);if(now[i]==-1)now[i]=48;elsereturntrue;}returnfalse;}boolarray_equal(int[]a,int[]b){if(a.size()!=b.size())returnfalse;inti;for(i=0;i<a.size();i++)if(a[i]!=b[i])returnfalse;returntrue;}voidcrackSHA1(stringinput){int[]target=newint[5];if(input.length()!=40){println("Invalid input");return;}inti;for(i=0;i<5;i++)target[i]=0;for(i=0;i<40;i=i+4)target[i/8]=target[i/8]|(hex2int(input.substring(i,i+3))<<(1-(i/4)%2)*16);intMAXDIGIT=4;intdigit;for(digit=1;digit<=MAXDIGIT;digit++){for(i=0;i<digit;i++)inputBuffer[i]=48;while(true){int[]out=sha1(inputBuffer,digit);if(array_equal(out,target)){for(i=0;i<digit;i++)print(int2chr(inputBuffer[i]));println("");return;}if(!nextText(inputBuffer,digit))break;}}println("Not Found!");}intmain(){println(toString(lohi(48348,36635)));intop;stringinput;while(true){op=getInt();if(op==0)break;if(op==1){input=getString();computeSHA1(input);}elseif(op==2){input=getString();crackSHA1(input);}}return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// inthex2int(stringx){inti;intresult=0;for(i=0;i<x.length();i++){intdigit=x.ord(i);if(digit>=48&&digit<=57)result=result*16+digit-48;elseif(digit>=65&&digit<=70)result=result*16+digit-65+10;elseif(digit>=97&&digit<=102)result=result*16+digit-97+10;elsereturn0;}returnresult;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// hex2int(stringx)
            -DeclaratorNode (void)			// hex2int
            -ArgumentTypeListNode (void)			// stringx
                -ArgumentDeclarationNode (void)			// stringx
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// x
        -BlockNode (void)			// {inti;intresult=0;for(i=0;i<x.length();i++){intdigit=x.ord(i);if(digit>=48&&digit<=57)result=result*16+digit-48;elseif(digit>=65&&digit<=70)result=result*16+digit-65+10;elseif(digit>=97&&digit<=102)result=result*16+digit-97+10;elsereturn0;}returnresult;}
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -DeclarationNode (void)			// intresult=0;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// result=0
                    -InitDeclaratorNode (void)			// result=0
                        -DeclaratorNode (void)			// result
                        -ConstantNode (int)			// 0
            -ForNode (void)			// for(i=0;i<x.length();i++){intdigit=x.ord(i);if(digit>=48&&digit<=57)result=result*16+digit-48;elseif(digit>=65&&digit<=70)result=result*16+digit-65+10;elseif(digit>=97&&digit<=102)result=result*16+digit-97+10;elsereturn0;}
                -ForConditionNode (void)			// i=0;i<x.length();i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<x.length()
                        -IdentifierNode (int)			// i
                        -ParenthesisOpNode (int)			// x.length()
                            -DotOpNode (BaseType)			// x.length
                                -IdentifierNode (string)			// x
                            -ArgumentListNode (void)
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {intdigit=x.ord(i);if(digit>=48&&digit<=57)result=result*16+digit-48;elseif(digit>=65&&digit<=70)result=result*16+digit-65+10;elseif(digit>=97&&digit<=102)result=result*16+digit-97+10;elsereturn0;}
                    -DeclarationNode (void)			// intdigit=x.ord(i);
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// digit=x.ord(i)
                            -InitDeclaratorNode (void)			// digit=x.ord(i)
                                -DeclaratorNode (void)			// digit
                                -ParenthesisOpNode (int)			// x.ord(i)
                                    -DotOpNode (BaseType)			// x.ord
                                        -IdentifierNode (string)			// x
                                    -ArgumentListNode (void)			// i
                                        -IdentifierNode (int)			// i
                    -IfNode (void)			// if(digit>=48&&digit<=57)result=result*16+digit-48;elseif(digit>=65&&digit<=70)result=result*16+digit-65+10;elseif(digit>=97&&digit<=102)result=result*16+digit-97+10;elsereturn0;
                        -LogicalAndNode (bool)			// digit>=48&&digit<=57
                            -GreaterOrEqualThanNode (bool)			// digit>=48
                                -IdentifierNode (int)			// digit
                                -ConstantNode (int)			// 48
                            -LessOrEqualThanNode (bool)			// digit<=57
                                -IdentifierNode (int)			// digit
                                -ConstantNode (int)			// 57
                        -StatementNode (void)			// result=result*16+digit-48;
                            -AssignNode (void)			// result=result*16+digit-48
                                -IdentifierNode (int)			// result
                                -SubNode (int)			// result*16+digit-48
                                    -AddNode (int)			// result*16+digit
                                        -MultiplyNode (int)			// result*16
                                            -IdentifierNode (int)			// result
                                            -ConstantNode (int)			// 16
                                        -IdentifierNode (int)			// digit
                                    -ConstantNode (int)			// 48
                        -IfNode (void)			// if(digit>=65&&digit<=70)result=result*16+digit-65+10;elseif(digit>=97&&digit<=102)result=result*16+digit-97+10;elsereturn0;
                            -LogicalAndNode (bool)			// digit>=65&&digit<=70
                                -GreaterOrEqualThanNode (bool)			// digit>=65
                                    -IdentifierNode (int)			// digit
                                    -ConstantNode (int)			// 65
                                -LessOrEqualThanNode (bool)			// digit<=70
                                    -IdentifierNode (int)			// digit
                                    -ConstantNode (int)			// 70
                            -StatementNode (void)			// result=result*16+digit-65+10;
                                -AssignNode (void)			// result=result*16+digit-65+10
                                    -IdentifierNode (int)			// result
                                    -AddNode (int)			// result*16+digit-65+10
                                        -SubNode (int)			// result*16+digit-65
                                            -AddNode (int)			// result*16+digit
                                                -MultiplyNode (int)			// result*16
                                                    -IdentifierNode (int)			// result
                                                    -ConstantNode (int)			// 16
                                                -IdentifierNode (int)			// digit
                                            -ConstantNode (int)			// 65
                                        -ConstantNode (int)			// 10
                            -IfNode (void)			// if(digit>=97&&digit<=102)result=result*16+digit-97+10;elsereturn0;
                                -LogicalAndNode (bool)			// digit>=97&&digit<=102
                                    -GreaterOrEqualThanNode (bool)			// digit>=97
                                        -IdentifierNode (int)			// digit
                                        -ConstantNode (int)			// 97
                                    -LessOrEqualThanNode (bool)			// digit<=102
                                        -IdentifierNode (int)			// digit
                                        -ConstantNode (int)			// 102
                                -StatementNode (void)			// result=result*16+digit-97+10;
                                    -AssignNode (void)			// result=result*16+digit-97+10
                                        -IdentifierNode (int)			// result
                                        -AddNode (int)			// result*16+digit-97+10
                                            -SubNode (int)			// result*16+digit-97
                                                -AddNode (int)			// result*16+digit
                                                    -MultiplyNode (int)			// result*16
                                                        -IdentifierNode (int)			// result
                                                        -ConstantNode (int)			// 16
                                                    -IdentifierNode (int)			// digit
                                                -ConstantNode (int)			// 97
                                            -ConstantNode (int)			// 10
                                -ReturnNode (void)			// return0;
                                    -ConstantNode (int)			// 0
            -ReturnNode (void)			// returnresult;
                -IdentifierNode (int)			// result
    -DeclarationNode (void)			// stringasciiTable=" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -DeclaratorListNode (void)			// asciiTable=" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
            -InitDeclaratorNode (void)			// asciiTable=" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
                -DeclaratorNode (void)			// asciiTable
                -StringLiteralNode (string)			// " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
    -FuncDefinitionNode (void)			// stringint2chr(intx){if(x>=32&&x<=126)returnasciiTable.substring(x-32,x-32);return"";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// int2chr(intx)
            -DeclaratorNode (void)			// int2chr
            -ArgumentTypeListNode (void)			// intx
                -ArgumentDeclarationNode (void)			// intx
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// x
        -BlockNode (void)			// {if(x>=32&&x<=126)returnasciiTable.substring(x-32,x-32);return"";}
            -IfNode (void)			// if(x>=32&&x<=126)returnasciiTable.substring(x-32,x-32);
                -LogicalAndNode (bool)			// x>=32&&x<=126
                    -GreaterOrEqualThanNode (bool)			// x>=32
                        -IdentifierNode (int)			// x
                        -ConstantNode (int)			// 32
                    -LessOrEqualThanNode (bool)			// x<=126
                        -IdentifierNode (int)			// x
                        -ConstantNode (int)			// 126
                -ReturnNode (void)			// returnasciiTable.substring(x-32,x-32);
                    -ParenthesisOpNode (string)			// asciiTable.substring(x-32,x-32)
                        -DotOpNode (BaseType)			// asciiTable.substring
                            -IdentifierNode (string)			// asciiTable
                        -ArgumentListNode (void)			// x-32,x-32
                            -SubNode (int)			// x-32
                                -IdentifierNode (int)			// x
                                -ConstantNode (int)			// 32
                            -SubNode (int)			// x-32
                                -IdentifierNode (int)			// x
                                -ConstantNode (int)			// 32
            -ReturnNode (void)			// return"";
                -StringLiteralNode (string)			// ""
    -FuncDefinitionNode (void)			// stringtoStringHex(intx){stringret="";inti;for(i=28;i>=0;i=i-4){intdigit=(x>>i)&15;if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);}returnret;}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toStringHex(intx)
            -DeclaratorNode (void)			// toStringHex
            -ArgumentTypeListNode (void)			// intx
                -ArgumentDeclarationNode (void)			// intx
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// x
        -BlockNode (void)			// {stringret="";inti;for(i=28;i>=0;i=i-4){intdigit=(x>>i)&15;if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);}returnret;}
            -DeclarationNode (void)			// stringret="";
                -TypeNode (void)			// string
                    -TypeAttributeNode (void)			// string
                -DeclaratorListNode (void)			// ret=""
                    -InitDeclaratorNode (void)			// ret=""
                        -DeclaratorNode (void)			// ret
                        -StringLiteralNode (string)			// ""
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=28;i>=0;i=i-4){intdigit=(x>>i)&15;if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);}
                -ForConditionNode (void)			// i=28;i>=0;i=i-4
                    -AssignNode (void)			// i=28
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 28
                    -GreaterOrEqualThanNode (bool)			// i>=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -AssignNode (void)			// i=i-4
                        -IdentifierNode (int)			// i
                        -SubNode (int)			// i-4
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 4
                -BlockNode (void)			// {intdigit=(x>>i)&15;if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);}
                    -DeclarationNode (void)			// intdigit=(x>>i)&15;
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// digit=(x>>i)&15
                            -InitDeclaratorNode (void)			// digit=(x>>i)&15
                                -DeclaratorNode (void)			// digit
                                -AndNode (int)			// (x>>i)&15
                                    -ShiftRightNode (int)			// (x>>i)
                                        -IdentifierNode (int)			// x
                                        -IdentifierNode (int)			// i
                                    -ConstantNode (int)			// 15
                    -IfNode (void)			// if(digit<10)ret=ret+int2chr(48+digit);elseret=ret+int2chr(65+digit-10);
                        -LessThanNode (bool)			// digit<10
                            -IdentifierNode (int)			// digit
                            -ConstantNode (int)			// 10
                        -StatementNode (void)			// ret=ret+int2chr(48+digit);
                            -AssignNode (void)			// ret=ret+int2chr(48+digit)
                                -IdentifierNode (string)			// ret
                                -AddNode (string)			// ret+int2chr(48+digit)
                                    -IdentifierNode (string)			// ret
                                    -ParenthesisOpNode (string)			// int2chr(48+digit)
                                        -IdentifierNode (BaseType)			// int2chr
                                        -ArgumentListNode (void)			// 48+digit
                                            -AddNode (int)			// 48+digit
                                                -ConstantNode (int)			// 48
                                                -IdentifierNode (int)			// digit
                        -StatementNode (void)			// ret=ret+int2chr(65+digit-10);
                            -AssignNode (void)			// ret=ret+int2chr(65+digit-10)
                                -IdentifierNode (string)			// ret
                                -AddNode (string)			// ret+int2chr(65+digit-10)
                                    -IdentifierNode (string)			// ret
                                    -ParenthesisOpNode (string)			// int2chr(65+digit-10)
                                        -IdentifierNode (BaseType)			// int2chr
                                        -ArgumentListNode (void)			// 65+digit-10
                                            -SubNode (int)			// 65+digit-10
                                                -AddNode (int)			// 65+digit
                                                    -ConstantNode (int)			// 65
                                                    -IdentifierNode (int)			// digit
                                                -ConstantNode (int)			// 10
            -ReturnNode (void)			// returnret;
                -IdentifierNode (string)			// ret
    -FuncDefinitionNode (void)			// introtate_left(intx,intshift){if(shift==1)return((x&2147483647)<<1)|((x>>31)&1);if(shift==31)return((x&1)<<31)|((x>>1)&2147483647);return((x&((1<<(32-shift))-1))<<shift)|((x>>(32-shift))&((1<<shift)-1));}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// rotate_left(intx,intshift)
            -DeclaratorNode (void)			// rotate_left
            -ArgumentTypeListNode (void)			// intx,intshift
                -ArgumentDeclarationNode (void)			// intx
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// x
                -ArgumentDeclarationNode (void)			// intshift
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// shift
        -BlockNode (void)			// {if(shift==1)return((x&2147483647)<<1)|((x>>31)&1);if(shift==31)return((x&1)<<31)|((x>>1)&2147483647);return((x&((1<<(32-shift))-1))<<shift)|((x>>(32-shift))&((1<<shift)-1));}
            -IfNode (void)			// if(shift==1)return((x&2147483647)<<1)|((x>>31)&1);
                -EqualNode (bool)			// shift==1
                    -IdentifierNode (int)			// shift
                    -ConstantNode (int)			// 1
                -ReturnNode (void)			// return((x&2147483647)<<1)|((x>>31)&1);
                    -OrNode (int)			// ((x&2147483647)<<1)|((x>>31)&1)
                        -ShiftLeftNode (int)			// ((x&2147483647)<<1)
                            -AndNode (int)			// (x&2147483647)
                                -IdentifierNode (int)			// x
                                -ConstantNode (int)			// 2147483647
                            -ConstantNode (int)			// 1
                        -AndNode (int)			// ((x>>31)&1)
                            -ShiftRightNode (int)			// (x>>31)
                                -IdentifierNode (int)			// x
                                -ConstantNode (int)			// 31
                            -ConstantNode (int)			// 1
            -IfNode (void)			// if(shift==31)return((x&1)<<31)|((x>>1)&2147483647);
                -EqualNode (bool)			// shift==31
                    -IdentifierNode (int)			// shift
                    -ConstantNode (int)			// 31
                -ReturnNode (void)			// return((x&1)<<31)|((x>>1)&2147483647);
                    -OrNode (int)			// ((x&1)<<31)|((x>>1)&2147483647)
                        -ShiftLeftNode (int)			// ((x&1)<<31)
                            -AndNode (int)			// (x&1)
                                -IdentifierNode (int)			// x
                                -ConstantNode (int)			// 1
                            -ConstantNode (int)			// 31
                        -AndNode (int)			// ((x>>1)&2147483647)
                            -ShiftRightNode (int)			// (x>>1)
                                -IdentifierNode (int)			// x
                                -ConstantNode (int)			// 1
                            -ConstantNode (int)			// 2147483647
            -ReturnNode (void)			// return((x&((1<<(32-shift))-1))<<shift)|((x>>(32-shift))&((1<<shift)-1));
                -OrNode (int)			// ((x&((1<<(32-shift))-1))<<shift)|((x>>(32-shift))&((1<<shift)-1))
                    -ShiftLeftNode (int)			// ((x&((1<<(32-shift))-1))<<shift)
                        -AndNode (int)			// (x&((1<<(32-shift))-1))
                            -IdentifierNode (int)			// x
                            -SubNode (int)			// ((1<<(32-shift))-1)
                                -ShiftLeftNode (int)			// (1<<(32-shift))
                                    -ConstantNode (int)			// 1
                                    -SubNode (int)			// (32-shift)
                                        -ConstantNode (int)			// 32
                                        -IdentifierNode (int)			// shift
                                -ConstantNode (int)			// 1
                        -IdentifierNode (int)			// shift
                    -AndNode (int)			// ((x>>(32-shift))&((1<<shift)-1))
                        -ShiftRightNode (int)			// (x>>(32-shift))
                            -IdentifierNode (int)			// x
                            -SubNode (int)			// (32-shift)
                                -ConstantNode (int)			// 32
                                -IdentifierNode (int)			// shift
                        -SubNode (int)			// ((1<<shift)-1)
                            -ShiftLeftNode (int)			// (1<<shift)
                                -ConstantNode (int)			// 1
                                -IdentifierNode (int)			// shift
                            -ConstantNode (int)			// 1
    -FuncDefinitionNode (void)			// intadd(intx,inty){intlow=(x&65535)+(y&65535);inthigh=(((x>>16)&65535)+((y>>16)&65535)+(low>>16))&65535;return(high<<16)|(low&65535);}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// add(intx,inty)
            -DeclaratorNode (void)			// add
            -ArgumentTypeListNode (void)			// intx,inty
                -ArgumentDeclarationNode (void)			// intx
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// x
                -ArgumentDeclarationNode (void)			// inty
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// y
        -BlockNode (void)			// {intlow=(x&65535)+(y&65535);inthigh=(((x>>16)&65535)+((y>>16)&65535)+(low>>16))&65535;return(high<<16)|(low&65535);}
            -DeclarationNode (void)			// intlow=(x&65535)+(y&65535);
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// low=(x&65535)+(y&65535)
                    -InitDeclaratorNode (void)			// low=(x&65535)+(y&65535)
                        -DeclaratorNode (void)			// low
                        -AddNode (int)			// (x&65535)+(y&65535)
                            -AndNode (int)			// (x&65535)
                                -IdentifierNode (int)			// x
                                -ConstantNode (int)			// 65535
                            -AndNode (int)			// (y&65535)
                                -IdentifierNode (int)			// y
                                -ConstantNode (int)			// 65535
            -DeclarationNode (void)			// inthigh=(((x>>16)&65535)+((y>>16)&65535)+(low>>16))&65535;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// high=(((x>>16)&65535)+((y>>16)&65535)+(low>>16))&65535
                    -InitDeclaratorNode (void)			// high=(((x>>16)&65535)+((y>>16)&65535)+(low>>16))&65535
                        -DeclaratorNode (void)			// high
                        -AndNode (int)			// (((x>>16)&65535)+((y>>16)&65535)+(low>>16))&65535
                            -AddNode (int)			// (((x>>16)&65535)+((y>>16)&65535)+(low>>16))
                                -AddNode (int)			// ((x>>16)&65535)+((y>>16)&65535)
                                    -AndNode (int)			// ((x>>16)&65535)
                                        -ShiftRightNode (int)			// (x>>16)
                                            -IdentifierNode (int)			// x
                                            -ConstantNode (int)			// 16
                                        -ConstantNode (int)			// 65535
                                    -AndNode (int)			// ((y>>16)&65535)
                                        -ShiftRightNode (int)			// (y>>16)
                                            -IdentifierNode (int)			// y
                                            -ConstantNode (int)			// 16
                                        -ConstantNode (int)			// 65535
                                -ShiftRightNode (int)			// (low>>16)
                                    -IdentifierNode (int)			// low
                                    -ConstantNode (int)			// 16
                            -ConstantNode (int)			// 65535
            -ReturnNode (void)			// return(high<<16)|(low&65535);
                -OrNode (int)			// (high<<16)|(low&65535)
                    -ShiftLeftNode (int)			// (high<<16)
                        -IdentifierNode (int)			// high
                        -ConstantNode (int)			// 16
                    -AndNode (int)			// (low&65535)
                        -IdentifierNode (int)			// low
                        -ConstantNode (int)			// 65535
    -FuncDefinitionNode (void)			// intlohi(intlo,inthi){returnlo|(hi<<16);}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// lohi(intlo,inthi)
            -DeclaratorNode (void)			// lohi
            -ArgumentTypeListNode (void)			// intlo,inthi
                -ArgumentDeclarationNode (void)			// intlo
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// lo
                -ArgumentDeclarationNode (void)			// inthi
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// hi
        -BlockNode (void)			// {returnlo|(hi<<16);}
            -ReturnNode (void)			// returnlo|(hi<<16);
                -OrNode (int)			// lo|(hi<<16)
                    -IdentifierNode (int)			// lo
                    -ShiftLeftNode (int)			// (hi<<16)
                        -IdentifierNode (int)			// hi
                        -ConstantNode (int)			// 16
    -DeclarationNode (void)			// intMAXCHUNK=100;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// MAXCHUNK=100
            -InitDeclaratorNode (void)			// MAXCHUNK=100
                -DeclaratorNode (void)			// MAXCHUNK
                -ConstantNode (int)			// 100
    -DeclarationNode (void)			// intMAXLENGTH=(MAXCHUNK-1)*64-16;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// MAXLENGTH=(MAXCHUNK-1)*64-16
            -InitDeclaratorNode (void)			// MAXLENGTH=(MAXCHUNK-1)*64-16
                -DeclaratorNode (void)			// MAXLENGTH
                -SubNode (int)			// (MAXCHUNK-1)*64-16
                    -MultiplyNode (int)			// (MAXCHUNK-1)*64
                        -SubNode (int)			// (MAXCHUNK-1)
                            -IdentifierNode (int)			// MAXCHUNK
                            -ConstantNode (int)			// 1
                        -ConstantNode (int)			// 64
                    -ConstantNode (int)			// 16
    -DeclarationNode (void)			// int[][]chunks=newint[MAXCHUNK][80];
        -TypeNode (void)			// int[][]
            -TypeAttributeNode (void)			// int[][]
                -EmptyExpressionNode (void)
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// chunks=newint[MAXCHUNK][80]
            -InitDeclaratorNode (void)			// chunks=newint[MAXCHUNK][80]
                -DeclaratorNode (void)			// chunks
                -NewNode (int[][])			// newint[MAXCHUNK][80]
                    -TypeNode (void)			// int[MAXCHUNK][80]
                        -TypeAttributeNode (void)			// int[MAXCHUNK][80]
                            -IdentifierNode (int)			// MAXCHUNK
                            -ConstantNode (int)			// 80
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[]inputBuffer=newint[MAXLENGTH];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// inputBuffer=newint[MAXLENGTH]
            -InitDeclaratorNode (void)			// inputBuffer=newint[MAXLENGTH]
                -DeclaratorNode (void)			// inputBuffer
                -NewNode (int[])			// newint[MAXLENGTH]
                    -TypeNode (void)			// int[MAXLENGTH]
                        -TypeAttributeNode (void)			// int[MAXLENGTH]
                            -IdentifierNode (int)			// MAXLENGTH
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// int[]outputBuffer=newint[5];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// outputBuffer=newint[5]
            -InitDeclaratorNode (void)			// outputBuffer=newint[5]
                -DeclaratorNode (void)			// outputBuffer
                -NewNode (int[])			// newint[5]
                    -TypeNode (void)			// int[5]
                        -TypeAttributeNode (void)			// int[5]
                            -ConstantNode (int)			// 5
                    -ArgumentTypeListNode (void)
    -FuncDefinitionNode (void)			// int[]sha1(int[]input,intlength){intnChunk=(length+64-56)/64+1;if(nChunk>MAXCHUNK){println("nChunk > MAXCHUNK!");returnnull;}inti;intj;for(i=0;i<nChunk;i++)for(j=0;j<80;j++)chunks[i][j]=0;for(i=0;i<length;i++)chunks[i/64][i%64/4]=chunks[i/64][i%64/4]|(input[i]<<((3-i%4)*8));chunks[i/64][i%64/4]=chunks[i/64][i%64/4]|(128<<((3-i%4)*8));chunks[nChunk-1][15]=length<<3;chunks[nChunk-1][14]=(length>>29)&7;inth0=1732584193;inth1=lohi(43913,61389);inth2=lohi(56574,39098);inth3=271733878;inth4=lohi(57840,50130);for(i=0;i<nChunk;i++){for(j=16;j<80;j++)chunks[i][j]=rotate_left(chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]^chunks[i][j-16],1);inta=h0;intb=h1;intc=h2;intd=h3;inte=h4;for(j=0;j<80;j++){intf;intk;if(j<20){f=(b&c)|((~b)&d);k=1518500249;}elseif(j<40){f=b^c^d;k=1859775393;}elseif(j<60){f=(b&c)|(b&d)|(c&d);k=lohi(48348,36635);}else{f=b^c^d;k=lohi(49622,51810);}inttemp=add(add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j]);e=d;d=c;c=rotate_left(b,30);b=a;a=temp;}h0=add(h0,a);h1=add(h1,b);h2=add(h2,c);h3=add(h3,d);h4=add(h4,e);}outputBuffer[0]=h0;outputBuffer[1]=h1;outputBuffer[2]=h2;outputBuffer[3]=h3;outputBuffer[4]=h4;returnoutputBuffer;}
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
                -EmptyExpressionNode (void)
        -FuncDeclaratorNode (void)			// sha1(int[]input,intlength)
            -DeclaratorNode (void)			// sha1
            -ArgumentTypeListNode (void)			// int[]input,intlength
                -ArgumentDeclarationNode (void)			// int[]input
                    -TypeNode (void)			// int[]
                        -TypeAttributeNode (void)			// int[]
                            -EmptyExpressionNode (void)
                    -DeclaratorNode (void)			// input
                -ArgumentDeclarationNode (void)			// intlength
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// length
        -BlockNode (void)			// {intnChunk=(length+64-56)/64+1;if(nChunk>MAXCHUNK){println("nChunk > MAXCHUNK!");returnnull;}inti;intj;for(i=0;i<nChunk;i++)for(j=0;j<80;j++)chunks[i][j]=0;for(i=0;i<length;i++)chunks[i/64][i%64/4]=chunks[i/64][i%64/4]|(input[i]<<((3-i%4)*8));chunks[i/64][i%64/4]=chunks[i/64][i%64/4]|(128<<((3-i%4)*8));chunks[nChunk-1][15]=length<<3;chunks[nChunk-1][14]=(length>>29)&7;inth0=1732584193;inth1=lohi(43913,61389);inth2=lohi(56574,39098);inth3=271733878;inth4=lohi(57840,50130);for(i=0;i<nChunk;i++){for(j=16;j<80;j++)chunks[i][j]=rotate_left(chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]^chunks[i][j-16],1);inta=h0;intb=h1;intc=h2;intd=h3;inte=h4;for(j=0;j<80;j++){intf;intk;if(j<20){f=(b&c)|((~b)&d);k=1518500249;}elseif(j<40){f=b^c^d;k=1859775393;}elseif(j<60){f=(b&c)|(b&d)|(c&d);k=lohi(48348,36635);}else{f=b^c^d;k=lohi(49622,51810);}inttemp=add(add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j]);e=d;d=c;c=rotate_left(b,30);b=a;a=temp;}h0=add(h0,a);h1=add(h1,b);h2=add(h2,c);h3=add(h3,d);h4=add(h4,e);}outputBuffer[0]=h0;outputBuffer[1]=h1;outputBuffer[2]=h2;outputBuffer[3]=h3;outputBuffer[4]=h4;returnoutputBuffer;}
            -DeclarationNode (void)			// intnChunk=(length+64-56)/64+1;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// nChunk=(length+64-56)/64+1
                    -InitDeclaratorNode (void)			// nChunk=(length+64-56)/64+1
                        -DeclaratorNode (void)			// nChunk
                        -AddNode (int)			// (length+64-56)/64+1
                            -DivideNode (int)			// (length+64-56)/64
                                -SubNode (int)			// (length+64-56)
                                    -AddNode (int)			// length+64
                                        -IdentifierNode (int)			// length
                                        -ConstantNode (int)			// 64
                                    -ConstantNode (int)			// 56
                                -ConstantNode (int)			// 64
                            -ConstantNode (int)			// 1
            -IfNode (void)			// if(nChunk>MAXCHUNK){println("nChunk > MAXCHUNK!");returnnull;}
                -GreaterThanNode (bool)			// nChunk>MAXCHUNK
                    -IdentifierNode (int)			// nChunk
                    -IdentifierNode (int)			// MAXCHUNK
                -BlockNode (void)			// {println("nChunk > MAXCHUNK!");returnnull;}
                    -StatementNode (void)			// println("nChunk > MAXCHUNK!");
                        -ParenthesisOpNode (void)			// println("nChunk > MAXCHUNK!")
                            -IdentifierNode (BaseType)			// println
                            -ArgumentListNode (void)			// "nChunk > MAXCHUNK!"
                                -StringLiteralNode (string)			// "nChunk > MAXCHUNK!"
                    -ReturnNode (void)			// returnnull;
                        -ConstantNode (null)			// null
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -DeclarationNode (void)			// intj;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// j
                    -InitDeclaratorNode (void)			// j
                        -DeclaratorNode (void)			// j
            -ForNode (void)			// for(i=0;i<nChunk;i++)for(j=0;j<80;j++)chunks[i][j]=0;
                -ForConditionNode (void)			// i=0;i<nChunk;i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<nChunk
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// nChunk
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -ForNode (void)			// for(j=0;j<80;j++)chunks[i][j]=0;
                    -ForConditionNode (void)			// j=0;j<80;j++
                        -AssignNode (void)			// j=0
                            -IdentifierNode (int)			// j
                            -ConstantNode (int)			// 0
                        -LessThanNode (bool)			// j<80
                            -IdentifierNode (int)			// j
                            -ConstantNode (int)			// 80
                        -PostfixAddNode (int)			// j++
                            -IdentifierNode (int)			// j
                    -StatementNode (void)			// chunks[i][j]=0;
                        -AssignNode (void)			// chunks[i][j]=0
                            -SubscriptOpNode (int)			// chunks[i][j]
                                -SubscriptOpNode (int[])			// chunks[i]
                                    -IdentifierNode (int[][])			// chunks
                                    -IdentifierNode (int)			// i
                                -IdentifierNode (int)			// j
                            -ConstantNode (int)			// 0
            -ForNode (void)			// for(i=0;i<length;i++)chunks[i/64][i%64/4]=chunks[i/64][i%64/4]|(input[i]<<((3-i%4)*8));
                -ForConditionNode (void)			// i=0;i<length;i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<length
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// length
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// chunks[i/64][i%64/4]=chunks[i/64][i%64/4]|(input[i]<<((3-i%4)*8));
                    -AssignNode (void)			// chunks[i/64][i%64/4]=chunks[i/64][i%64/4]|(input[i]<<((3-i%4)*8))
                        -SubscriptOpNode (int)			// chunks[i/64][i%64/4]
                            -SubscriptOpNode (int[])			// chunks[i/64]
                                -IdentifierNode (int[][])			// chunks
                                -DivideNode (int)			// i/64
                                    -IdentifierNode (int)			// i
                                    -ConstantNode (int)			// 64
                            -DivideNode (int)			// i%64/4
                                -ModuloNode (int)			// i%64
                                    -IdentifierNode (int)			// i
                                    -ConstantNode (int)			// 64
                                -ConstantNode (int)			// 4
                        -OrNode (int)			// chunks[i/64][i%64/4]|(input[i]<<((3-i%4)*8))
                            -SubscriptOpNode (int)			// chunks[i/64][i%64/4]
                                -SubscriptOpNode (int[])			// chunks[i/64]
                                    -IdentifierNode (int[][])			// chunks
                                    -DivideNode (int)			// i/64
                                        -IdentifierNode (int)			// i
                                        -ConstantNode (int)			// 64
                                -DivideNode (int)			// i%64/4
                                    -ModuloNode (int)			// i%64
                                        -IdentifierNode (int)			// i
                                        -ConstantNode (int)			// 64
                                    -ConstantNode (int)			// 4
                            -ShiftLeftNode (int)			// (input[i]<<((3-i%4)*8))
                                -SubscriptOpNode (int)			// input[i]
                                    -IdentifierNode (int[])			// input
                                    -IdentifierNode (int)			// i
                                -MultiplyNode (int)			// ((3-i%4)*8)
                                    -SubNode (int)			// (3-i%4)
                                        -ConstantNode (int)			// 3
                                        -ModuloNode (int)			// i%4
                                            -IdentifierNode (int)			// i
                                            -ConstantNode (int)			// 4
                                    -ConstantNode (int)			// 8
            -StatementNode (void)			// chunks[i/64][i%64/4]=chunks[i/64][i%64/4]|(128<<((3-i%4)*8));
                -AssignNode (void)			// chunks[i/64][i%64/4]=chunks[i/64][i%64/4]|(128<<((3-i%4)*8))
                    -SubscriptOpNode (int)			// chunks[i/64][i%64/4]
                        -SubscriptOpNode (int[])			// chunks[i/64]
                            -IdentifierNode (int[][])			// chunks
                            -DivideNode (int)			// i/64
                                -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 64
                        -DivideNode (int)			// i%64/4
                            -ModuloNode (int)			// i%64
                                -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 64
                            -ConstantNode (int)			// 4
                    -OrNode (int)			// chunks[i/64][i%64/4]|(128<<((3-i%4)*8))
                        -SubscriptOpNode (int)			// chunks[i/64][i%64/4]
                            -SubscriptOpNode (int[])			// chunks[i/64]
                                -IdentifierNode (int[][])			// chunks
                                -DivideNode (int)			// i/64
                                    -IdentifierNode (int)			// i
                                    -ConstantNode (int)			// 64
                            -DivideNode (int)			// i%64/4
                                -ModuloNode (int)			// i%64
                                    -IdentifierNode (int)			// i
                                    -ConstantNode (int)			// 64
                                -ConstantNode (int)			// 4
                        -ShiftLeftNode (int)			// (128<<((3-i%4)*8))
                            -ConstantNode (int)			// 128
                            -MultiplyNode (int)			// ((3-i%4)*8)
                                -SubNode (int)			// (3-i%4)
                                    -ConstantNode (int)			// 3
                                    -ModuloNode (int)			// i%4
                                        -IdentifierNode (int)			// i
                                        -ConstantNode (int)			// 4
                                -ConstantNode (int)			// 8
            -StatementNode (void)			// chunks[nChunk-1][15]=length<<3;
                -AssignNode (void)			// chunks[nChunk-1][15]=length<<3
                    -SubscriptOpNode (int)			// chunks[nChunk-1][15]
                        -SubscriptOpNode (int[])			// chunks[nChunk-1]
                            -IdentifierNode (int[][])			// chunks
                            -SubNode (int)			// nChunk-1
                                -IdentifierNode (int)			// nChunk
                                -ConstantNode (int)			// 1
                        -ConstantNode (int)			// 15
                    -ShiftLeftNode (int)			// length<<3
                        -IdentifierNode (int)			// length
                        -ConstantNode (int)			// 3
            -StatementNode (void)			// chunks[nChunk-1][14]=(length>>29)&7;
                -AssignNode (void)			// chunks[nChunk-1][14]=(length>>29)&7
                    -SubscriptOpNode (int)			// chunks[nChunk-1][14]
                        -SubscriptOpNode (int[])			// chunks[nChunk-1]
                            -IdentifierNode (int[][])			// chunks
                            -SubNode (int)			// nChunk-1
                                -IdentifierNode (int)			// nChunk
                                -ConstantNode (int)			// 1
                        -ConstantNode (int)			// 14
                    -AndNode (int)			// (length>>29)&7
                        -ShiftRightNode (int)			// (length>>29)
                            -IdentifierNode (int)			// length
                            -ConstantNode (int)			// 29
                        -ConstantNode (int)			// 7
            -DeclarationNode (void)			// inth0=1732584193;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// h0=1732584193
                    -InitDeclaratorNode (void)			// h0=1732584193
                        -DeclaratorNode (void)			// h0
                        -ConstantNode (int)			// 1732584193
            -DeclarationNode (void)			// inth1=lohi(43913,61389);
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// h1=lohi(43913,61389)
                    -InitDeclaratorNode (void)			// h1=lohi(43913,61389)
                        -DeclaratorNode (void)			// h1
                        -ParenthesisOpNode (int)			// lohi(43913,61389)
                            -IdentifierNode (BaseType)			// lohi
                            -ArgumentListNode (void)			// 43913,61389
                                -ConstantNode (int)			// 43913
                                -ConstantNode (int)			// 61389
            -DeclarationNode (void)			// inth2=lohi(56574,39098);
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// h2=lohi(56574,39098)
                    -InitDeclaratorNode (void)			// h2=lohi(56574,39098)
                        -DeclaratorNode (void)			// h2
                        -ParenthesisOpNode (int)			// lohi(56574,39098)
                            -IdentifierNode (BaseType)			// lohi
                            -ArgumentListNode (void)			// 56574,39098
                                -ConstantNode (int)			// 56574
                                -ConstantNode (int)			// 39098
            -DeclarationNode (void)			// inth3=271733878;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// h3=271733878
                    -InitDeclaratorNode (void)			// h3=271733878
                        -DeclaratorNode (void)			// h3
                        -ConstantNode (int)			// 271733878
            -DeclarationNode (void)			// inth4=lohi(57840,50130);
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// h4=lohi(57840,50130)
                    -InitDeclaratorNode (void)			// h4=lohi(57840,50130)
                        -DeclaratorNode (void)			// h4
                        -ParenthesisOpNode (int)			// lohi(57840,50130)
                            -IdentifierNode (BaseType)			// lohi
                            -ArgumentListNode (void)			// 57840,50130
                                -ConstantNode (int)			// 57840
                                -ConstantNode (int)			// 50130
            -ForNode (void)			// for(i=0;i<nChunk;i++){for(j=16;j<80;j++)chunks[i][j]=rotate_left(chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]^chunks[i][j-16],1);inta=h0;intb=h1;intc=h2;intd=h3;inte=h4;for(j=0;j<80;j++){intf;intk;if(j<20){f=(b&c)|((~b)&d);k=1518500249;}elseif(j<40){f=b^c^d;k=1859775393;}elseif(j<60){f=(b&c)|(b&d)|(c&d);k=lohi(48348,36635);}else{f=b^c^d;k=lohi(49622,51810);}inttemp=add(add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j]);e=d;d=c;c=rotate_left(b,30);b=a;a=temp;}h0=add(h0,a);h1=add(h1,b);h2=add(h2,c);h3=add(h3,d);h4=add(h4,e);}
                -ForConditionNode (void)			// i=0;i<nChunk;i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<nChunk
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// nChunk
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {for(j=16;j<80;j++)chunks[i][j]=rotate_left(chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]^chunks[i][j-16],1);inta=h0;intb=h1;intc=h2;intd=h3;inte=h4;for(j=0;j<80;j++){intf;intk;if(j<20){f=(b&c)|((~b)&d);k=1518500249;}elseif(j<40){f=b^c^d;k=1859775393;}elseif(j<60){f=(b&c)|(b&d)|(c&d);k=lohi(48348,36635);}else{f=b^c^d;k=lohi(49622,51810);}inttemp=add(add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j]);e=d;d=c;c=rotate_left(b,30);b=a;a=temp;}h0=add(h0,a);h1=add(h1,b);h2=add(h2,c);h3=add(h3,d);h4=add(h4,e);}
                    -ForNode (void)			// for(j=16;j<80;j++)chunks[i][j]=rotate_left(chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]^chunks[i][j-16],1);
                        -ForConditionNode (void)			// j=16;j<80;j++
                            -AssignNode (void)			// j=16
                                -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 16
                            -LessThanNode (bool)			// j<80
                                -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 80
                            -PostfixAddNode (int)			// j++
                                -IdentifierNode (int)			// j
                        -StatementNode (void)			// chunks[i][j]=rotate_left(chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]^chunks[i][j-16],1);
                            -AssignNode (void)			// chunks[i][j]=rotate_left(chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]^chunks[i][j-16],1)
                                -SubscriptOpNode (int)			// chunks[i][j]
                                    -SubscriptOpNode (int[])			// chunks[i]
                                        -IdentifierNode (int[][])			// chunks
                                        -IdentifierNode (int)			// i
                                    -IdentifierNode (int)			// j
                                -ParenthesisOpNode (int)			// rotate_left(chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]^chunks[i][j-16],1)
                                    -IdentifierNode (BaseType)			// rotate_left
                                    -ArgumentListNode (void)			// chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]^chunks[i][j-16],1
                                        -XorNode (int)			// chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]^chunks[i][j-16]
                                            -XorNode (int)			// chunks[i][j-3]^chunks[i][j-8]^chunks[i][j-14]
                                                -XorNode (int)			// chunks[i][j-3]^chunks[i][j-8]
                                                    -SubscriptOpNode (int)			// chunks[i][j-3]
                                                        -SubscriptOpNode (int[])			// chunks[i]
                                                            -IdentifierNode (int[][])			// chunks
                                                            -IdentifierNode (int)			// i
                                                        -SubNode (int)			// j-3
                                                            -IdentifierNode (int)			// j
                                                            -ConstantNode (int)			// 3
                                                    -SubscriptOpNode (int)			// chunks[i][j-8]
                                                        -SubscriptOpNode (int[])			// chunks[i]
                                                            -IdentifierNode (int[][])			// chunks
                                                            -IdentifierNode (int)			// i
                                                        -SubNode (int)			// j-8
                                                            -IdentifierNode (int)			// j
                                                            -ConstantNode (int)			// 8
                                                -SubscriptOpNode (int)			// chunks[i][j-14]
                                                    -SubscriptOpNode (int[])			// chunks[i]
                                                        -IdentifierNode (int[][])			// chunks
                                                        -IdentifierNode (int)			// i
                                                    -SubNode (int)			// j-14
                                                        -IdentifierNode (int)			// j
                                                        -ConstantNode (int)			// 14
                                            -SubscriptOpNode (int)			// chunks[i][j-16]
                                                -SubscriptOpNode (int[])			// chunks[i]
                                                    -IdentifierNode (int[][])			// chunks
                                                    -IdentifierNode (int)			// i
                                                -SubNode (int)			// j-16
                                                    -IdentifierNode (int)			// j
                                                    -ConstantNode (int)			// 16
                                        -ConstantNode (int)			// 1
                    -DeclarationNode (void)			// inta=h0;
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// a=h0
                            -InitDeclaratorNode (void)			// a=h0
                                -DeclaratorNode (void)			// a
                                -IdentifierNode (int)			// h0
                    -DeclarationNode (void)			// intb=h1;
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// b=h1
                            -InitDeclaratorNode (void)			// b=h1
                                -DeclaratorNode (void)			// b
                                -IdentifierNode (int)			// h1
                    -DeclarationNode (void)			// intc=h2;
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// c=h2
                            -InitDeclaratorNode (void)			// c=h2
                                -DeclaratorNode (void)			// c
                                -IdentifierNode (int)			// h2
                    -DeclarationNode (void)			// intd=h3;
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// d=h3
                            -InitDeclaratorNode (void)			// d=h3
                                -DeclaratorNode (void)			// d
                                -IdentifierNode (int)			// h3
                    -DeclarationNode (void)			// inte=h4;
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorListNode (void)			// e=h4
                            -InitDeclaratorNode (void)			// e=h4
                                -DeclaratorNode (void)			// e
                                -IdentifierNode (int)			// h4
                    -ForNode (void)			// for(j=0;j<80;j++){intf;intk;if(j<20){f=(b&c)|((~b)&d);k=1518500249;}elseif(j<40){f=b^c^d;k=1859775393;}elseif(j<60){f=(b&c)|(b&d)|(c&d);k=lohi(48348,36635);}else{f=b^c^d;k=lohi(49622,51810);}inttemp=add(add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j]);e=d;d=c;c=rotate_left(b,30);b=a;a=temp;}
                        -ForConditionNode (void)			// j=0;j<80;j++
                            -AssignNode (void)			// j=0
                                -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 0
                            -LessThanNode (bool)			// j<80
                                -IdentifierNode (int)			// j
                                -ConstantNode (int)			// 80
                            -PostfixAddNode (int)			// j++
                                -IdentifierNode (int)			// j
                        -BlockNode (void)			// {intf;intk;if(j<20){f=(b&c)|((~b)&d);k=1518500249;}elseif(j<40){f=b^c^d;k=1859775393;}elseif(j<60){f=(b&c)|(b&d)|(c&d);k=lohi(48348,36635);}else{f=b^c^d;k=lohi(49622,51810);}inttemp=add(add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j]);e=d;d=c;c=rotate_left(b,30);b=a;a=temp;}
                            -DeclarationNode (void)			// intf;
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// f
                                    -InitDeclaratorNode (void)			// f
                                        -DeclaratorNode (void)			// f
                            -DeclarationNode (void)			// intk;
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// k
                                    -InitDeclaratorNode (void)			// k
                                        -DeclaratorNode (void)			// k
                            -IfNode (void)			// if(j<20){f=(b&c)|((~b)&d);k=1518500249;}elseif(j<40){f=b^c^d;k=1859775393;}elseif(j<60){f=(b&c)|(b&d)|(c&d);k=lohi(48348,36635);}else{f=b^c^d;k=lohi(49622,51810);}
                                -LessThanNode (bool)			// j<20
                                    -IdentifierNode (int)			// j
                                    -ConstantNode (int)			// 20
                                -BlockNode (void)			// {f=(b&c)|((~b)&d);k=1518500249;}
                                    -StatementNode (void)			// f=(b&c)|((~b)&d);
                                        -AssignNode (void)			// f=(b&c)|((~b)&d)
                                            -IdentifierNode (int)			// f
                                            -OrNode (int)			// (b&c)|((~b)&d)
                                                -AndNode (int)			// (b&c)
                                                    -IdentifierNode (int)			// b
                                                    -IdentifierNode (int)			// c
                                                -AndNode (int)			// ((~b)&d)
                                                    -BitwiseNotNode (int)			// (~b)
                                                        -IdentifierNode (int)			// b
                                                    -IdentifierNode (int)			// d
                                    -StatementNode (void)			// k=1518500249;
                                        -AssignNode (void)			// k=1518500249
                                            -IdentifierNode (int)			// k
                                            -ConstantNode (int)			// 1518500249
                                -IfNode (void)			// if(j<40){f=b^c^d;k=1859775393;}elseif(j<60){f=(b&c)|(b&d)|(c&d);k=lohi(48348,36635);}else{f=b^c^d;k=lohi(49622,51810);}
                                    -LessThanNode (bool)			// j<40
                                        -IdentifierNode (int)			// j
                                        -ConstantNode (int)			// 40
                                    -BlockNode (void)			// {f=b^c^d;k=1859775393;}
                                        -StatementNode (void)			// f=b^c^d;
                                            -AssignNode (void)			// f=b^c^d
                                                -IdentifierNode (int)			// f
                                                -XorNode (int)			// b^c^d
                                                    -XorNode (int)			// b^c
                                                        -IdentifierNode (int)			// b
                                                        -IdentifierNode (int)			// c
                                                    -IdentifierNode (int)			// d
                                        -StatementNode (void)			// k=1859775393;
                                            -AssignNode (void)			// k=1859775393
                                                -IdentifierNode (int)			// k
                                                -ConstantNode (int)			// 1859775393
                                    -IfNode (void)			// if(j<60){f=(b&c)|(b&d)|(c&d);k=lohi(48348,36635);}else{f=b^c^d;k=lohi(49622,51810);}
                                        -LessThanNode (bool)			// j<60
                                            -IdentifierNode (int)			// j
                                            -ConstantNode (int)			// 60
                                        -BlockNode (void)			// {f=(b&c)|(b&d)|(c&d);k=lohi(48348,36635);}
                                            -StatementNode (void)			// f=(b&c)|(b&d)|(c&d);
                                                -AssignNode (void)			// f=(b&c)|(b&d)|(c&d)
                                                    -IdentifierNode (int)			// f
                                                    -OrNode (int)			// (b&c)|(b&d)|(c&d)
                                                        -OrNode (int)			// (b&c)|(b&d)
                                                            -AndNode (int)			// (b&c)
                                                                -IdentifierNode (int)			// b
                                                                -IdentifierNode (int)			// c
                                                            -AndNode (int)			// (b&d)
                                                                -IdentifierNode (int)			// b
                                                                -IdentifierNode (int)			// d
                                                        -AndNode (int)			// (c&d)
                                                            -IdentifierNode (int)			// c
                                                            -IdentifierNode (int)			// d
                                            -StatementNode (void)			// k=lohi(48348,36635);
                                                -AssignNode (void)			// k=lohi(48348,36635)
                                                    -IdentifierNode (int)			// k
                                                    -ParenthesisOpNode (int)			// lohi(48348,36635)
                                                        -IdentifierNode (BaseType)			// lohi
                                                        -ArgumentListNode (void)			// 48348,36635
                                                            -ConstantNode (int)			// 48348
                                                            -ConstantNode (int)			// 36635
                                        -BlockNode (void)			// {f=b^c^d;k=lohi(49622,51810);}
                                            -StatementNode (void)			// f=b^c^d;
                                                -AssignNode (void)			// f=b^c^d
                                                    -IdentifierNode (int)			// f
                                                    -XorNode (int)			// b^c^d
                                                        -XorNode (int)			// b^c
                                                            -IdentifierNode (int)			// b
                                                            -IdentifierNode (int)			// c
                                                        -IdentifierNode (int)			// d
                                            -StatementNode (void)			// k=lohi(49622,51810);
                                                -AssignNode (void)			// k=lohi(49622,51810)
                                                    -IdentifierNode (int)			// k
                                                    -ParenthesisOpNode (int)			// lohi(49622,51810)
                                                        -IdentifierNode (BaseType)			// lohi
                                                        -ArgumentListNode (void)			// 49622,51810
                                                            -ConstantNode (int)			// 49622
                                                            -ConstantNode (int)			// 51810
                            -DeclarationNode (void)			// inttemp=add(add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j]);
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// temp=add(add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j])
                                    -InitDeclaratorNode (void)			// temp=add(add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j])
                                        -DeclaratorNode (void)			// temp
                                        -ParenthesisOpNode (int)			// add(add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j])
                                            -IdentifierNode (BaseType)			// add
                                            -ArgumentListNode (void)			// add(add(rotate_left(a,5),e),add(f,k)),chunks[i][j]
                                                -ParenthesisOpNode (int)			// add(add(rotate_left(a,5),e),add(f,k))
                                                    -IdentifierNode (BaseType)			// add
                                                    -ArgumentListNode (void)			// add(rotate_left(a,5),e),add(f,k)
                                                        -ParenthesisOpNode (int)			// add(rotate_left(a,5),e)
                                                            -IdentifierNode (BaseType)			// add
                                                            -ArgumentListNode (void)			// rotate_left(a,5),e
                                                                -ParenthesisOpNode (int)			// rotate_left(a,5)
                                                                    -IdentifierNode (BaseType)			// rotate_left
                                                                    -ArgumentListNode (void)			// a,5
                                                                        -IdentifierNode (int)			// a
                                                                        -ConstantNode (int)			// 5
                                                                -IdentifierNode (int)			// e
                                                        -ParenthesisOpNode (int)			// add(f,k)
                                                            -IdentifierNode (BaseType)			// add
                                                            -ArgumentListNode (void)			// f,k
                                                                -IdentifierNode (int)			// f
                                                                -IdentifierNode (int)			// k
                                                -SubscriptOpNode (int)			// chunks[i][j]
                                                    -SubscriptOpNode (int[])			// chunks[i]
                                                        -IdentifierNode (int[][])			// chunks
                                                        -IdentifierNode (int)			// i
                                                    -IdentifierNode (int)			// j
                            -StatementNode (void)			// e=d;
                                -AssignNode (void)			// e=d
                                    -IdentifierNode (int)			// e
                                    -IdentifierNode (int)			// d
                            -StatementNode (void)			// d=c;
                                -AssignNode (void)			// d=c
                                    -IdentifierNode (int)			// d
                                    -IdentifierNode (int)			// c
                            -StatementNode (void)			// c=rotate_left(b,30);
                                -AssignNode (void)			// c=rotate_left(b,30)
                                    -IdentifierNode (int)			// c
                                    -ParenthesisOpNode (int)			// rotate_left(b,30)
                                        -IdentifierNode (BaseType)			// rotate_left
                                        -ArgumentListNode (void)			// b,30
                                            -IdentifierNode (int)			// b
                                            -ConstantNode (int)			// 30
                            -StatementNode (void)			// b=a;
                                -AssignNode (void)			// b=a
                                    -IdentifierNode (int)			// b
                                    -IdentifierNode (int)			// a
                            -StatementNode (void)			// a=temp;
                                -AssignNode (void)			// a=temp
                                    -IdentifierNode (int)			// a
                                    -IdentifierNode (int)			// temp
                    -StatementNode (void)			// h0=add(h0,a);
                        -AssignNode (void)			// h0=add(h0,a)
                            -IdentifierNode (int)			// h0
                            -ParenthesisOpNode (int)			// add(h0,a)
                                -IdentifierNode (BaseType)			// add
                                -ArgumentListNode (void)			// h0,a
                                    -IdentifierNode (int)			// h0
                                    -IdentifierNode (int)			// a
                    -StatementNode (void)			// h1=add(h1,b);
                        -AssignNode (void)			// h1=add(h1,b)
                            -IdentifierNode (int)			// h1
                            -ParenthesisOpNode (int)			// add(h1,b)
                                -IdentifierNode (BaseType)			// add
                                -ArgumentListNode (void)			// h1,b
                                    -IdentifierNode (int)			// h1
                                    -IdentifierNode (int)			// b
                    -StatementNode (void)			// h2=add(h2,c);
                        -AssignNode (void)			// h2=add(h2,c)
                            -IdentifierNode (int)			// h2
                            -ParenthesisOpNode (int)			// add(h2,c)
                                -IdentifierNode (BaseType)			// add
                                -ArgumentListNode (void)			// h2,c
                                    -IdentifierNode (int)			// h2
                                    -IdentifierNode (int)			// c
                    -StatementNode (void)			// h3=add(h3,d);
                        -AssignNode (void)			// h3=add(h3,d)
                            -IdentifierNode (int)			// h3
                            -ParenthesisOpNode (int)			// add(h3,d)
                                -IdentifierNode (BaseType)			// add
                                -ArgumentListNode (void)			// h3,d
                                    -IdentifierNode (int)			// h3
                                    -IdentifierNode (int)			// d
                    -StatementNode (void)			// h4=add(h4,e);
                        -AssignNode (void)			// h4=add(h4,e)
                            -IdentifierNode (int)			// h4
                            -ParenthesisOpNode (int)			// add(h4,e)
                                -IdentifierNode (BaseType)			// add
                                -ArgumentListNode (void)			// h4,e
                                    -IdentifierNode (int)			// h4
                                    -IdentifierNode (int)			// e
            -StatementNode (void)			// outputBuffer[0]=h0;
                -AssignNode (void)			// outputBuffer[0]=h0
                    -SubscriptOpNode (int)			// outputBuffer[0]
                        -IdentifierNode (int[])			// outputBuffer
                        -ConstantNode (int)			// 0
                    -IdentifierNode (int)			// h0
            -StatementNode (void)			// outputBuffer[1]=h1;
                -AssignNode (void)			// outputBuffer[1]=h1
                    -SubscriptOpNode (int)			// outputBuffer[1]
                        -IdentifierNode (int[])			// outputBuffer
                        -ConstantNode (int)			// 1
                    -IdentifierNode (int)			// h1
            -StatementNode (void)			// outputBuffer[2]=h2;
                -AssignNode (void)			// outputBuffer[2]=h2
                    -SubscriptOpNode (int)			// outputBuffer[2]
                        -IdentifierNode (int[])			// outputBuffer
                        -ConstantNode (int)			// 2
                    -IdentifierNode (int)			// h2
            -StatementNode (void)			// outputBuffer[3]=h3;
                -AssignNode (void)			// outputBuffer[3]=h3
                    -SubscriptOpNode (int)			// outputBuffer[3]
                        -IdentifierNode (int[])			// outputBuffer
                        -ConstantNode (int)			// 3
                    -IdentifierNode (int)			// h3
            -StatementNode (void)			// outputBuffer[4]=h4;
                -AssignNode (void)			// outputBuffer[4]=h4
                    -SubscriptOpNode (int)			// outputBuffer[4]
                        -IdentifierNode (int[])			// outputBuffer
                        -ConstantNode (int)			// 4
                    -IdentifierNode (int)			// h4
            -ReturnNode (void)			// returnoutputBuffer;
                -IdentifierNode (int[])			// outputBuffer
    -FuncDefinitionNode (void)			// voidcomputeSHA1(stringinput){inti;for(i=0;i<input.length();i++)inputBuffer[i]=input.ord(i);int[]result=sha1(inputBuffer,input.length());for(i=0;i<result.size();i++)print(toStringHex(result[i]));println("");}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// computeSHA1(stringinput)
            -DeclaratorNode (void)			// computeSHA1
            -ArgumentTypeListNode (void)			// stringinput
                -ArgumentDeclarationNode (void)			// stringinput
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// input
        -BlockNode (void)			// {inti;for(i=0;i<input.length();i++)inputBuffer[i]=input.ord(i);int[]result=sha1(inputBuffer,input.length());for(i=0;i<result.size();i++)print(toStringHex(result[i]));println("");}
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=0;i<input.length();i++)inputBuffer[i]=input.ord(i);
                -ForConditionNode (void)			// i=0;i<input.length();i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<input.length()
                        -IdentifierNode (int)			// i
                        -ParenthesisOpNode (int)			// input.length()
                            -DotOpNode (BaseType)			// input.length
                                -IdentifierNode (string)			// input
                            -ArgumentListNode (void)
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// inputBuffer[i]=input.ord(i);
                    -AssignNode (void)			// inputBuffer[i]=input.ord(i)
                        -SubscriptOpNode (int)			// inputBuffer[i]
                            -IdentifierNode (int[])			// inputBuffer
                            -IdentifierNode (int)			// i
                        -ParenthesisOpNode (int)			// input.ord(i)
                            -DotOpNode (BaseType)			// input.ord
                                -IdentifierNode (string)			// input
                            -ArgumentListNode (void)			// i
                                -IdentifierNode (int)			// i
            -DeclarationNode (void)			// int[]result=sha1(inputBuffer,input.length());
                -TypeNode (void)			// int[]
                    -TypeAttributeNode (void)			// int[]
                        -EmptyExpressionNode (void)
                -DeclaratorListNode (void)			// result=sha1(inputBuffer,input.length())
                    -InitDeclaratorNode (void)			// result=sha1(inputBuffer,input.length())
                        -DeclaratorNode (void)			// result
                        -ParenthesisOpNode (int[])			// sha1(inputBuffer,input.length())
                            -IdentifierNode (BaseType)			// sha1
                            -ArgumentListNode (void)			// inputBuffer,input.length()
                                -IdentifierNode (int[])			// inputBuffer
                                -ParenthesisOpNode (int)			// input.length()
                                    -DotOpNode (BaseType)			// input.length
                                        -IdentifierNode (string)			// input
                                    -ArgumentListNode (void)
            -ForNode (void)			// for(i=0;i<result.size();i++)print(toStringHex(result[i]));
                -ForConditionNode (void)			// i=0;i<result.size();i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<result.size()
                        -IdentifierNode (int)			// i
                        -ParenthesisOpNode (int)			// result.size()
                            -DotOpNode (BaseType)			// result.size
                                -IdentifierNode (int[])			// result
                            -ArgumentListNode (void)
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// print(toStringHex(result[i]));
                    -ParenthesisOpNode (void)			// print(toStringHex(result[i]))
                        -IdentifierNode (BaseType)			// print
                        -ArgumentListNode (void)			// toStringHex(result[i])
                            -ParenthesisOpNode (string)			// toStringHex(result[i])
                                -IdentifierNode (BaseType)			// toStringHex
                                -ArgumentListNode (void)			// result[i]
                                    -SubscriptOpNode (int)			// result[i]
                                        -IdentifierNode (int[])			// result
                                        -IdentifierNode (int)			// i
            -StatementNode (void)			// println("");
                -ParenthesisOpNode (void)			// println("")
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// ""
                        -StringLiteralNode (string)			// ""
    -FuncDefinitionNode (void)			// intnextLetter(intnow){if(now==122)return-1;if(now==90)return97;if(now==57)return65;returnnow+1;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// nextLetter(intnow)
            -DeclaratorNode (void)			// nextLetter
            -ArgumentTypeListNode (void)			// intnow
                -ArgumentDeclarationNode (void)			// intnow
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// now
        -BlockNode (void)			// {if(now==122)return-1;if(now==90)return97;if(now==57)return65;returnnow+1;}
            -IfNode (void)			// if(now==122)return-1;
                -EqualNode (bool)			// now==122
                    -IdentifierNode (int)			// now
                    -ConstantNode (int)			// 122
                -ReturnNode (void)			// return-1;
                    -UnaryNegativeNode (int)			// -1
                        -ConstantNode (int)			// 1
            -IfNode (void)			// if(now==90)return97;
                -EqualNode (bool)			// now==90
                    -IdentifierNode (int)			// now
                    -ConstantNode (int)			// 90
                -ReturnNode (void)			// return97;
                    -ConstantNode (int)			// 97
            -IfNode (void)			// if(now==57)return65;
                -EqualNode (bool)			// now==57
                    -IdentifierNode (int)			// now
                    -ConstantNode (int)			// 57
                -ReturnNode (void)			// return65;
                    -ConstantNode (int)			// 65
            -ReturnNode (void)			// returnnow+1;
                -AddNode (int)			// now+1
                    -IdentifierNode (int)			// now
                    -ConstantNode (int)			// 1
    -FuncDefinitionNode (void)			// boolnextText(int[]now,intlength){inti;for(i=length-1;i>=0;i--){now[i]=nextLetter(now[i]);if(now[i]==-1)now[i]=48;elsereturntrue;}returnfalse;}
        -TypeNode (void)			// bool
            -TypeAttributeNode (void)			// bool
        -FuncDeclaratorNode (void)			// nextText(int[]now,intlength)
            -DeclaratorNode (void)			// nextText
            -ArgumentTypeListNode (void)			// int[]now,intlength
                -ArgumentDeclarationNode (void)			// int[]now
                    -TypeNode (void)			// int[]
                        -TypeAttributeNode (void)			// int[]
                            -EmptyExpressionNode (void)
                    -DeclaratorNode (void)			// now
                -ArgumentDeclarationNode (void)			// intlength
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// length
        -BlockNode (void)			// {inti;for(i=length-1;i>=0;i--){now[i]=nextLetter(now[i]);if(now[i]==-1)now[i]=48;elsereturntrue;}returnfalse;}
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=length-1;i>=0;i--){now[i]=nextLetter(now[i]);if(now[i]==-1)now[i]=48;elsereturntrue;}
                -ForConditionNode (void)			// i=length-1;i>=0;i--
                    -AssignNode (void)			// i=length-1
                        -IdentifierNode (int)			// i
                        -SubNode (int)			// length-1
                            -IdentifierNode (int)			// length
                            -ConstantNode (int)			// 1
                    -GreaterOrEqualThanNode (bool)			// i>=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -PostfixSubNode (int)			// i--
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {now[i]=nextLetter(now[i]);if(now[i]==-1)now[i]=48;elsereturntrue;}
                    -StatementNode (void)			// now[i]=nextLetter(now[i]);
                        -AssignNode (void)			// now[i]=nextLetter(now[i])
                            -SubscriptOpNode (int)			// now[i]
                                -IdentifierNode (int[])			// now
                                -IdentifierNode (int)			// i
                            -ParenthesisOpNode (int)			// nextLetter(now[i])
                                -IdentifierNode (BaseType)			// nextLetter
                                -ArgumentListNode (void)			// now[i]
                                    -SubscriptOpNode (int)			// now[i]
                                        -IdentifierNode (int[])			// now
                                        -IdentifierNode (int)			// i
                    -IfNode (void)			// if(now[i]==-1)now[i]=48;elsereturntrue;
                        -EqualNode (bool)			// now[i]==-1
                            -SubscriptOpNode (int)			// now[i]
                                -IdentifierNode (int[])			// now
                                -IdentifierNode (int)			// i
                            -UnaryNegativeNode (int)			// -1
                                -ConstantNode (int)			// 1
                        -StatementNode (void)			// now[i]=48;
                            -AssignNode (void)			// now[i]=48
                                -SubscriptOpNode (int)			// now[i]
                                    -IdentifierNode (int[])			// now
                                    -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 48
                        -ReturnNode (void)			// returntrue;
                            -ConstantNode (bool)			// true
            -ReturnNode (void)			// returnfalse;
                -ConstantNode (bool)			// false
    -FuncDefinitionNode (void)			// boolarray_equal(int[]a,int[]b){if(a.size()!=b.size())returnfalse;inti;for(i=0;i<a.size();i++)if(a[i]!=b[i])returnfalse;returntrue;}
        -TypeNode (void)			// bool
            -TypeAttributeNode (void)			// bool
        -FuncDeclaratorNode (void)			// array_equal(int[]a,int[]b)
            -DeclaratorNode (void)			// array_equal
            -ArgumentTypeListNode (void)			// int[]a,int[]b
                -ArgumentDeclarationNode (void)			// int[]a
                    -TypeNode (void)			// int[]
                        -TypeAttributeNode (void)			// int[]
                            -EmptyExpressionNode (void)
                    -DeclaratorNode (void)			// a
                -ArgumentDeclarationNode (void)			// int[]b
                    -TypeNode (void)			// int[]
                        -TypeAttributeNode (void)			// int[]
                            -EmptyExpressionNode (void)
                    -DeclaratorNode (void)			// b
        -BlockNode (void)			// {if(a.size()!=b.size())returnfalse;inti;for(i=0;i<a.size();i++)if(a[i]!=b[i])returnfalse;returntrue;}
            -IfNode (void)			// if(a.size()!=b.size())returnfalse;
                -InequalNode (bool)			// a.size()!=b.size()
                    -ParenthesisOpNode (int)			// a.size()
                        -DotOpNode (BaseType)			// a.size
                            -IdentifierNode (int[])			// a
                        -ArgumentListNode (void)
                    -ParenthesisOpNode (int)			// b.size()
                        -DotOpNode (BaseType)			// b.size
                            -IdentifierNode (int[])			// b
                        -ArgumentListNode (void)
                -ReturnNode (void)			// returnfalse;
                    -ConstantNode (bool)			// false
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=0;i<a.size();i++)if(a[i]!=b[i])returnfalse;
                -ForConditionNode (void)			// i=0;i<a.size();i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<a.size()
                        -IdentifierNode (int)			// i
                        -ParenthesisOpNode (int)			// a.size()
                            -DotOpNode (BaseType)			// a.size
                                -IdentifierNode (int[])			// a
                            -ArgumentListNode (void)
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -IfNode (void)			// if(a[i]!=b[i])returnfalse;
                    -InequalNode (bool)			// a[i]!=b[i]
                        -SubscriptOpNode (int)			// a[i]
                            -IdentifierNode (int[])			// a
                            -IdentifierNode (int)			// i
                        -SubscriptOpNode (int)			// b[i]
                            -IdentifierNode (int[])			// b
                            -IdentifierNode (int)			// i
                    -ReturnNode (void)			// returnfalse;
                        -ConstantNode (bool)			// false
            -ReturnNode (void)			// returntrue;
                -ConstantNode (bool)			// true
    -FuncDefinitionNode (void)			// voidcrackSHA1(stringinput){int[]target=newint[5];if(input.length()!=40){println("Invalid input");return;}inti;for(i=0;i<5;i++)target[i]=0;for(i=0;i<40;i=i+4)target[i/8]=target[i/8]|(hex2int(input.substring(i,i+3))<<(1-(i/4)%2)*16);intMAXDIGIT=4;intdigit;for(digit=1;digit<=MAXDIGIT;digit++){for(i=0;i<digit;i++)inputBuffer[i]=48;while(true){int[]out=sha1(inputBuffer,digit);if(array_equal(out,target)){for(i=0;i<digit;i++)print(int2chr(inputBuffer[i]));println("");return;}if(!nextText(inputBuffer,digit))break;}}println("Not Found!");}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// crackSHA1(stringinput)
            -DeclaratorNode (void)			// crackSHA1
            -ArgumentTypeListNode (void)			// stringinput
                -ArgumentDeclarationNode (void)			// stringinput
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// input
        -BlockNode (void)			// {int[]target=newint[5];if(input.length()!=40){println("Invalid input");return;}inti;for(i=0;i<5;i++)target[i]=0;for(i=0;i<40;i=i+4)target[i/8]=target[i/8]|(hex2int(input.substring(i,i+3))<<(1-(i/4)%2)*16);intMAXDIGIT=4;intdigit;for(digit=1;digit<=MAXDIGIT;digit++){for(i=0;i<digit;i++)inputBuffer[i]=48;while(true){int[]out=sha1(inputBuffer,digit);if(array_equal(out,target)){for(i=0;i<digit;i++)print(int2chr(inputBuffer[i]));println("");return;}if(!nextText(inputBuffer,digit))break;}}println("Not Found!");}
            -DeclarationNode (void)			// int[]target=newint[5];
                -TypeNode (void)			// int[]
                    -TypeAttributeNode (void)			// int[]
                        -EmptyExpressionNode (void)
                -DeclaratorListNode (void)			// target=newint[5]
                    -InitDeclaratorNode (void)			// target=newint[5]
                        -DeclaratorNode (void)			// target
                        -NewNode (int[])			// newint[5]
                            -TypeNode (void)			// int[5]
                                -TypeAttributeNode (void)			// int[5]
                                    -ConstantNode (int)			// 5
                            -ArgumentTypeListNode (void)
            -IfNode (void)			// if(input.length()!=40){println("Invalid input");return;}
                -InequalNode (bool)			// input.length()!=40
                    -ParenthesisOpNode (int)			// input.length()
                        -DotOpNode (BaseType)			// input.length
                            -IdentifierNode (string)			// input
                        -ArgumentListNode (void)
                    -ConstantNode (int)			// 40
                -BlockNode (void)			// {println("Invalid input");return;}
                    -StatementNode (void)			// println("Invalid input");
                        -ParenthesisOpNode (void)			// println("Invalid input")
                            -IdentifierNode (BaseType)			// println
                            -ArgumentListNode (void)			// "Invalid input"
                                -StringLiteralNode (string)			// "Invalid input"
                    -ReturnNode (void)			// return;
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=0;i<5;i++)target[i]=0;
                -ForConditionNode (void)			// i=0;i<5;i++
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<5
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 5
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// target[i]=0;
                    -AssignNode (void)			// target[i]=0
                        -SubscriptOpNode (int)			// target[i]
                            -IdentifierNode (int[])			// target
                            -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
            -ForNode (void)			// for(i=0;i<40;i=i+4)target[i/8]=target[i/8]|(hex2int(input.substring(i,i+3))<<(1-(i/4)%2)*16);
                -ForConditionNode (void)			// i=0;i<40;i=i+4
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<40
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 40
                    -AssignNode (void)			// i=i+4
                        -IdentifierNode (int)			// i
                        -AddNode (int)			// i+4
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 4
                -StatementNode (void)			// target[i/8]=target[i/8]|(hex2int(input.substring(i,i+3))<<(1-(i/4)%2)*16);
                    -AssignNode (void)			// target[i/8]=target[i/8]|(hex2int(input.substring(i,i+3))<<(1-(i/4)%2)*16)
                        -SubscriptOpNode (int)			// target[i/8]
                            -IdentifierNode (int[])			// target
                            -DivideNode (int)			// i/8
                                -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 8
                        -OrNode (int)			// target[i/8]|(hex2int(input.substring(i,i+3))<<(1-(i/4)%2)*16)
                            -SubscriptOpNode (int)			// target[i/8]
                                -IdentifierNode (int[])			// target
                                -DivideNode (int)			// i/8
                                    -IdentifierNode (int)			// i
                                    -ConstantNode (int)			// 8
                            -ShiftLeftNode (int)			// (hex2int(input.substring(i,i+3))<<(1-(i/4)%2)*16)
                                -ParenthesisOpNode (int)			// hex2int(input.substring(i,i+3))
                                    -IdentifierNode (BaseType)			// hex2int
                                    -ArgumentListNode (void)			// input.substring(i,i+3)
                                        -ParenthesisOpNode (string)			// input.substring(i,i+3)
                                            -DotOpNode (BaseType)			// input.substring
                                                -IdentifierNode (string)			// input
                                            -ArgumentListNode (void)			// i,i+3
                                                -IdentifierNode (int)			// i
                                                -AddNode (int)			// i+3
                                                    -IdentifierNode (int)			// i
                                                    -ConstantNode (int)			// 3
                                -MultiplyNode (int)			// (1-(i/4)%2)*16
                                    -SubNode (int)			// (1-(i/4)%2)
                                        -ConstantNode (int)			// 1
                                        -ModuloNode (int)			// (i/4)%2
                                            -DivideNode (int)			// (i/4)
                                                -IdentifierNode (int)			// i
                                                -ConstantNode (int)			// 4
                                            -ConstantNode (int)			// 2
                                    -ConstantNode (int)			// 16
            -DeclarationNode (void)			// intMAXDIGIT=4;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// MAXDIGIT=4
                    -InitDeclaratorNode (void)			// MAXDIGIT=4
                        -DeclaratorNode (void)			// MAXDIGIT
                        -ConstantNode (int)			// 4
            -DeclarationNode (void)			// intdigit;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// digit
                    -InitDeclaratorNode (void)			// digit
                        -DeclaratorNode (void)			// digit
            -ForNode (void)			// for(digit=1;digit<=MAXDIGIT;digit++){for(i=0;i<digit;i++)inputBuffer[i]=48;while(true){int[]out=sha1(inputBuffer,digit);if(array_equal(out,target)){for(i=0;i<digit;i++)print(int2chr(inputBuffer[i]));println("");return;}if(!nextText(inputBuffer,digit))break;}}
                -ForConditionNode (void)			// digit=1;digit<=MAXDIGIT;digit++
                    -AssignNode (void)			// digit=1
                        -IdentifierNode (int)			// digit
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// digit<=MAXDIGIT
                        -IdentifierNode (int)			// digit
                        -IdentifierNode (int)			// MAXDIGIT
                    -PostfixAddNode (int)			// digit++
                        -IdentifierNode (int)			// digit
                -BlockNode (void)			// {for(i=0;i<digit;i++)inputBuffer[i]=48;while(true){int[]out=sha1(inputBuffer,digit);if(array_equal(out,target)){for(i=0;i<digit;i++)print(int2chr(inputBuffer[i]));println("");return;}if(!nextText(inputBuffer,digit))break;}}
                    -ForNode (void)			// for(i=0;i<digit;i++)inputBuffer[i]=48;
                        -ForConditionNode (void)			// i=0;i<digit;i++
                            -AssignNode (void)			// i=0
                                -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 0
                            -LessThanNode (bool)			// i<digit
                                -IdentifierNode (int)			// i
                                -IdentifierNode (int)			// digit
                            -PostfixAddNode (int)			// i++
                                -IdentifierNode (int)			// i
                        -StatementNode (void)			// inputBuffer[i]=48;
                            -AssignNode (void)			// inputBuffer[i]=48
                                -SubscriptOpNode (int)			// inputBuffer[i]
                                    -IdentifierNode (int[])			// inputBuffer
                                    -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 48
                    -WhileNode (void)			// while(true){int[]out=sha1(inputBuffer,digit);if(array_equal(out,target)){for(i=0;i<digit;i++)print(int2chr(inputBuffer[i]));println("");return;}if(!nextText(inputBuffer,digit))break;}
                        -ConstantNode (bool)			// true
                        -BlockNode (void)			// {int[]out=sha1(inputBuffer,digit);if(array_equal(out,target)){for(i=0;i<digit;i++)print(int2chr(inputBuffer[i]));println("");return;}if(!nextText(inputBuffer,digit))break;}
                            -DeclarationNode (void)			// int[]out=sha1(inputBuffer,digit);
                                -TypeNode (void)			// int[]
                                    -TypeAttributeNode (void)			// int[]
                                        -EmptyExpressionNode (void)
                                -DeclaratorListNode (void)			// out=sha1(inputBuffer,digit)
                                    -InitDeclaratorNode (void)			// out=sha1(inputBuffer,digit)
                                        -DeclaratorNode (void)			// out
                                        -ParenthesisOpNode (int[])			// sha1(inputBuffer,digit)
                                            -IdentifierNode (BaseType)			// sha1
                                            -ArgumentListNode (void)			// inputBuffer,digit
                                                -IdentifierNode (int[])			// inputBuffer
                                                -IdentifierNode (int)			// digit
                            -IfNode (void)			// if(array_equal(out,target)){for(i=0;i<digit;i++)print(int2chr(inputBuffer[i]));println("");return;}
                                -ParenthesisOpNode (bool)			// array_equal(out,target)
                                    -IdentifierNode (BaseType)			// array_equal
                                    -ArgumentListNode (void)			// out,target
                                        -IdentifierNode (int[])			// out
                                        -IdentifierNode (int[])			// target
                                -BlockNode (void)			// {for(i=0;i<digit;i++)print(int2chr(inputBuffer[i]));println("");return;}
                                    -ForNode (void)			// for(i=0;i<digit;i++)print(int2chr(inputBuffer[i]));
                                        -ForConditionNode (void)			// i=0;i<digit;i++
                                            -AssignNode (void)			// i=0
                                                -IdentifierNode (int)			// i
                                                -ConstantNode (int)			// 0
                                            -LessThanNode (bool)			// i<digit
                                                -IdentifierNode (int)			// i
                                                -IdentifierNode (int)			// digit
                                            -PostfixAddNode (int)			// i++
                                                -IdentifierNode (int)			// i
                                        -StatementNode (void)			// print(int2chr(inputBuffer[i]));
                                            -ParenthesisOpNode (void)			// print(int2chr(inputBuffer[i]))
                                                -IdentifierNode (BaseType)			// print
                                                -ArgumentListNode (void)			// int2chr(inputBuffer[i])
                                                    -ParenthesisOpNode (string)			// int2chr(inputBuffer[i])
                                                        -IdentifierNode (BaseType)			// int2chr
                                                        -ArgumentListNode (void)			// inputBuffer[i]
                                                            -SubscriptOpNode (int)			// inputBuffer[i]
                                                                -IdentifierNode (int[])			// inputBuffer
                                                                -IdentifierNode (int)			// i
                                    -StatementNode (void)			// println("");
                                        -ParenthesisOpNode (void)			// println("")
                                            -IdentifierNode (BaseType)			// println
                                            -ArgumentListNode (void)			// ""
                                                -StringLiteralNode (string)			// ""
                                    -ReturnNode (void)			// return;
                            -IfNode (void)			// if(!nextText(inputBuffer,digit))break;
                                -LogicalNotNode (bool)			// !nextText(inputBuffer,digit)
                                    -ParenthesisOpNode (bool)			// nextText(inputBuffer,digit)
                                        -IdentifierNode (BaseType)			// nextText
                                        -ArgumentListNode (void)			// inputBuffer,digit
                                            -IdentifierNode (int[])			// inputBuffer
                                            -IdentifierNode (int)			// digit
                                -BreakNode (void)			// break;
            -StatementNode (void)			// println("Not Found!");
                -ParenthesisOpNode (void)			// println("Not Found!")
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// "Not Found!"
                        -StringLiteralNode (string)			// "Not Found!"
    -FuncDefinitionNode (void)			// intmain(){println(toString(lohi(48348,36635)));intop;stringinput;while(true){op=getInt();if(op==0)break;if(op==1){input=getString();computeSHA1(input);}elseif(op==2){input=getString();crackSHA1(input);}}return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {println(toString(lohi(48348,36635)));intop;stringinput;while(true){op=getInt();if(op==0)break;if(op==1){input=getString();computeSHA1(input);}elseif(op==2){input=getString();crackSHA1(input);}}return0;}
            -StatementNode (void)			// println(toString(lohi(48348,36635)));
                -ParenthesisOpNode (void)			// println(toString(lohi(48348,36635)))
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// toString(lohi(48348,36635))
                        -ParenthesisOpNode (string)			// toString(lohi(48348,36635))
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// lohi(48348,36635)
                                -ParenthesisOpNode (int)			// lohi(48348,36635)
                                    -IdentifierNode (BaseType)			// lohi
                                    -ArgumentListNode (void)			// 48348,36635
                                        -ConstantNode (int)			// 48348
                                        -ConstantNode (int)			// 36635
            -DeclarationNode (void)			// intop;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// op
                    -InitDeclaratorNode (void)			// op
                        -DeclaratorNode (void)			// op
            -DeclarationNode (void)			// stringinput;
                -TypeNode (void)			// string
                    -TypeAttributeNode (void)			// string
                -DeclaratorListNode (void)			// input
                    -InitDeclaratorNode (void)			// input
                        -DeclaratorNode (void)			// input
            -WhileNode (void)			// while(true){op=getInt();if(op==0)break;if(op==1){input=getString();computeSHA1(input);}elseif(op==2){input=getString();crackSHA1(input);}}
                -ConstantNode (bool)			// true
                -BlockNode (void)			// {op=getInt();if(op==0)break;if(op==1){input=getString();computeSHA1(input);}elseif(op==2){input=getString();crackSHA1(input);}}
                    -StatementNode (void)			// op=getInt();
                        -AssignNode (void)			// op=getInt()
                            -IdentifierNode (int)			// op
                            -ParenthesisOpNode (int)			// getInt()
                                -IdentifierNode (BaseType)			// getInt
                                -ArgumentListNode (void)
                    -IfNode (void)			// if(op==0)break;
                        -EqualNode (bool)			// op==0
                            -IdentifierNode (int)			// op
                            -ConstantNode (int)			// 0
                        -BreakNode (void)			// break;
                    -IfNode (void)			// if(op==1){input=getString();computeSHA1(input);}elseif(op==2){input=getString();crackSHA1(input);}
                        -EqualNode (bool)			// op==1
                            -IdentifierNode (int)			// op
                            -ConstantNode (int)			// 1
                        -BlockNode (void)			// {input=getString();computeSHA1(input);}
                            -StatementNode (void)			// input=getString();
                                -AssignNode (void)			// input=getString()
                                    -IdentifierNode (string)			// input
                                    -ParenthesisOpNode (string)			// getString()
                                        -IdentifierNode (BaseType)			// getString
                                        -ArgumentListNode (void)
                            -StatementNode (void)			// computeSHA1(input);
                                -ParenthesisOpNode (void)			// computeSHA1(input)
                                    -IdentifierNode (BaseType)			// computeSHA1
                                    -ArgumentListNode (void)			// input
                                        -IdentifierNode (string)			// input
                        -IfNode (void)			// if(op==2){input=getString();crackSHA1(input);}
                            -EqualNode (bool)			// op==2
                                -IdentifierNode (int)			// op
                                -ConstantNode (int)			// 2
                            -BlockNode (void)			// {input=getString();crackSHA1(input);}
                                -StatementNode (void)			// input=getString();
                                    -AssignNode (void)			// input=getString()
                                        -IdentifierNode (string)			// input
                                        -ParenthesisOpNode (string)			// getString()
                                            -IdentifierNode (BaseType)			// getString
                                            -ArgumentListNode (void)
                                -StatementNode (void)			// crackSHA1(input);
                                    -ParenthesisOpNode (void)			// crackSHA1(input)
                                        -IdentifierNode (BaseType)			// crackSHA1
                                        -ArgumentListNode (void)			// input
                                            -IdentifierNode (string)			// input
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
