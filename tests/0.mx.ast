-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprint(stringstr){}voidprintln(stringstr){}stringgetString(){return"abracadabra";}intgetInt(){return0;}stringtoString(inti){return"abracadabra";}classvector{int[]data;voidinit(int[]vec){if(vec==null)return;data=newint[vec.size()];inti;for(i=0;i<vec.size();++i){data[i]=vec[i];}}intgetDim(){if(data==null)return0;returndata.size();}intdot(vectorrhs){inti=0;intresult=0;while(i<getDim()){result=data[i]*rhs.data[i];++i;}returnresult;}vectorscalarInPlaceMultiply(intc){if(data==null)returnnull;inti;for(i=0;i<getDim();++i){this.data[i]=c*this.data[i];}returnthis;}vectoradd(vectorrhs){if(getDim()!=rhs.getDim()||getDim()==0)returnnull;vectortemp=newvector;inti;for(i=0;i<getDim();++i){temp.data[i]=data[i]+rhs.data[i];}returntemp;}boolset(intidx,intvalue){if(getDim()<idx)returnfalse;data[idx]=value;returntrue;}stringtoString(){stringtemp="( ";if(getDim()>0){temp=temp+toString();}inti;for(i=1;i<getDim();++i){temp=temp+", "+toString();}temp=temp+" )";returntemp;}boolcopy(vectorrhs){if(rhs==null)returnfalse;if(rhs.getDim()==0){data=null;}else{data=newint[rhs.getDim()];inti;for(i=0;i<getDim();++i){data[i]=rhs.data[i];}}returntrue;}}intmain(){vectorx=newvector;int[]a=newint[10];inti;for(i=0;i<10;++i){a[i]=9-i;}x.init(a);print("vector x: ");println(x.toString());vectory=newvector;y.copy(x);if(y.set(3,817)){println("excited!");}print("vector y: ");println(y.toString());print("x + y: ");println((x.add(y)).toString());print("x * y: ");println(toString(x.dot(y)));print("(1 << 3) * y: ");println(x.scalarInPlaceMultiply(1<<3).toString());}<EOF>
    -ClassDefinitionNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}
        -FuncDefinitionNode (void)			// intlength(){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// length()
                -DeclaratorNode (void)			// length
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
        -FuncDefinitionNode (void)			// stringsubstring(intleft,intright){return"";}
            -TypeNode (void)			// string
                -TypeAttributeNode (void)			// string
            -FuncDeclaratorNode (void)			// substring(intleft,intright)
                -DeclaratorNode (void)			// substring
                -ArgumentTypeListNode (void)			// intleft,intright
                    -ArgumentDeclarationNode (void)			// intleft
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// left
                    -ArgumentDeclarationNode (void)			// intright
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// right
            -BlockNode (void)			// {return"";}
                -ReturnNode (void)			// return"";
                    -StringLiteralNode (string)			// ""
        -FuncDefinitionNode (void)			// intparseInt(){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// parseInt()
                -DeclaratorNode (void)			// parseInt
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
        -FuncDefinitionNode (void)			// intord(intpos){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// ord(intpos)
                -DeclaratorNode (void)			// ord
                -ArgumentTypeListNode (void)			// intpos
                    -ArgumentDeclarationNode (void)			// intpos
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// pos
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
    -ClassDefinitionNode (void)			// classbuilt_in_array{intsize(){return0;}}
        -FuncDefinitionNode (void)			// intsize(){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// size()
                -DeclaratorNode (void)			// size
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// voidprint(stringstr){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// voidprintln(stringstr){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"abracadabra";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"abracadabra";}
            -ReturnNode (void)			// return"abracadabra";
                -StringLiteralNode (string)			// "abracadabra"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"abracadabra";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"abracadabra";}
            -ReturnNode (void)			// return"abracadabra";
                -StringLiteralNode (string)			// "abracadabra"
    -ClassDefinitionNode (void)			// classvector{int[]data;voidinit(int[]vec){if(vec==null)return;data=newint[vec.size()];inti;for(i=0;i<vec.size();++i){data[i]=vec[i];}}intgetDim(){if(data==null)return0;returndata.size();}intdot(vectorrhs){inti=0;intresult=0;while(i<getDim()){result=data[i]*rhs.data[i];++i;}returnresult;}vectorscalarInPlaceMultiply(intc){if(data==null)returnnull;inti;for(i=0;i<getDim();++i){this.data[i]=c*this.data[i];}returnthis;}vectoradd(vectorrhs){if(getDim()!=rhs.getDim()||getDim()==0)returnnull;vectortemp=newvector;inti;for(i=0;i<getDim();++i){temp.data[i]=data[i]+rhs.data[i];}returntemp;}boolset(intidx,intvalue){if(getDim()<idx)returnfalse;data[idx]=value;returntrue;}stringtoString(){stringtemp="( ";if(getDim()>0){temp=temp+toString();}inti;for(i=1;i<getDim();++i){temp=temp+", "+toString();}temp=temp+" )";returntemp;}boolcopy(vectorrhs){if(rhs==null)returnfalse;if(rhs.getDim()==0){data=null;}else{data=newint[rhs.getDim()];inti;for(i=0;i<getDim();++i){data[i]=rhs.data[i];}}returntrue;}}
        -DeclarationNode (void)			// int[]data;
            -TypeNode (void)			// int[]
                -TypeAttributeNode (void)			// int[]
            -DeclaratorListNode (void)			// data
                -InitDeclaratorNode (void)			// data
                    -DeclaratorNode (void)			// data
        -FuncDefinitionNode (void)			// voidinit(int[]vec){if(vec==null)return;data=newint[vec.size()];inti;for(i=0;i<vec.size();++i){data[i]=vec[i];}}
            -TypeNode (void)			// void
                -TypeAttributeNode (void)			// void
            -FuncDeclaratorNode (void)			// init(int[]vec)
                -DeclaratorNode (void)			// init
                -ArgumentTypeListNode (void)			// int[]vec
                    -ArgumentDeclarationNode (void)			// int[]vec
                        -TypeNode (void)			// int[]
                            -TypeAttributeNode (void)			// int[]
                        -DeclaratorNode (void)			// vec
            -BlockNode (void)			// {if(vec==null)return;data=newint[vec.size()];inti;for(i=0;i<vec.size();++i){data[i]=vec[i];}}
                -IfNode (void)			// if(vec==null)return;
                    -EqualNode (bool)			// vec==null
                        -IdentifierNode (int[])			// vec
                        -ConstantNode (null)			// null
                    -ReturnNode (void)			// return;
                -StatementNode (void)			// data=newint[vec.size()];
                    -AssignNode (void)			// data=newint[vec.size()]
                        -IdentifierNode (int[])			// data
                        -NewNode (int[])			// newint[vec.size()]
                            -TypeNode (void)			// int[vec.size()]
                                -TypeAttributeNode (void)			// int[vec.size()]
                            -ArgumentTypeListNode (void)
                -DeclarationNode (void)			// inti;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i
                        -InitDeclaratorNode (void)			// i
                            -DeclaratorNode (void)			// i
                -ForNode (void)			// for(i=0;i<vec.size();++i){data[i]=vec[i];}
                    -ForConditionNode (void)			// i=0;i<vec.size();++i
                        -AssignNode (void)			// i=0
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 0
                        -LessThanNode (bool)			// i<vec.size()
                            -IdentifierNode (int)			// i
                            -ParenthesisOpNode (int)			// vec.size()
                                -DotOpNode (BaseType)			// vec.size
                                    -IdentifierNode (int[])			// vec
                                -ArgumentListNode (void)
                        -PrefixAddNode (int)			// ++i
                            -IdentifierNode (int)			// i
                    -BlockNode (void)			// {data[i]=vec[i];}
                        -StatementNode (void)			// data[i]=vec[i];
                            -AssignNode (void)			// data[i]=vec[i]
                                -SubscriptOpNode (int)			// data[i]
                                    -IdentifierNode (int[])			// data
                                    -IdentifierNode (int)			// i
                                -SubscriptOpNode (int)			// vec[i]
                                    -IdentifierNode (int[])			// vec
                                    -IdentifierNode (int)			// i
        -FuncDefinitionNode (void)			// intgetDim(){if(data==null)return0;returndata.size();}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// getDim()
                -DeclaratorNode (void)			// getDim
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {if(data==null)return0;returndata.size();}
                -IfNode (void)			// if(data==null)return0;
                    -EqualNode (bool)			// data==null
                        -IdentifierNode (int[])			// data
                        -ConstantNode (null)			// null
                    -ReturnNode (void)			// return0;
                        -ConstantNode (int)			// 0
                -ReturnNode (void)			// returndata.size();
                    -ParenthesisOpNode (int)			// data.size()
                        -DotOpNode (BaseType)			// data.size
                            -IdentifierNode (int[])			// data
                        -ArgumentListNode (void)
        -FuncDefinitionNode (void)			// intdot(vectorrhs){inti=0;intresult=0;while(i<getDim()){result=data[i]*rhs.data[i];++i;}returnresult;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// dot(vectorrhs)
                -DeclaratorNode (void)			// dot
                -ArgumentTypeListNode (void)			// vectorrhs
                    -ArgumentDeclarationNode (void)			// vectorrhs
                        -TypeNode (void)			// vector
                            -TypeAttributeNode (void)			// vector
                        -DeclaratorNode (void)			// rhs
            -BlockNode (void)			// {inti=0;intresult=0;while(i<getDim()){result=data[i]*rhs.data[i];++i;}returnresult;}
                -DeclarationNode (void)			// inti=0;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i=0
                        -InitDeclaratorNode (void)			// i=0
                            -DeclaratorNode (void)			// i
                            -ConstantNode (int)			// 0
                -DeclarationNode (void)			// intresult=0;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// result=0
                        -InitDeclaratorNode (void)			// result=0
                            -DeclaratorNode (void)			// result
                            -ConstantNode (int)			// 0
                -WhileNode (void)			// while(i<getDim()){result=data[i]*rhs.data[i];++i;}
                    -LessThanNode (bool)			// i<getDim()
                        -IdentifierNode (int)			// i
                        -ParenthesisOpNode (int)			// getDim()
                            -IdentifierNode (BaseType)			// getDim
                            -ArgumentListNode (void)
                    -BlockNode (void)			// {result=data[i]*rhs.data[i];++i;}
                        -StatementNode (void)			// result=data[i]*rhs.data[i];
                            -AssignNode (void)			// result=data[i]*rhs.data[i]
                                -IdentifierNode (int)			// result
                                -MultiplyNode (int)			// data[i]*rhs.data[i]
                                    -SubscriptOpNode (int)			// data[i]
                                        -IdentifierNode (int[])			// data
                                        -IdentifierNode (int)			// i
                                    -SubscriptOpNode (int)			// rhs.data[i]
                                        -DotOpNode (int[])			// rhs.data
                                            -IdentifierNode (vector)			// rhs
                                        -IdentifierNode (int)			// i
                        -StatementNode (void)			// ++i;
                            -PrefixAddNode (int)			// ++i
                                -IdentifierNode (int)			// i
                -ReturnNode (void)			// returnresult;
                    -IdentifierNode (int)			// result
        -FuncDefinitionNode (void)			// vectorscalarInPlaceMultiply(intc){if(data==null)returnnull;inti;for(i=0;i<getDim();++i){this.data[i]=c*this.data[i];}returnthis;}
            -TypeNode (void)			// vector
                -TypeAttributeNode (void)			// vector
            -FuncDeclaratorNode (void)			// scalarInPlaceMultiply(intc)
                -DeclaratorNode (void)			// scalarInPlaceMultiply
                -ArgumentTypeListNode (void)			// intc
                    -ArgumentDeclarationNode (void)			// intc
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// c
            -BlockNode (void)			// {if(data==null)returnnull;inti;for(i=0;i<getDim();++i){this.data[i]=c*this.data[i];}returnthis;}
                -IfNode (void)			// if(data==null)returnnull;
                    -EqualNode (bool)			// data==null
                        -IdentifierNode (int[])			// data
                        -ConstantNode (null)			// null
                    -ReturnNode (void)			// returnnull;
                        -ConstantNode (null)			// null
                -DeclarationNode (void)			// inti;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i
                        -InitDeclaratorNode (void)			// i
                            -DeclaratorNode (void)			// i
                -ForNode (void)			// for(i=0;i<getDim();++i){this.data[i]=c*this.data[i];}
                    -ForConditionNode (void)			// i=0;i<getDim();++i
                        -AssignNode (void)			// i=0
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 0
                        -LessThanNode (bool)			// i<getDim()
                            -IdentifierNode (int)			// i
                            -ParenthesisOpNode (int)			// getDim()
                                -IdentifierNode (BaseType)			// getDim
                                -ArgumentListNode (void)
                        -PrefixAddNode (int)			// ++i
                            -IdentifierNode (int)			// i
                    -BlockNode (void)			// {this.data[i]=c*this.data[i];}
                        -StatementNode (void)			// this.data[i]=c*this.data[i];
                            -AssignNode (void)			// this.data[i]=c*this.data[i]
                                -SubscriptOpNode (int)			// this.data[i]
                                    -DotOpNode (int[])			// this.data
                                        -ThisNode (vector)			// this
                                    -IdentifierNode (int)			// i
                                -MultiplyNode (int)			// c*this.data[i]
                                    -IdentifierNode (int)			// c
                                    -SubscriptOpNode (int)			// this.data[i]
                                        -DotOpNode (int[])			// this.data
                                            -ThisNode (vector)			// this
                                        -IdentifierNode (int)			// i
                -ReturnNode (void)			// returnthis;
                    -ThisNode (vector)			// this
        -FuncDefinitionNode (void)			// vectoradd(vectorrhs){if(getDim()!=rhs.getDim()||getDim()==0)returnnull;vectortemp=newvector;inti;for(i=0;i<getDim();++i){temp.data[i]=data[i]+rhs.data[i];}returntemp;}
            -TypeNode (void)			// vector
                -TypeAttributeNode (void)			// vector
            -FuncDeclaratorNode (void)			// add(vectorrhs)
                -DeclaratorNode (void)			// add
                -ArgumentTypeListNode (void)			// vectorrhs
                    -ArgumentDeclarationNode (void)			// vectorrhs
                        -TypeNode (void)			// vector
                            -TypeAttributeNode (void)			// vector
                        -DeclaratorNode (void)			// rhs
            -BlockNode (void)			// {if(getDim()!=rhs.getDim()||getDim()==0)returnnull;vectortemp=newvector;inti;for(i=0;i<getDim();++i){temp.data[i]=data[i]+rhs.data[i];}returntemp;}
                -IfNode (void)			// if(getDim()!=rhs.getDim()||getDim()==0)returnnull;
                    -LogicalOrNode (bool)			// getDim()!=rhs.getDim()||getDim()==0
                        -InequalNode (bool)			// getDim()!=rhs.getDim()
                            -ParenthesisOpNode (int)			// getDim()
                                -IdentifierNode (BaseType)			// getDim
                                -ArgumentListNode (void)
                            -ParenthesisOpNode (int)			// rhs.getDim()
                                -DotOpNode (BaseType)			// rhs.getDim
                                    -IdentifierNode (vector)			// rhs
                                -ArgumentListNode (void)
                        -EqualNode (bool)			// getDim()==0
                            -ParenthesisOpNode (int)			// getDim()
                                -IdentifierNode (BaseType)			// getDim
                                -ArgumentListNode (void)
                            -ConstantNode (int)			// 0
                    -ReturnNode (void)			// returnnull;
                        -ConstantNode (null)			// null
                -DeclarationNode (void)			// vectortemp=newvector;
                    -TypeNode (void)			// vector
                        -TypeAttributeNode (void)			// vector
                    -DeclaratorListNode (void)			// temp=newvector
                        -InitDeclaratorNode (void)			// temp=newvector
                            -DeclaratorNode (void)			// temp
                            -NewNode (vector)			// newvector
                                -TypeNode (void)			// vector
                                    -TypeAttributeNode (void)			// vector
                                -ArgumentTypeListNode (void)
                -DeclarationNode (void)			// inti;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i
                        -InitDeclaratorNode (void)			// i
                            -DeclaratorNode (void)			// i
                -ForNode (void)			// for(i=0;i<getDim();++i){temp.data[i]=data[i]+rhs.data[i];}
                    -ForConditionNode (void)			// i=0;i<getDim();++i
                        -AssignNode (void)			// i=0
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 0
                        -LessThanNode (bool)			// i<getDim()
                            -IdentifierNode (int)			// i
                            -ParenthesisOpNode (int)			// getDim()
                                -IdentifierNode (BaseType)			// getDim
                                -ArgumentListNode (void)
                        -PrefixAddNode (int)			// ++i
                            -IdentifierNode (int)			// i
                    -BlockNode (void)			// {temp.data[i]=data[i]+rhs.data[i];}
                        -StatementNode (void)			// temp.data[i]=data[i]+rhs.data[i];
                            -AssignNode (void)			// temp.data[i]=data[i]+rhs.data[i]
                                -SubscriptOpNode (int)			// temp.data[i]
                                    -DotOpNode (int[])			// temp.data
                                        -IdentifierNode (vector)			// temp
                                    -IdentifierNode (int)			// i
                                -AddNode (int)			// data[i]+rhs.data[i]
                                    -SubscriptOpNode (int)			// data[i]
                                        -IdentifierNode (int[])			// data
                                        -IdentifierNode (int)			// i
                                    -SubscriptOpNode (int)			// rhs.data[i]
                                        -DotOpNode (int[])			// rhs.data
                                            -IdentifierNode (vector)			// rhs
                                        -IdentifierNode (int)			// i
                -ReturnNode (void)			// returntemp;
                    -IdentifierNode (vector)			// temp
        -FuncDefinitionNode (void)			// boolset(intidx,intvalue){if(getDim()<idx)returnfalse;data[idx]=value;returntrue;}
            -TypeNode (void)			// bool
                -TypeAttributeNode (void)			// bool
            -FuncDeclaratorNode (void)			// set(intidx,intvalue)
                -DeclaratorNode (void)			// set
                -ArgumentTypeListNode (void)			// intidx,intvalue
                    -ArgumentDeclarationNode (void)			// intidx
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// idx
                    -ArgumentDeclarationNode (void)			// intvalue
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// value
            -BlockNode (void)			// {if(getDim()<idx)returnfalse;data[idx]=value;returntrue;}
                -IfNode (void)			// if(getDim()<idx)returnfalse;
                    -LessThanNode (bool)			// getDim()<idx
                        -ParenthesisOpNode (int)			// getDim()
                            -IdentifierNode (BaseType)			// getDim
                            -ArgumentListNode (void)
                        -IdentifierNode (int)			// idx
                    -ReturnNode (void)			// returnfalse;
                        -ConstantNode (bool)			// false
                -StatementNode (void)			// data[idx]=value;
                    -AssignNode (void)			// data[idx]=value
                        -SubscriptOpNode (int)			// data[idx]
                            -IdentifierNode (int[])			// data
                            -IdentifierNode (int)			// idx
                        -IdentifierNode (int)			// value
                -ReturnNode (void)			// returntrue;
                    -ConstantNode (bool)			// true
        -FuncDefinitionNode (void)			// stringtoString(){stringtemp="( ";if(getDim()>0){temp=temp+toString();}inti;for(i=1;i<getDim();++i){temp=temp+", "+toString();}temp=temp+" )";returntemp;}
            -TypeNode (void)			// string
                -TypeAttributeNode (void)			// string
            -FuncDeclaratorNode (void)			// toString()
                -DeclaratorNode (void)			// toString
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {stringtemp="( ";if(getDim()>0){temp=temp+toString();}inti;for(i=1;i<getDim();++i){temp=temp+", "+toString();}temp=temp+" )";returntemp;}
                -DeclarationNode (void)			// stringtemp="( ";
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorListNode (void)			// temp="( "
                        -InitDeclaratorNode (void)			// temp="( "
                            -DeclaratorNode (void)			// temp
                            -StringLiteralNode (string)			// "( "
                -IfNode (void)			// if(getDim()>0){temp=temp+toString();}
                    -GreaterThanNode (bool)			// getDim()>0
                        -ParenthesisOpNode (int)			// getDim()
                            -IdentifierNode (BaseType)			// getDim
                            -ArgumentListNode (void)
                        -ConstantNode (int)			// 0
                    -BlockNode (void)			// {temp=temp+toString();}
                        -StatementNode (void)			// temp=temp+toString();
                            -AssignNode (void)			// temp=temp+toString()
                                -IdentifierNode (string)			// temp
                                -AddNode (string)			// temp+toString()
                                    -IdentifierNode (string)			// temp
                                    -ParenthesisOpNode (string)			// toString()
                                        -IdentifierNode (BaseType)			// toString
                                        -ArgumentListNode (void)
                -DeclarationNode (void)			// inti;
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorListNode (void)			// i
                        -InitDeclaratorNode (void)			// i
                            -DeclaratorNode (void)			// i
                -ForNode (void)			// for(i=1;i<getDim();++i){temp=temp+", "+toString();}
                    -ForConditionNode (void)			// i=1;i<getDim();++i
                        -AssignNode (void)			// i=1
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                        -LessThanNode (bool)			// i<getDim()
                            -IdentifierNode (int)			// i
                            -ParenthesisOpNode (int)			// getDim()
                                -IdentifierNode (BaseType)			// getDim
                                -ArgumentListNode (void)
                        -PrefixAddNode (int)			// ++i
                            -IdentifierNode (int)			// i
                    -BlockNode (void)			// {temp=temp+", "+toString();}
                        -StatementNode (void)			// temp=temp+", "+toString();
                            -AssignNode (void)			// temp=temp+", "+toString()
                                -IdentifierNode (string)			// temp
                                -AddNode (string)			// temp+", "+toString()
                                    -AddNode (string)			// temp+", "
                                        -IdentifierNode (string)			// temp
                                        -StringLiteralNode (string)			// ", "
                                    -ParenthesisOpNode (string)			// toString()
                                        -IdentifierNode (BaseType)			// toString
                                        -ArgumentListNode (void)
                -StatementNode (void)			// temp=temp+" )";
                    -AssignNode (void)			// temp=temp+" )"
                        -IdentifierNode (string)			// temp
                        -AddNode (string)			// temp+" )"
                            -IdentifierNode (string)			// temp
                            -StringLiteralNode (string)			// " )"
                -ReturnNode (void)			// returntemp;
                    -IdentifierNode (string)			// temp
        -FuncDefinitionNode (void)			// boolcopy(vectorrhs){if(rhs==null)returnfalse;if(rhs.getDim()==0){data=null;}else{data=newint[rhs.getDim()];inti;for(i=0;i<getDim();++i){data[i]=rhs.data[i];}}returntrue;}
            -TypeNode (void)			// bool
                -TypeAttributeNode (void)			// bool
            -FuncDeclaratorNode (void)			// copy(vectorrhs)
                -DeclaratorNode (void)			// copy
                -ArgumentTypeListNode (void)			// vectorrhs
                    -ArgumentDeclarationNode (void)			// vectorrhs
                        -TypeNode (void)			// vector
                            -TypeAttributeNode (void)			// vector
                        -DeclaratorNode (void)			// rhs
            -BlockNode (void)			// {if(rhs==null)returnfalse;if(rhs.getDim()==0){data=null;}else{data=newint[rhs.getDim()];inti;for(i=0;i<getDim();++i){data[i]=rhs.data[i];}}returntrue;}
                -IfNode (void)			// if(rhs==null)returnfalse;
                    -EqualNode (bool)			// rhs==null
                        -IdentifierNode (vector)			// rhs
                        -ConstantNode (null)			// null
                    -ReturnNode (void)			// returnfalse;
                        -ConstantNode (bool)			// false
                -IfNode (void)			// if(rhs.getDim()==0){data=null;}else{data=newint[rhs.getDim()];inti;for(i=0;i<getDim();++i){data[i]=rhs.data[i];}}
                    -EqualNode (bool)			// rhs.getDim()==0
                        -ParenthesisOpNode (int)			// rhs.getDim()
                            -DotOpNode (BaseType)			// rhs.getDim
                                -IdentifierNode (vector)			// rhs
                            -ArgumentListNode (void)
                        -ConstantNode (int)			// 0
                    -BlockNode (void)			// {data=null;}
                        -StatementNode (void)			// data=null;
                            -AssignNode (void)			// data=null
                                -IdentifierNode (int[])			// data
                                -ConstantNode (null)			// null
                    -BlockNode (void)			// {data=newint[rhs.getDim()];inti;for(i=0;i<getDim();++i){data[i]=rhs.data[i];}}
                        -StatementNode (void)			// data=newint[rhs.getDim()];
                            -AssignNode (void)			// data=newint[rhs.getDim()]
                                -IdentifierNode (int[])			// data
                                -NewNode (int[])			// newint[rhs.getDim()]
                                    -TypeNode (void)			// int[rhs.getDim()]
                                        -TypeAttributeNode (void)			// int[rhs.getDim()]
                                    -ArgumentTypeListNode (void)
                        -DeclarationNode (void)			// inti;
                            -TypeNode (void)			// int
                                -TypeAttributeNode (void)			// int
                            -DeclaratorListNode (void)			// i
                                -InitDeclaratorNode (void)			// i
                                    -DeclaratorNode (void)			// i
                        -ForNode (void)			// for(i=0;i<getDim();++i){data[i]=rhs.data[i];}
                            -ForConditionNode (void)			// i=0;i<getDim();++i
                                -AssignNode (void)			// i=0
                                    -IdentifierNode (int)			// i
                                    -ConstantNode (int)			// 0
                                -LessThanNode (bool)			// i<getDim()
                                    -IdentifierNode (int)			// i
                                    -ParenthesisOpNode (int)			// getDim()
                                        -IdentifierNode (BaseType)			// getDim
                                        -ArgumentListNode (void)
                                -PrefixAddNode (int)			// ++i
                                    -IdentifierNode (int)			// i
                            -BlockNode (void)			// {data[i]=rhs.data[i];}
                                -StatementNode (void)			// data[i]=rhs.data[i];
                                    -AssignNode (void)			// data[i]=rhs.data[i]
                                        -SubscriptOpNode (int)			// data[i]
                                            -IdentifierNode (int[])			// data
                                            -IdentifierNode (int)			// i
                                        -SubscriptOpNode (int)			// rhs.data[i]
                                            -DotOpNode (int[])			// rhs.data
                                                -IdentifierNode (vector)			// rhs
                                            -IdentifierNode (int)			// i
                -ReturnNode (void)			// returntrue;
                    -ConstantNode (bool)			// true
    -FuncDefinitionNode (void)			// intmain(){vectorx=newvector;int[]a=newint[10];inti;for(i=0;i<10;++i){a[i]=9-i;}x.init(a);print("vector x: ");println(x.toString());vectory=newvector;y.copy(x);if(y.set(3,817)){println("excited!");}print("vector y: ");println(y.toString());print("x + y: ");println((x.add(y)).toString());print("x * y: ");println(toString(x.dot(y)));print("(1 << 3) * y: ");println(x.scalarInPlaceMultiply(1<<3).toString());}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {vectorx=newvector;int[]a=newint[10];inti;for(i=0;i<10;++i){a[i]=9-i;}x.init(a);print("vector x: ");println(x.toString());vectory=newvector;y.copy(x);if(y.set(3,817)){println("excited!");}print("vector y: ");println(y.toString());print("x + y: ");println((x.add(y)).toString());print("x * y: ");println(toString(x.dot(y)));print("(1 << 3) * y: ");println(x.scalarInPlaceMultiply(1<<3).toString());}
            -DeclarationNode (void)			// vectorx=newvector;
                -TypeNode (void)			// vector
                    -TypeAttributeNode (void)			// vector
                -DeclaratorListNode (void)			// x=newvector
                    -InitDeclaratorNode (void)			// x=newvector
                        -DeclaratorNode (void)			// x
                        -NewNode (vector)			// newvector
                            -TypeNode (void)			// vector
                                -TypeAttributeNode (void)			// vector
                            -ArgumentTypeListNode (void)
            -DeclarationNode (void)			// int[]a=newint[10];
                -TypeNode (void)			// int[]
                    -TypeAttributeNode (void)			// int[]
                -DeclaratorListNode (void)			// a=newint[10]
                    -InitDeclaratorNode (void)			// a=newint[10]
                        -DeclaratorNode (void)			// a
                        -NewNode (int[])			// newint[10]
                            -TypeNode (void)			// int[10]
                                -TypeAttributeNode (void)			// int[10]
                            -ArgumentTypeListNode (void)
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=0;i<10;++i){a[i]=9-i;}
                -ForConditionNode (void)			// i=0;i<10;++i
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<10
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 10
                    -PrefixAddNode (int)			// ++i
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {a[i]=9-i;}
                    -StatementNode (void)			// a[i]=9-i;
                        -AssignNode (void)			// a[i]=9-i
                            -SubscriptOpNode (int)			// a[i]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// i
                            -SubNode (int)			// 9-i
                                -ConstantNode (int)			// 9
                                -IdentifierNode (int)			// i
            -StatementNode (void)			// x.init(a);
                -ParenthesisOpNode (void)			// x.init(a)
                    -DotOpNode (BaseType)			// x.init
                        -IdentifierNode (vector)			// x
                    -ArgumentListNode (void)			// a
                        -IdentifierNode (int[])			// a
            -StatementNode (void)			// print("vector x: ");
                -ParenthesisOpNode (void)			// print("vector x: ")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// "vector x: "
                        -StringLiteralNode (string)			// "vector x: "
            -StatementNode (void)			// println(x.toString());
                -ParenthesisOpNode (void)			// println(x.toString())
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// x.toString()
                        -ParenthesisOpNode (string)			// x.toString()
                            -DotOpNode (BaseType)			// x.toString
                                -IdentifierNode (vector)			// x
                            -ArgumentListNode (void)
            -DeclarationNode (void)			// vectory=newvector;
                -TypeNode (void)			// vector
                    -TypeAttributeNode (void)			// vector
                -DeclaratorListNode (void)			// y=newvector
                    -InitDeclaratorNode (void)			// y=newvector
                        -DeclaratorNode (void)			// y
                        -NewNode (vector)			// newvector
                            -TypeNode (void)			// vector
                                -TypeAttributeNode (void)			// vector
                            -ArgumentTypeListNode (void)
            -StatementNode (void)			// y.copy(x);
                -ParenthesisOpNode (bool)			// y.copy(x)
                    -DotOpNode (BaseType)			// y.copy
                        -IdentifierNode (vector)			// y
                    -ArgumentListNode (void)			// x
                        -IdentifierNode (vector)			// x
            -IfNode (void)			// if(y.set(3,817)){println("excited!");}
                -ParenthesisOpNode (bool)			// y.set(3,817)
                    -DotOpNode (BaseType)			// y.set
                        -IdentifierNode (vector)			// y
                    -ArgumentListNode (void)			// 3,817
                        -ConstantNode (int)			// 3
                        -ConstantNode (int)			// 817
                -BlockNode (void)			// {println("excited!");}
                    -StatementNode (void)			// println("excited!");
                        -ParenthesisOpNode (void)			// println("excited!")
                            -IdentifierNode (BaseType)			// println
                            -ArgumentListNode (void)			// "excited!"
                                -StringLiteralNode (string)			// "excited!"
            -StatementNode (void)			// print("vector y: ");
                -ParenthesisOpNode (void)			// print("vector y: ")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// "vector y: "
                        -StringLiteralNode (string)			// "vector y: "
            -StatementNode (void)			// println(y.toString());
                -ParenthesisOpNode (void)			// println(y.toString())
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// y.toString()
                        -ParenthesisOpNode (string)			// y.toString()
                            -DotOpNode (BaseType)			// y.toString
                                -IdentifierNode (vector)			// y
                            -ArgumentListNode (void)
            -StatementNode (void)			// print("x + y: ");
                -ParenthesisOpNode (void)			// print("x + y: ")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// "x + y: "
                        -StringLiteralNode (string)			// "x + y: "
            -StatementNode (void)			// println((x.add(y)).toString());
                -ParenthesisOpNode (void)			// println((x.add(y)).toString())
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// (x.add(y)).toString()
                        -ParenthesisOpNode (string)			// (x.add(y)).toString()
                            -DotOpNode (BaseType)			// (x.add(y)).toString
                                -ParenthesisOpNode (vector)			// (x.add(y))
                                    -DotOpNode (BaseType)			// x.add
                                        -IdentifierNode (vector)			// x
                                    -ArgumentListNode (void)			// y
                                        -IdentifierNode (vector)			// y
                            -ArgumentListNode (void)
            -StatementNode (void)			// print("x * y: ");
                -ParenthesisOpNode (void)			// print("x * y: ")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// "x * y: "
                        -StringLiteralNode (string)			// "x * y: "
            -StatementNode (void)			// println(toString(x.dot(y)));
                -ParenthesisOpNode (void)			// println(toString(x.dot(y)))
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// toString(x.dot(y))
                        -ParenthesisOpNode (string)			// toString(x.dot(y))
                            -IdentifierNode (BaseType)			// toString
                            -ArgumentListNode (void)			// x.dot(y)
                                -ParenthesisOpNode (int)			// x.dot(y)
                                    -DotOpNode (BaseType)			// x.dot
                                        -IdentifierNode (vector)			// x
                                    -ArgumentListNode (void)			// y
                                        -IdentifierNode (vector)			// y
            -StatementNode (void)			// print("(1 << 3) * y: ");
                -ParenthesisOpNode (void)			// print("(1 << 3) * y: ")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// "(1 << 3) * y: "
                        -StringLiteralNode (string)			// "(1 << 3) * y: "
            -StatementNode (void)			// println(x.scalarInPlaceMultiply(1<<3).toString());
                -ParenthesisOpNode (void)			// println(x.scalarInPlaceMultiply(1<<3).toString())
                    -IdentifierNode (BaseType)			// println
                    -ArgumentListNode (void)			// x.scalarInPlaceMultiply(1<<3).toString()
                        -ParenthesisOpNode (string)			// x.scalarInPlaceMultiply(1<<3).toString()
                            -DotOpNode (BaseType)			// x.scalarInPlaceMultiply(1<<3).toString
                                -ParenthesisOpNode (vector)			// x.scalarInPlaceMultiply(1<<3)
                                    -DotOpNode (BaseType)			// x.scalarInPlaceMultiply
                                        -IdentifierNode (vector)			// x
                                    -ArgumentListNode (void)			// 1<<3
                                        -ShiftLeftNode (int)			// 1<<3
                                            -ConstantNode (int)			// 1
                                            -ConstantNode (int)			// 3
                            -ArgumentListNode (void)
