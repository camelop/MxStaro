-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprint(stringstr){}voidprintln(stringstr){}stringgetString(){return"abracadabra";}intgetInt(){return0;}stringtoString(inti){return"abracadabra";}int[]a=newint[10100];intn=10000;intqsrt(intl,intr){inti=l;intj=r;intx=a[(l+r)/2];while(i<=j){while(a[i]<x)i++;while(a[j]>x)j--;if(i<=j){inttemp=a[i];a[i]=a[j];a[j]=temp;i++;j--;}}if(l<j)qsrt(l,j);if(i<r)qsrt(i,r);return0;}intmain(){inti;for(i=1;i<=n;i++)a[i]=n+1-i;qsrt(1,n);for(i=1;i<=n;i++){print(toString(a[i]));print(" ");}print("\n");return0;}<EOF>
    -ClassDefinitionNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}
        -FuncDefinitionNode (void)			// intlength(){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// length()
                -DeclaratorNode (void)			// length
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
        -FuncDefinitionNode (void)			// stringsubstring(intleft,intright){return"";}
            -TypeNode (void)			// string
                -TypeAttributeNode (void)			// string
            -FuncDeclaratorNode (void)			// substring(intleft,intright)
                -DeclaratorNode (void)			// substring
                -ArgumentTypeListNode (void)			// intleft,intright
                    -ArgumentDeclarationNode (void)			// intleft
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// left
                    -ArgumentDeclarationNode (void)			// intright
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// right
            -BlockNode (void)			// {return"";}
                -ReturnNode (void)			// return"";
                    -StringLiteralNode (string)			// ""
        -FuncDefinitionNode (void)			// intparseInt(){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// parseInt()
                -DeclaratorNode (void)			// parseInt
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
        -FuncDefinitionNode (void)			// intord(intpos){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// ord(intpos)
                -DeclaratorNode (void)			// ord
                -ArgumentTypeListNode (void)			// intpos
                    -ArgumentDeclarationNode (void)			// intpos
                        -TypeNode (void)			// int
                            -TypeAttributeNode (void)			// int
                        -DeclaratorNode (void)			// pos
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
    -ClassDefinitionNode (void)			// classbuilt_in_array{intsize(){return0;}}
        -FuncDefinitionNode (void)			// intsize(){return0;}
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -FuncDeclaratorNode (void)			// size()
                -DeclaratorNode (void)			// size
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {return0;}
                -ReturnNode (void)			// return0;
                    -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// voidprint(stringstr){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// voidprintln(stringstr){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"abracadabra";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"abracadabra";}
            -ReturnNode (void)			// return"abracadabra";
                -StringLiteralNode (string)			// "abracadabra"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"abracadabra";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"abracadabra";}
            -ReturnNode (void)			// return"abracadabra";
                -StringLiteralNode (string)			// "abracadabra"
    -DeclarationNode (void)			// int[]a=newint[10100];
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
        -DeclaratorListNode (void)			// a=newint[10100]
            -InitDeclaratorNode (void)			// a=newint[10100]
                -DeclaratorNode (void)			// a
                -NewNode (int[])			// newint[10100]
                    -TypeNode (void)			// int[10100]
                        -TypeAttributeNode (void)			// int[10100]
                    -ArgumentTypeListNode (void)
    -DeclarationNode (void)			// intn=10000;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// n=10000
            -InitDeclaratorNode (void)			// n=10000
                -DeclaratorNode (void)			// n
                -ConstantNode (int)			// 10000
    -FuncDefinitionNode (void)			// intqsrt(intl,intr){inti=l;intj=r;intx=a[(l+r)/2];while(i<=j){while(a[i]<x)i++;while(a[j]>x)j--;if(i<=j){inttemp=a[i];a[i]=a[j];a[j]=temp;i++;j--;}}if(l<j)qsrt(l,j);if(i<r)qsrt(i,r);return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// qsrt(intl,intr)
            -DeclaratorNode (void)			// qsrt
            -ArgumentTypeListNode (void)			// intl,intr
                -ArgumentDeclarationNode (void)			// intl
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// l
                -ArgumentDeclarationNode (void)			// intr
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// r
        -BlockNode (void)			// {inti=l;intj=r;intx=a[(l+r)/2];while(i<=j){while(a[i]<x)i++;while(a[j]>x)j--;if(i<=j){inttemp=a[i];a[i]=a[j];a[j]=temp;i++;j--;}}if(l<j)qsrt(l,j);if(i<r)qsrt(i,r);return0;}
            -DeclarationNode (void)			// inti=l;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i=l
                    -InitDeclaratorNode (void)			// i=l
                        -DeclaratorNode (void)			// i
                        -IdentifierNode (int)			// l
            -DeclarationNode (void)			// intj=r;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// j=r
                    -InitDeclaratorNode (void)			// j=r
                        -DeclaratorNode (void)			// j
                        -IdentifierNode (int)			// r
            -DeclarationNode (void)			// intx=a[(l+r)/2];
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// x=a[(l+r)/2]
                    -InitDeclaratorNode (void)			// x=a[(l+r)/2]
                        -DeclaratorNode (void)			// x
                        -SubscriptOpNode (int)			// a[(l+r)/2]
                            -IdentifierNode (int[])			// a
                            -DivideNode (int)			// (l+r)/2
                                -AddNode (int)			// (l+r)
                                    -IdentifierNode (int)			// l
                                    -IdentifierNode (int)			// r
                                -ConstantNode (int)			// 2
            -WhileNode (void)			// while(i<=j){while(a[i]<x)i++;while(a[j]>x)j--;if(i<=j){inttemp=a[i];a[i]=a[j];a[j]=temp;i++;j--;}}
                -LessOrEqualThanNode (bool)			// i<=j
                    -IdentifierNode (int)			// i
                    -IdentifierNode (int)			// j
                -BlockNode (void)			// {while(a[i]<x)i++;while(a[j]>x)j--;if(i<=j){inttemp=a[i];a[i]=a[j];a[j]=temp;i++;j--;}}
                    -WhileNode (void)			// while(a[i]<x)i++;
                        -LessThanNode (bool)			// a[i]<x
                            -SubscriptOpNode (int)			// a[i]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// x
                        -StatementNode (void)			// i++;
                            -PostfixAddNode (int)			// i++
                                -IdentifierNode (int)			// i
                    -WhileNode (void)			// while(a[j]>x)j--;
                        -GreaterThanNode (bool)			// a[j]>x
                            -SubscriptOpNode (int)			// a[j]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// j
                            -IdentifierNode (int)			// x
                        -StatementNode (void)			// j--;
                            -PostfixSubNode (int)			// j--
                                -IdentifierNode (int)			// j
                    -IfNode (void)			// if(i<=j){inttemp=a[i];a[i]=a[j];a[j]=temp;i++;j--;}
                        -LessOrEqualThanNode (bool)			// i<=j
                            -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// j
                        -BlockNode (void)			// {inttemp=a[i];a[i]=a[j];a[j]=temp;i++;j--;}
                            -DeclarationNode (void)			// inttemp=a[i];
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// temp=a[i]
                                    -InitDeclaratorNode (void)			// temp=a[i]
                                        -DeclaratorNode (void)			// temp
                                        -SubscriptOpNode (int)			// a[i]
                                            -IdentifierNode (int[])			// a
                                            -IdentifierNode (int)			// i
                            -StatementNode (void)			// a[i]=a[j];
                                -AssignNode (void)			// a[i]=a[j]
                                    -SubscriptOpNode (int)			// a[i]
                                        -IdentifierNode (int[])			// a
                                        -IdentifierNode (int)			// i
                                    -SubscriptOpNode (int)			// a[j]
                                        -IdentifierNode (int[])			// a
                                        -IdentifierNode (int)			// j
                            -StatementNode (void)			// a[j]=temp;
                                -AssignNode (void)			// a[j]=temp
                                    -SubscriptOpNode (int)			// a[j]
                                        -IdentifierNode (int[])			// a
                                        -IdentifierNode (int)			// j
                                    -IdentifierNode (int)			// temp
                            -StatementNode (void)			// i++;
                                -PostfixAddNode (int)			// i++
                                    -IdentifierNode (int)			// i
                            -StatementNode (void)			// j--;
                                -PostfixSubNode (int)			// j--
                                    -IdentifierNode (int)			// j
            -IfNode (void)			// if(l<j)qsrt(l,j);
                -LessThanNode (bool)			// l<j
                    -IdentifierNode (int)			// l
                    -IdentifierNode (int)			// j
                -StatementNode (void)			// qsrt(l,j);
                    -ParenthesisOpNode (int)			// qsrt(l,j)
                        -IdentifierNode (BaseType)			// qsrt
                        -ArgumentListNode (void)			// l,j
                            -IdentifierNode (int)			// l
                            -IdentifierNode (int)			// j
            -IfNode (void)			// if(i<r)qsrt(i,r);
                -LessThanNode (bool)			// i<r
                    -IdentifierNode (int)			// i
                    -IdentifierNode (int)			// r
                -StatementNode (void)			// qsrt(i,r);
                    -ParenthesisOpNode (int)			// qsrt(i,r)
                        -IdentifierNode (BaseType)			// qsrt
                        -ArgumentListNode (void)			// i,r
                            -IdentifierNode (int)			// i
                            -IdentifierNode (int)			// r
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// intmain(){inti;for(i=1;i<=n;i++)a[i]=n+1-i;qsrt(1,n);for(i=1;i<=n;i++){print(toString(a[i]));print(" ");}print("\n");return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inti;for(i=1;i<=n;i++)a[i]=n+1-i;qsrt(1,n);for(i=1;i<=n;i++){print(toString(a[i]));print(" ");}print("\n");return0;}
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -ForNode (void)			// for(i=1;i<=n;i++)a[i]=n+1-i;
                -ForConditionNode (void)			// i=1;i<=n;i++
                    -AssignNode (void)			// i=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// i<=n
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// n
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -StatementNode (void)			// a[i]=n+1-i;
                    -AssignNode (void)			// a[i]=n+1-i
                        -SubscriptOpNode (int)			// a[i]
                            -IdentifierNode (int[])			// a
                            -IdentifierNode (int)			// i
                        -SubNode (int)			// n+1-i
                            -AddNode (int)			// n+1
                                -IdentifierNode (int)			// n
                                -ConstantNode (int)			// 1
                            -IdentifierNode (int)			// i
            -StatementNode (void)			// qsrt(1,n);
                -ParenthesisOpNode (int)			// qsrt(1,n)
                    -IdentifierNode (BaseType)			// qsrt
                    -ArgumentListNode (void)			// 1,n
                        -ConstantNode (int)			// 1
                        -IdentifierNode (int)			// n
            -ForNode (void)			// for(i=1;i<=n;i++){print(toString(a[i]));print(" ");}
                -ForConditionNode (void)			// i=1;i<=n;i++
                    -AssignNode (void)			// i=1
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 1
                    -LessOrEqualThanNode (bool)			// i<=n
                        -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// n
                    -PostfixAddNode (int)			// i++
                        -IdentifierNode (int)			// i
                -BlockNode (void)			// {print(toString(a[i]));print(" ");}
                    -StatementNode (void)			// print(toString(a[i]));
                        -ParenthesisOpNode (void)			// print(toString(a[i]))
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// toString(a[i])
                                -ParenthesisOpNode (string)			// toString(a[i])
                                    -IdentifierNode (BaseType)			// toString
                                    -ArgumentListNode (void)			// a[i]
                                        -SubscriptOpNode (int)			// a[i]
                                            -IdentifierNode (int[])			// a
                                            -IdentifierNode (int)			// i
                    -StatementNode (void)			// print(" ");
                        -ParenthesisOpNode (void)			// print(" ")
                            -IdentifierNode (BaseType)			// print
                            -ArgumentListNode (void)			// " "
                                -StringLiteralNode (string)			// " "
            -StatementNode (void)			// print("\n");
                -ParenthesisOpNode (void)			// print("\n")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// "\n"
                        -StringLiteralNode (string)			// "\n"
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
