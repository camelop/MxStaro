-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}intn;int[]a;voidexchange(intx,inty){intt=a[x];a[x]=a[y];a[y]=t;}intmakeHeap(){inti;intt;intj;i=(n-1)/2;t=0;j=0;while(i>=0){j=i*2;if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;if(a[i]>a[j]){exchange(i,j);}i=i-1;}return0;}intadjustHeap(intn){inti;intj;intt;i=0;j=0;t=0;while(i*2<n){j=i*2;if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;if(a[i]>a[j]){intt=a[i];a[i]=a[j];a[j]=t;i=j;}elsebreak;}return0;}intheapSort(){intt;intk;t=0;for(k=0;k<n;k=k+1){t=a[0];a[0]=a[n-k-1];a[n-k-1]=t;adjustHeap(n-k-1);}return0;}intmain(){inti;n=getString().parseInt();a=newint[n];for(i=0;i<a.size();i=i+1)a[i]=i;makeHeap();heapSort();for(i=0;i<a.size();i=i+39997)print(toString(a[i])+" ");print("\n");return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -DeclarationNode (void)			// intn;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// n
            -InitDeclaratorNode (void)			// n
                -DeclaratorNode (void)			// n
    -DeclarationNode (void)			// int[]a;
        -TypeNode (void)			// int[]
            -TypeAttributeNode (void)			// int[]
                -EmptyExpressionNode (void)
        -DeclaratorListNode (void)			// a
            -InitDeclaratorNode (void)			// a
                -DeclaratorNode (void)			// a
    -FuncDefinitionNode (void)			// voidexchange(intx,inty){intt=a[x];a[x]=a[y];a[y]=t;}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// exchange(intx,inty)
            -DeclaratorNode (void)			// exchange
            -ArgumentTypeListNode (void)			// intx,inty
                -ArgumentDeclarationNode (void)			// intx
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// x
                -ArgumentDeclarationNode (void)			// inty
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// y
        -BlockNode (void)			// {intt=a[x];a[x]=a[y];a[y]=t;}
            -DeclarationNode (void)			// intt=a[x];
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// t=a[x]
                    -InitDeclaratorNode (void)			// t=a[x]
                        -DeclaratorNode (void)			// t
                        -SubscriptOpNode (int)			// a[x]
                            -IdentifierNode (int[])			// a
                            -IdentifierNode (int)			// x
            -StatementNode (void)			// a[x]=a[y];
                -AssignNode (void)			// a[x]=a[y]
                    -SubscriptOpNode (int)			// a[x]
                        -IdentifierNode (int[])			// a
                        -IdentifierNode (int)			// x
                    -SubscriptOpNode (int)			// a[y]
                        -IdentifierNode (int[])			// a
                        -IdentifierNode (int)			// y
            -StatementNode (void)			// a[y]=t;
                -AssignNode (void)			// a[y]=t
                    -SubscriptOpNode (int)			// a[y]
                        -IdentifierNode (int[])			// a
                        -IdentifierNode (int)			// y
                    -IdentifierNode (int)			// t
    -FuncDefinitionNode (void)			// intmakeHeap(){inti;intt;intj;i=(n-1)/2;t=0;j=0;while(i>=0){j=i*2;if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;if(a[i]>a[j]){exchange(i,j);}i=i-1;}return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// makeHeap()
            -DeclaratorNode (void)			// makeHeap
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inti;intt;intj;i=(n-1)/2;t=0;j=0;while(i>=0){j=i*2;if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;if(a[i]>a[j]){exchange(i,j);}i=i-1;}return0;}
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -DeclarationNode (void)			// intt;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// t
                    -InitDeclaratorNode (void)			// t
                        -DeclaratorNode (void)			// t
            -DeclarationNode (void)			// intj;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// j
                    -InitDeclaratorNode (void)			// j
                        -DeclaratorNode (void)			// j
            -StatementNode (void)			// i=(n-1)/2;
                -AssignNode (void)			// i=(n-1)/2
                    -IdentifierNode (int)			// i
                    -DivideNode (int)			// (n-1)/2
                        -SubNode (int)			// (n-1)
                            -IdentifierNode (int)			// n
                            -ConstantNode (int)			// 1
                        -ConstantNode (int)			// 2
            -StatementNode (void)			// t=0;
                -AssignNode (void)			// t=0
                    -IdentifierNode (int)			// t
                    -ConstantNode (int)			// 0
            -StatementNode (void)			// j=0;
                -AssignNode (void)			// j=0
                    -IdentifierNode (int)			// j
                    -ConstantNode (int)			// 0
            -WhileNode (void)			// while(i>=0){j=i*2;if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;if(a[i]>a[j]){exchange(i,j);}i=i-1;}
                -GreaterOrEqualThanNode (bool)			// i>=0
                    -IdentifierNode (int)			// i
                    -ConstantNode (int)			// 0
                -BlockNode (void)			// {j=i*2;if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;if(a[i]>a[j]){exchange(i,j);}i=i-1;}
                    -StatementNode (void)			// j=i*2;
                        -AssignNode (void)			// j=i*2
                            -IdentifierNode (int)			// j
                            -MultiplyNode (int)			// i*2
                                -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 2
                    -IfNode (void)			// if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;
                        -LogicalAndNode (bool)			// i*2+1<n&&a[i*2+1]<a[i*2]
                            -LessThanNode (bool)			// i*2+1<n
                                -AddNode (int)			// i*2+1
                                    -MultiplyNode (int)			// i*2
                                        -IdentifierNode (int)			// i
                                        -ConstantNode (int)			// 2
                                    -ConstantNode (int)			// 1
                                -IdentifierNode (int)			// n
                            -LessThanNode (bool)			// a[i*2+1]<a[i*2]
                                -SubscriptOpNode (int)			// a[i*2+1]
                                    -IdentifierNode (int[])			// a
                                    -AddNode (int)			// i*2+1
                                        -MultiplyNode (int)			// i*2
                                            -IdentifierNode (int)			// i
                                            -ConstantNode (int)			// 2
                                        -ConstantNode (int)			// 1
                                -SubscriptOpNode (int)			// a[i*2]
                                    -IdentifierNode (int[])			// a
                                    -MultiplyNode (int)			// i*2
                                        -IdentifierNode (int)			// i
                                        -ConstantNode (int)			// 2
                        -StatementNode (void)			// j=i*2+1;
                            -AssignNode (void)			// j=i*2+1
                                -IdentifierNode (int)			// j
                                -AddNode (int)			// i*2+1
                                    -MultiplyNode (int)			// i*2
                                        -IdentifierNode (int)			// i
                                        -ConstantNode (int)			// 2
                                    -ConstantNode (int)			// 1
                    -IfNode (void)			// if(a[i]>a[j]){exchange(i,j);}
                        -GreaterThanNode (bool)			// a[i]>a[j]
                            -SubscriptOpNode (int)			// a[i]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// i
                            -SubscriptOpNode (int)			// a[j]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// j
                        -BlockNode (void)			// {exchange(i,j);}
                            -StatementNode (void)			// exchange(i,j);
                                -ParenthesisOpNode (void)			// exchange(i,j)
                                    -IdentifierNode (BaseType)			// exchange
                                    -ArgumentListNode (void)			// i,j
                                        -IdentifierNode (int)			// i
                                        -IdentifierNode (int)			// j
                    -StatementNode (void)			// i=i-1;
                        -AssignNode (void)			// i=i-1
                            -IdentifierNode (int)			// i
                            -SubNode (int)			// i-1
                                -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 1
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// intadjustHeap(intn){inti;intj;intt;i=0;j=0;t=0;while(i*2<n){j=i*2;if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;if(a[i]>a[j]){intt=a[i];a[i]=a[j];a[j]=t;i=j;}elsebreak;}return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// adjustHeap(intn)
            -DeclaratorNode (void)			// adjustHeap
            -ArgumentTypeListNode (void)			// intn
                -ArgumentDeclarationNode (void)			// intn
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// n
        -BlockNode (void)			// {inti;intj;intt;i=0;j=0;t=0;while(i*2<n){j=i*2;if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;if(a[i]>a[j]){intt=a[i];a[i]=a[j];a[j]=t;i=j;}elsebreak;}return0;}
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -DeclarationNode (void)			// intj;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// j
                    -InitDeclaratorNode (void)			// j
                        -DeclaratorNode (void)			// j
            -DeclarationNode (void)			// intt;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// t
                    -InitDeclaratorNode (void)			// t
                        -DeclaratorNode (void)			// t
            -StatementNode (void)			// i=0;
                -AssignNode (void)			// i=0
                    -IdentifierNode (int)			// i
                    -ConstantNode (int)			// 0
            -StatementNode (void)			// j=0;
                -AssignNode (void)			// j=0
                    -IdentifierNode (int)			// j
                    -ConstantNode (int)			// 0
            -StatementNode (void)			// t=0;
                -AssignNode (void)			// t=0
                    -IdentifierNode (int)			// t
                    -ConstantNode (int)			// 0
            -WhileNode (void)			// while(i*2<n){j=i*2;if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;if(a[i]>a[j]){intt=a[i];a[i]=a[j];a[j]=t;i=j;}elsebreak;}
                -LessThanNode (bool)			// i*2<n
                    -MultiplyNode (int)			// i*2
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 2
                    -IdentifierNode (int)			// n
                -BlockNode (void)			// {j=i*2;if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;if(a[i]>a[j]){intt=a[i];a[i]=a[j];a[j]=t;i=j;}elsebreak;}
                    -StatementNode (void)			// j=i*2;
                        -AssignNode (void)			// j=i*2
                            -IdentifierNode (int)			// j
                            -MultiplyNode (int)			// i*2
                                -IdentifierNode (int)			// i
                                -ConstantNode (int)			// 2
                    -IfNode (void)			// if(i*2+1<n&&a[i*2+1]<a[i*2])j=i*2+1;
                        -LogicalAndNode (bool)			// i*2+1<n&&a[i*2+1]<a[i*2]
                            -LessThanNode (bool)			// i*2+1<n
                                -AddNode (int)			// i*2+1
                                    -MultiplyNode (int)			// i*2
                                        -IdentifierNode (int)			// i
                                        -ConstantNode (int)			// 2
                                    -ConstantNode (int)			// 1
                                -IdentifierNode (int)			// n
                            -LessThanNode (bool)			// a[i*2+1]<a[i*2]
                                -SubscriptOpNode (int)			// a[i*2+1]
                                    -IdentifierNode (int[])			// a
                                    -AddNode (int)			// i*2+1
                                        -MultiplyNode (int)			// i*2
                                            -IdentifierNode (int)			// i
                                            -ConstantNode (int)			// 2
                                        -ConstantNode (int)			// 1
                                -SubscriptOpNode (int)			// a[i*2]
                                    -IdentifierNode (int[])			// a
                                    -MultiplyNode (int)			// i*2
                                        -IdentifierNode (int)			// i
                                        -ConstantNode (int)			// 2
                        -StatementNode (void)			// j=i*2+1;
                            -AssignNode (void)			// j=i*2+1
                                -IdentifierNode (int)			// j
                                -AddNode (int)			// i*2+1
                                    -MultiplyNode (int)			// i*2
                                        -IdentifierNode (int)			// i
                                        -ConstantNode (int)			// 2
                                    -ConstantNode (int)			// 1
                    -IfNode (void)			// if(a[i]>a[j]){intt=a[i];a[i]=a[j];a[j]=t;i=j;}elsebreak;
                        -GreaterThanNode (bool)			// a[i]>a[j]
                            -SubscriptOpNode (int)			// a[i]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// i
                            -SubscriptOpNode (int)			// a[j]
                                -IdentifierNode (int[])			// a
                                -IdentifierNode (int)			// j
                        -BlockNode (void)			// {intt=a[i];a[i]=a[j];a[j]=t;i=j;}
                            -DeclarationNode (void)			// intt=a[i];
                                -TypeNode (void)			// int
                                    -TypeAttributeNode (void)			// int
                                -DeclaratorListNode (void)			// t=a[i]
                                    -InitDeclaratorNode (void)			// t=a[i]
                                        -DeclaratorNode (void)			// t
                                        -SubscriptOpNode (int)			// a[i]
                                            -IdentifierNode (int[])			// a
                                            -IdentifierNode (int)			// i
                            -StatementNode (void)			// a[i]=a[j];
                                -AssignNode (void)			// a[i]=a[j]
                                    -SubscriptOpNode (int)			// a[i]
                                        -IdentifierNode (int[])			// a
                                        -IdentifierNode (int)			// i
                                    -SubscriptOpNode (int)			// a[j]
                                        -IdentifierNode (int[])			// a
                                        -IdentifierNode (int)			// j
                            -StatementNode (void)			// a[j]=t;
                                -AssignNode (void)			// a[j]=t
                                    -SubscriptOpNode (int)			// a[j]
                                        -IdentifierNode (int[])			// a
                                        -IdentifierNode (int)			// j
                                    -IdentifierNode (int)			// t
                            -StatementNode (void)			// i=j;
                                -AssignNode (void)			// i=j
                                    -IdentifierNode (int)			// i
                                    -IdentifierNode (int)			// j
                        -BreakNode (void)			// break;
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// intheapSort(){intt;intk;t=0;for(k=0;k<n;k=k+1){t=a[0];a[0]=a[n-k-1];a[n-k-1]=t;adjustHeap(n-k-1);}return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// heapSort()
            -DeclaratorNode (void)			// heapSort
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {intt;intk;t=0;for(k=0;k<n;k=k+1){t=a[0];a[0]=a[n-k-1];a[n-k-1]=t;adjustHeap(n-k-1);}return0;}
            -DeclarationNode (void)			// intt;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// t
                    -InitDeclaratorNode (void)			// t
                        -DeclaratorNode (void)			// t
            -DeclarationNode (void)			// intk;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// k
                    -InitDeclaratorNode (void)			// k
                        -DeclaratorNode (void)			// k
            -StatementNode (void)			// t=0;
                -AssignNode (void)			// t=0
                    -IdentifierNode (int)			// t
                    -ConstantNode (int)			// 0
            -ForNode (void)			// for(k=0;k<n;k=k+1){t=a[0];a[0]=a[n-k-1];a[n-k-1]=t;adjustHeap(n-k-1);}
                -ForConditionNode (void)			// k=0;k<n;k=k+1
                    -AssignNode (void)			// k=0
                        -IdentifierNode (int)			// k
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// k<n
                        -IdentifierNode (int)			// k
                        -IdentifierNode (int)			// n
                    -AssignNode (void)			// k=k+1
                        -IdentifierNode (int)			// k
                        -AddNode (int)			// k+1
                            -IdentifierNode (int)			// k
                            -ConstantNode (int)			// 1
                -BlockNode (void)			// {t=a[0];a[0]=a[n-k-1];a[n-k-1]=t;adjustHeap(n-k-1);}
                    -StatementNode (void)			// t=a[0];
                        -AssignNode (void)			// t=a[0]
                            -IdentifierNode (int)			// t
                            -SubscriptOpNode (int)			// a[0]
                                -IdentifierNode (int[])			// a
                                -ConstantNode (int)			// 0
                    -StatementNode (void)			// a[0]=a[n-k-1];
                        -AssignNode (void)			// a[0]=a[n-k-1]
                            -SubscriptOpNode (int)			// a[0]
                                -IdentifierNode (int[])			// a
                                -ConstantNode (int)			// 0
                            -SubscriptOpNode (int)			// a[n-k-1]
                                -IdentifierNode (int[])			// a
                                -SubNode (int)			// n-k-1
                                    -SubNode (int)			// n-k
                                        -IdentifierNode (int)			// n
                                        -IdentifierNode (int)			// k
                                    -ConstantNode (int)			// 1
                    -StatementNode (void)			// a[n-k-1]=t;
                        -AssignNode (void)			// a[n-k-1]=t
                            -SubscriptOpNode (int)			// a[n-k-1]
                                -IdentifierNode (int[])			// a
                                -SubNode (int)			// n-k-1
                                    -SubNode (int)			// n-k
                                        -IdentifierNode (int)			// n
                                        -IdentifierNode (int)			// k
                                    -ConstantNode (int)			// 1
                            -IdentifierNode (int)			// t
                    -StatementNode (void)			// adjustHeap(n-k-1);
                        -ParenthesisOpNode (int)			// adjustHeap(n-k-1)
                            -IdentifierNode (BaseType)			// adjustHeap
                            -ArgumentListNode (void)			// n-k-1
                                -SubNode (int)			// n-k-1
                                    -SubNode (int)			// n-k
                                        -IdentifierNode (int)			// n
                                        -IdentifierNode (int)			// k
                                    -ConstantNode (int)			// 1
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// intmain(){inti;n=getString().parseInt();a=newint[n];for(i=0;i<a.size();i=i+1)a[i]=i;makeHeap();heapSort();for(i=0;i<a.size();i=i+39997)print(toString(a[i])+" ");print("\n");return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {inti;n=getString().parseInt();a=newint[n];for(i=0;i<a.size();i=i+1)a[i]=i;makeHeap();heapSort();for(i=0;i<a.size();i=i+39997)print(toString(a[i])+" ");print("\n");return0;}
            -DeclarationNode (void)			// inti;
                -TypeNode (void)			// int
                    -TypeAttributeNode (void)			// int
                -DeclaratorListNode (void)			// i
                    -InitDeclaratorNode (void)			// i
                        -DeclaratorNode (void)			// i
            -StatementNode (void)			// n=getString().parseInt();
                -AssignNode (void)			// n=getString().parseInt()
                    -IdentifierNode (int)			// n
                    -ParenthesisOpNode (int)			// getString().parseInt()
                        -DotOpNode (BaseType)			// getString().parseInt
                            -ParenthesisOpNode (string)			// getString()
                                -IdentifierNode (BaseType)			// getString
                                -ArgumentListNode (void)
                        -ArgumentListNode (void)
            -StatementNode (void)			// a=newint[n];
                -AssignNode (void)			// a=newint[n]
                    -IdentifierNode (int[])			// a
                    -NewNode (int[])			// newint[n]
                        -TypeNode (void)			// int[n]
                            -TypeAttributeNode (void)			// int[n]
                                -IdentifierNode (int)			// n
                        -ArgumentTypeListNode (void)
            -ForNode (void)			// for(i=0;i<a.size();i=i+1)a[i]=i;
                -ForConditionNode (void)			// i=0;i<a.size();i=i+1
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<a.size()
                        -IdentifierNode (int)			// i
                        -ParenthesisOpNode (int)			// a.size()
                            -DotOpNode (BaseType)			// a.size
                                -IdentifierNode (int[])			// a
                            -ArgumentListNode (void)
                    -AssignNode (void)			// i=i+1
                        -IdentifierNode (int)			// i
                        -AddNode (int)			// i+1
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 1
                -StatementNode (void)			// a[i]=i;
                    -AssignNode (void)			// a[i]=i
                        -SubscriptOpNode (int)			// a[i]
                            -IdentifierNode (int[])			// a
                            -IdentifierNode (int)			// i
                        -IdentifierNode (int)			// i
            -StatementNode (void)			// makeHeap();
                -ParenthesisOpNode (int)			// makeHeap()
                    -IdentifierNode (BaseType)			// makeHeap
                    -ArgumentListNode (void)
            -StatementNode (void)			// heapSort();
                -ParenthesisOpNode (int)			// heapSort()
                    -IdentifierNode (BaseType)			// heapSort
                    -ArgumentListNode (void)
            -ForNode (void)			// for(i=0;i<a.size();i=i+39997)print(toString(a[i])+" ");
                -ForConditionNode (void)			// i=0;i<a.size();i=i+39997
                    -AssignNode (void)			// i=0
                        -IdentifierNode (int)			// i
                        -ConstantNode (int)			// 0
                    -LessThanNode (bool)			// i<a.size()
                        -IdentifierNode (int)			// i
                        -ParenthesisOpNode (int)			// a.size()
                            -DotOpNode (BaseType)			// a.size
                                -IdentifierNode (int[])			// a
                            -ArgumentListNode (void)
                    -AssignNode (void)			// i=i+39997
                        -IdentifierNode (int)			// i
                        -AddNode (int)			// i+39997
                            -IdentifierNode (int)			// i
                            -ConstantNode (int)			// 39997
                -StatementNode (void)			// print(toString(a[i])+" ");
                    -ParenthesisOpNode (void)			// print(toString(a[i])+" ")
                        -IdentifierNode (BaseType)			// print
                        -ArgumentListNode (void)			// toString(a[i])+" "
                            -AddNode (string)			// toString(a[i])+" "
                                -ParenthesisOpNode (string)			// toString(a[i])
                                    -IdentifierNode (BaseType)			// toString
                                    -ArgumentListNode (void)			// a[i]
                                        -SubscriptOpNode (int)			// a[i]
                                            -IdentifierNode (int[])			// a
                                            -IdentifierNode (int)			// i
                                -StringLiteralNode (string)			// " "
            -StatementNode (void)			// print("\n");
                -ParenthesisOpNode (void)			// print("\n")
                    -IdentifierNode (BaseType)			// print
                    -ArgumentListNode (void)			// "\n"
                        -StringLiteralNode (string)			// "\n"
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
