-CompilationNode (void)			// classbuilt_in_string{intlength(){return0;}stringsubstring(intleft,intright){return"";}intparseInt(){return0;}intord(intpos){return0;}}classbuilt_in_array{intsize(){return0;}}voidprintf(stringf,stringsrc){}stringgetString(){return"littleRound";}intgetInt(){return0;}stringtoString(inti){return"littleRound";}voidprint(stringstr){printf("%s",str);}voidprintln(stringstr){printf("%s\n",str);}voidbuilt_in_data_init(){}intWallace=1<<10,w2;classsometimes{intnaive;voidmake_money(){this.naive++;}}intmain(){sometimeskeep=newsometimes;keep.naive=0;while(getInt()<Wallace){keep.make_money();}return0;}<EOF>
    -FuncDefinitionNode (void)			// voidprintf(stringf,stringsrc){}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// printf(stringf,stringsrc)
            -DeclaratorNode (void)			// printf
            -ArgumentTypeListNode (void)			// stringf,stringsrc
                -ArgumentDeclarationNode (void)			// stringf
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// f
                -ArgumentDeclarationNode (void)			// stringsrc
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// src
        -BlockNode (void)			// {}
    -FuncDefinitionNode (void)			// stringgetString(){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// getString()
            -DeclaratorNode (void)			// getString
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// intgetInt(){return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// getInt()
            -DeclaratorNode (void)			// getInt
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {return0;}
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
    -FuncDefinitionNode (void)			// stringtoString(inti){return"littleRound";}
        -TypeNode (void)			// string
            -TypeAttributeNode (void)			// string
        -FuncDeclaratorNode (void)			// toString(inti)
            -DeclaratorNode (void)			// toString
            -ArgumentTypeListNode (void)			// inti
                -ArgumentDeclarationNode (void)			// inti
                    -TypeNode (void)			// int
                        -TypeAttributeNode (void)			// int
                    -DeclaratorNode (void)			// i
        -BlockNode (void)			// {return"littleRound";}
            -ReturnNode (void)			// return"littleRound";
                -StringLiteralNode (string)			// "littleRound"
    -FuncDefinitionNode (void)			// voidprint(stringstr){printf("%s",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// print(stringstr)
            -DeclaratorNode (void)			// print
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s",str);}
            -StatementNode (void)			// printf("%s",str);
                -ParenthesisOpNode (void)			// printf("%s",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s",str
                        -StringLiteralNode (string)			// "%s"
                        -IdentifierNode (string)			// str
    -FuncDefinitionNode (void)			// voidprintln(stringstr){printf("%s\n",str);}
        -TypeNode (void)			// void
            -TypeAttributeNode (void)			// void
        -FuncDeclaratorNode (void)			// println(stringstr)
            -DeclaratorNode (void)			// println
            -ArgumentTypeListNode (void)			// stringstr
                -ArgumentDeclarationNode (void)			// stringstr
                    -TypeNode (void)			// string
                        -TypeAttributeNode (void)			// string
                    -DeclaratorNode (void)			// str
        -BlockNode (void)			// {printf("%s\n",str);}
            -StatementNode (void)			// printf("%s\n",str);
                -ParenthesisOpNode (void)			// printf("%s\n",str)
                    -IdentifierNode (BaseType)			// printf
                    -ArgumentListNode (void)			// "%s\n",str
                        -StringLiteralNode (string)			// "%s\n"
                        -IdentifierNode (string)			// str
    -DeclarationNode (void)			// intWallace=1<<10,w2;
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -DeclaratorListNode (void)			// Wallace=1<<10,w2
            -InitDeclaratorNode (void)			// Wallace=1<<10
                -DeclaratorNode (void)			// Wallace
                -ShiftLeftNode (int)			// 1<<10
                    -ConstantNode (int)			// 1
                    -ConstantNode (int)			// 10
            -InitDeclaratorNode (void)			// w2
                -DeclaratorNode (void)			// w2
    -ClassDefinitionNode (void)			// classsometimes{intnaive;voidmake_money(){this.naive++;}}
        -DeclarationNode (void)			// intnaive;
            -TypeNode (void)			// int
                -TypeAttributeNode (void)			// int
            -DeclaratorListNode (void)			// naive
                -InitDeclaratorNode (void)			// naive
                    -DeclaratorNode (void)			// naive
        -FuncDefinitionNode (void)			// voidmake_money(){this.naive++;}
            -TypeNode (void)			// void
                -TypeAttributeNode (void)			// void
            -FuncDeclaratorNode (void)			// make_money()
                -DeclaratorNode (void)			// make_money
                -ArgumentTypeListNode (void)
            -BlockNode (void)			// {this.naive++;}
                -StatementNode (void)			// this.naive++;
                    -PostfixAddNode (int)			// this.naive++
                        -DotOpNode (int)			// this.naive
                            -ThisNode (sometimes)			// this
    -FuncDefinitionNode (void)			// intmain(){sometimeskeep=newsometimes;keep.naive=0;while(getInt()<Wallace){keep.make_money();}return0;}
        -TypeNode (void)			// int
            -TypeAttributeNode (void)			// int
        -FuncDeclaratorNode (void)			// main()
            -DeclaratorNode (void)			// main
            -ArgumentTypeListNode (void)
        -BlockNode (void)			// {sometimeskeep=newsometimes;keep.naive=0;while(getInt()<Wallace){keep.make_money();}return0;}
            -DeclarationNode (void)			// sometimeskeep=newsometimes;
                -TypeNode (void)			// sometimes
                    -TypeAttributeNode (void)			// sometimes
                -DeclaratorListNode (void)			// keep=newsometimes
                    -InitDeclaratorNode (void)			// keep=newsometimes
                        -DeclaratorNode (void)			// keep
                        -NewNode (sometimes)			// newsometimes
                            -TypeNode (void)			// sometimes
                                -TypeAttributeNode (void)			// sometimes
                            -ArgumentTypeListNode (void)
            -StatementNode (void)			// keep.naive=0;
                -AssignNode (void)			// keep.naive=0
                    -DotOpNode (int)			// keep.naive
                        -IdentifierNode (sometimes)			// keep
                    -ConstantNode (int)			// 0
            -WhileNode (void)			// while(getInt()<Wallace){keep.make_money();}
                -LessThanNode (bool)			// getInt()<Wallace
                    -ParenthesisOpNode (int)			// getInt()
                        -IdentifierNode (BaseType)			// getInt
                        -ArgumentListNode (void)
                    -IdentifierNode (int)			// Wallace
                -BlockNode (void)			// {keep.make_money();}
                    -StatementNode (void)			// keep.make_money();
                        -ParenthesisOpNode (void)			// keep.make_money()
                            -DotOpNode (BaseType)			// keep.make_money
                                -IdentifierNode (sometimes)			// keep
                            -ArgumentListNode (void)
            -ReturnNode (void)			// return0;
                -ConstantNode (int)			// 0
